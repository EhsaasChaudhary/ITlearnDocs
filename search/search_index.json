{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Learning Documentation \u00b6 This documentation site is designed to help you learn and explore various concepts, tools, and technologies. Whether you're a beginner or looking to deepen your knowledge, you'll find structured guides, commands, and explanations across multiple domains. \ud83d\udcda What You'll Learn \u00b6 Docker : Understand containerization and how to use Docker effectively. Git & GitHub : Master version control and collaborative workflows. Linux Commands : Get hands-on with essential Linux commands. Networking Concepts : Dive into DNS, IP addressing, VPNs, and more. \ud83d\ude80 Why Use This App? \u00b6 Structured Learning : Organized topics to simplify your journey. Hands-On Examples : Real-world commands and concepts. Multi-Platform Accessibility : Learn from anywhere with ease. \ud83c\udf1f Get Started \u00b6 Navigate through the topics using the menu on the left. Follow the guides step-by-step. Practice and experiment to solidify your understanding. Happy learning! \ud83d\udca1","title":"Home"},{"location":"#welcome-to-the-learning-documentation","text":"This documentation site is designed to help you learn and explore various concepts, tools, and technologies. Whether you're a beginner or looking to deepen your knowledge, you'll find structured guides, commands, and explanations across multiple domains.","title":"Welcome to the Learning Documentation"},{"location":"#what-youll-learn","text":"Docker : Understand containerization and how to use Docker effectively. Git & GitHub : Master version control and collaborative workflows. Linux Commands : Get hands-on with essential Linux commands. Networking Concepts : Dive into DNS, IP addressing, VPNs, and more.","title":"\ud83d\udcda What You'll Learn"},{"location":"#why-use-this-app","text":"Structured Learning : Organized topics to simplify your journey. Hands-On Examples : Real-world commands and concepts. Multi-Platform Accessibility : Learn from anywhere with ease.","title":"\ud83d\ude80 Why Use This App?"},{"location":"#get-started","text":"Navigate through the topics using the menu on the left. Follow the guides step-by-step. Practice and experiment to solidify your understanding. Happy learning! \ud83d\udca1","title":"\ud83c\udf1f Get Started"},{"location":"Docker/Docker-file/","text":"Docker Basics \u00b6 Docker is an open-source platform that allows you to automate the deployment of applications inside lightweight, portable containers. Containers include everything an application needs to run, such as libraries, dependencies, and configuration files. Why Use Docker? \u00b6 Consistency Across Environments: Eliminates the \"works on my machine\" problem by ensuring applications run the same everywhere. Resource Efficiency: Containers are lightweight compared to virtual machines. Speed: Containers start quickly as they do not boot up an operating system. Portability: Docker containers can run on any system with Docker installed. Scalability: Simplifies scaling applications across distributed systems. Key Components of Docker \u00b6 1. Docker Engine \u00b6 The core component that runs and manages containers. 2. Docker Images \u00b6 Immutable, lightweight, and self-sufficient packages containing an application and its environment. 3. Docker Containers \u00b6 Instances of Docker images running as separate processes on the host machine. 4. Dockerfile \u00b6 A script with instructions to build a Docker image. 5. Docker Compose \u00b6 A tool to define and manage multi-container applications. Verify installation: \u00b6 docker --version Common Docker Commands \u00b6 Images \u00b6 docker pull <image> : Download an image from Docker Hub. docker images : List all downloaded images. docker rmi <image> : Remove an image. Containers \u00b6 docker run <image> : Run a container. docker ps : List running containers. docker ps -a : List all containers (including stopped ones). docker stop <container> : Stop a running container. docker rm <container> : Remove a container. Build and Logs \u00b6 docker build -t <tag> . : Build an image from a Dockerfile. docker logs <container> : View logs of a container. Other Commands \u00b6 docker exec -it <container> <command> : Run a command inside a running container. docker network ls : List Docker networks. Dockerfile \u00b6 A Dockerfile is used to create a custom Docker image. Below is an example: # Use an official Node.js runtime as a base image FROM node:18 # Set the working directory inside the container WORKDIR /app # Copy package.json and install dependencies COPY package.json ./ RUN npm install # Copy the application source code COPY . ./ # Expose the application port EXPOSE 3000 # Command to run the application CMD [ \"npm\" , \"run\" , \"dev\" ] Build the image and run the container: docker build -t my-node-app . docker run -p 3000 :3000 my-node-app Docker Compose \u00b6 Docker Compose allows you to define and run multi-container applications. A docker-compose.yml file specifies the services. Example: Node.js and MongoDB \u00b6 services : development : build : context : . dockerfile : Dockerfile.prod target : development ports : - \"3000:3000\" volumes : - .:/app - /app/node_modules environment : - NODE_ENV=development Start the application: docker-compose up Stop and remove containers: docker-compose down Additional Resources \u00b6 Docker Documentation Docker Hub Docker Cheatsheet","title":"Docker File"},{"location":"Docker/Docker-file/#docker-basics","text":"Docker is an open-source platform that allows you to automate the deployment of applications inside lightweight, portable containers. Containers include everything an application needs to run, such as libraries, dependencies, and configuration files.","title":"Docker Basics"},{"location":"Docker/Docker-file/#why-use-docker","text":"Consistency Across Environments: Eliminates the \"works on my machine\" problem by ensuring applications run the same everywhere. Resource Efficiency: Containers are lightweight compared to virtual machines. Speed: Containers start quickly as they do not boot up an operating system. Portability: Docker containers can run on any system with Docker installed. Scalability: Simplifies scaling applications across distributed systems.","title":"Why Use Docker?"},{"location":"Docker/Docker-file/#key-components-of-docker","text":"","title":"Key Components of Docker"},{"location":"Docker/Docker-file/#1-docker-engine","text":"The core component that runs and manages containers.","title":"1. Docker Engine"},{"location":"Docker/Docker-file/#2-docker-images","text":"Immutable, lightweight, and self-sufficient packages containing an application and its environment.","title":"2. Docker Images"},{"location":"Docker/Docker-file/#3-docker-containers","text":"Instances of Docker images running as separate processes on the host machine.","title":"3. Docker Containers"},{"location":"Docker/Docker-file/#4-dockerfile","text":"A script with instructions to build a Docker image.","title":"4. Dockerfile"},{"location":"Docker/Docker-file/#5-docker-compose","text":"A tool to define and manage multi-container applications.","title":"5. Docker Compose"},{"location":"Docker/Docker-file/#verify-installation","text":"docker --version","title":"Verify installation:"},{"location":"Docker/Docker-file/#common-docker-commands","text":"","title":"Common Docker Commands"},{"location":"Docker/Docker-file/#images","text":"docker pull <image> : Download an image from Docker Hub. docker images : List all downloaded images. docker rmi <image> : Remove an image.","title":"Images"},{"location":"Docker/Docker-file/#containers","text":"docker run <image> : Run a container. docker ps : List running containers. docker ps -a : List all containers (including stopped ones). docker stop <container> : Stop a running container. docker rm <container> : Remove a container.","title":"Containers"},{"location":"Docker/Docker-file/#build-and-logs","text":"docker build -t <tag> . : Build an image from a Dockerfile. docker logs <container> : View logs of a container.","title":"Build and Logs"},{"location":"Docker/Docker-file/#other-commands","text":"docker exec -it <container> <command> : Run a command inside a running container. docker network ls : List Docker networks.","title":"Other Commands"},{"location":"Docker/Docker-file/#dockerfile","text":"A Dockerfile is used to create a custom Docker image. Below is an example: # Use an official Node.js runtime as a base image FROM node:18 # Set the working directory inside the container WORKDIR /app # Copy package.json and install dependencies COPY package.json ./ RUN npm install # Copy the application source code COPY . ./ # Expose the application port EXPOSE 3000 # Command to run the application CMD [ \"npm\" , \"run\" , \"dev\" ] Build the image and run the container: docker build -t my-node-app . docker run -p 3000 :3000 my-node-app","title":"Dockerfile"},{"location":"Docker/Docker-file/#docker-compose","text":"Docker Compose allows you to define and run multi-container applications. A docker-compose.yml file specifies the services.","title":"Docker Compose"},{"location":"Docker/Docker-file/#example-nodejs-and-mongodb","text":"services : development : build : context : . dockerfile : Dockerfile.prod target : development ports : - \"3000:3000\" volumes : - .:/app - /app/node_modules environment : - NODE_ENV=development Start the application: docker-compose up Stop and remove containers: docker-compose down","title":"Example: Node.js and MongoDB"},{"location":"Docker/Docker-file/#additional-resources","text":"Docker Documentation Docker Hub Docker Cheatsheet","title":"Additional Resources"},{"location":"Git%20%26%20Github/GitIgnore/","text":".gitignore Files for Multiple Development Environments \u00b6 This document provides .gitignore templates for three common development environments: Node/React , Java Web Development , and Python/Django . You can use these templates to set up your projects with appropriate exclusions. Node/React .gitignore \u00b6 # Dependency directories node_modules/ # Logs npm-debug.log* yarn-debug.log* yarn-error.log* # Runtime data pids/ *.pid *.seed *.pid.lock # Build outputs build/ dist/ # dotenv environment variables .env .env.local .env.development.local .env.test.local .env.production.local # Miscellaneous .DS_Store Thumbs.db .vscode/ .idea/ Java Web Development .gitignore \u00b6 # Compiled class files *.class # Logs *.log # BlueJ files *.ctxt # Mobile Tools for Java (J2ME) .mtj.tmp/ # Package files *.jar *.war *.ear # Maven target/ pom.xml.tag pom.xml.releaseBackup pom.xml.versionsBackup pom.xml.next release.properties dependency-reduced-pom.xml buildNumber.properties # Gradle .gradle/ build/ # Eclipse .project .classpath .settings/ target/ # IntelliJ IDEA .idea/ *.iml *.iws # Miscellaneous .DS_Store Thumbs.db Python/Django .gitignore \u00b6 # Byte-compiled files *.py [ cod ] __pycache__/ # Django specific db.sqlite3 *.pyc *.pyo *.pyd migrations/ # Environment variables .env # Logs *.log # Virtual environments venv/ env/ .virtualenv/ # Static and media files static/ media/ # IDE specific .idea/ .vscode/ # Test coverage reports .coverage coverage.xml *.cover # Pytest .cache/ # Miscellaneous .DS_Store Thumbs.db - This setup ensures that unnecessary files and directories are excluded from your Git repositories. How to Stop Tracking Files with .gitignore \u00b6 If .gitignore isn't preventing .log files from being tracked, it's likely because the files were already being tracked by Git before you added the rule to .gitignore . Follow these steps to fix the issue. 1. Stop Tracking the Files \u00b6 Run the following command to untrack all .log files that are already being tracked by Git: git rm --cached *.log This removes the .log files from Git's index but keeps them in your working directory. 2. Commit the Changes \u00b6 After running the git rm --cached command, commit the changes to update the repository: git commit -m \"Stop tracking .log files\" 3. Verify .gitignore \u00b6 Ensure your .gitignore file is correctly configured. For .log files, add the following line to the file: *.log This tells Git to ignore all files with a .log extension. 4. Check if .log Files Are Being Ignored \u00b6 Use the git check-ignore command to verify that .log files are being ignored: git check-ignore -v somefile.log Replace somefile.log with the name of an actual .log file in your project. Additional Notes \u00b6 If .log Files Are Committed to Remote: If you have already pushed .log files to the remote repository, they will remain there even after being removed locally. To completely remove them from the repository's history, you can rewrite the repository history using tools like git filter-repo or git filter-branch . Conflicts with Other .gitignore Files: If the .gitignore rule doesn\u2019t seem to work, ensure there are no conflicts with other .gitignore files or rules in parent directories. Following these steps ensures that .log files are no longer tracked by Git while keeping them locally in your working directory.","title":"Git Ignore"},{"location":"Git%20%26%20Github/GitIgnore/#gitignore-files-for-multiple-development-environments","text":"This document provides .gitignore templates for three common development environments: Node/React , Java Web Development , and Python/Django . You can use these templates to set up your projects with appropriate exclusions.","title":".gitignore Files for Multiple Development Environments"},{"location":"Git%20%26%20Github/GitIgnore/#nodereact-gitignore","text":"# Dependency directories node_modules/ # Logs npm-debug.log* yarn-debug.log* yarn-error.log* # Runtime data pids/ *.pid *.seed *.pid.lock # Build outputs build/ dist/ # dotenv environment variables .env .env.local .env.development.local .env.test.local .env.production.local # Miscellaneous .DS_Store Thumbs.db .vscode/ .idea/","title":"Node/React .gitignore"},{"location":"Git%20%26%20Github/GitIgnore/#java-web-development-gitignore","text":"# Compiled class files *.class # Logs *.log # BlueJ files *.ctxt # Mobile Tools for Java (J2ME) .mtj.tmp/ # Package files *.jar *.war *.ear # Maven target/ pom.xml.tag pom.xml.releaseBackup pom.xml.versionsBackup pom.xml.next release.properties dependency-reduced-pom.xml buildNumber.properties # Gradle .gradle/ build/ # Eclipse .project .classpath .settings/ target/ # IntelliJ IDEA .idea/ *.iml *.iws # Miscellaneous .DS_Store Thumbs.db","title":"Java Web Development .gitignore"},{"location":"Git%20%26%20Github/GitIgnore/#pythondjango-gitignore","text":"# Byte-compiled files *.py [ cod ] __pycache__/ # Django specific db.sqlite3 *.pyc *.pyo *.pyd migrations/ # Environment variables .env # Logs *.log # Virtual environments venv/ env/ .virtualenv/ # Static and media files static/ media/ # IDE specific .idea/ .vscode/ # Test coverage reports .coverage coverage.xml *.cover # Pytest .cache/ # Miscellaneous .DS_Store Thumbs.db - This setup ensures that unnecessary files and directories are excluded from your Git repositories.","title":"Python/Django .gitignore"},{"location":"Git%20%26%20Github/GitIgnore/#how-to-stop-tracking-files-with-gitignore","text":"If .gitignore isn't preventing .log files from being tracked, it's likely because the files were already being tracked by Git before you added the rule to .gitignore . Follow these steps to fix the issue.","title":"How to Stop Tracking Files with .gitignore"},{"location":"Git%20%26%20Github/GitIgnore/#1-stop-tracking-the-files","text":"Run the following command to untrack all .log files that are already being tracked by Git: git rm --cached *.log This removes the .log files from Git's index but keeps them in your working directory.","title":"1. Stop Tracking the Files"},{"location":"Git%20%26%20Github/GitIgnore/#2-commit-the-changes","text":"After running the git rm --cached command, commit the changes to update the repository: git commit -m \"Stop tracking .log files\"","title":"2. Commit the Changes"},{"location":"Git%20%26%20Github/GitIgnore/#3-verify-gitignore","text":"Ensure your .gitignore file is correctly configured. For .log files, add the following line to the file: *.log This tells Git to ignore all files with a .log extension.","title":"3. Verify .gitignore"},{"location":"Git%20%26%20Github/GitIgnore/#4-check-if-log-files-are-being-ignored","text":"Use the git check-ignore command to verify that .log files are being ignored: git check-ignore -v somefile.log Replace somefile.log with the name of an actual .log file in your project.","title":"4. Check if .log Files Are Being Ignored"},{"location":"Git%20%26%20Github/GitIgnore/#additional-notes","text":"If .log Files Are Committed to Remote: If you have already pushed .log files to the remote repository, they will remain there even after being removed locally. To completely remove them from the repository's history, you can rewrite the repository history using tools like git filter-repo or git filter-branch . Conflicts with Other .gitignore Files: If the .gitignore rule doesn\u2019t seem to work, ensure there are no conflicts with other .gitignore files or rules in parent directories. Following these steps ensures that .log files are no longer tracked by Git while keeping them locally in your working directory.","title":"Additional Notes"},{"location":"Git%20%26%20Github/Manage-Local-Changes/","text":"Git Status \u00b6 The git status command displays the state of the working directory and staging area. It shows which changes have been staged, which have not, and which files are not being tracked by Git. Usage : \u00b6 git status [ options ] Options : \u00b6 --short : Provides a brief summary of the status. git status --short --branch : Displays information about the current branch. git status --branch --ignored : Lists the ignored files. git status --ignored Git add \u00b6 The git add command adds changes in the working directory to the staging area, preparing them for a commit. Usage : \u00b6 git add [ file-pattern ] - To stage all changes: git add . - To stage a specific file: git add <file-name> Options : \u00b6 -n or --dry-run : Shows what files would be added without actually staging them. git add -n -p or --patch : Interactively stages hunks of changes. git add -p For more information about using git add -p , refer to this external article: Explaining git add -p Command with Examples Git log \u00b6 The git log command displays the commit history of a repository, showing the sequence of commits. Usage : \u00b6 git log [ options ] Options : \u00b6 --oneline : Displays each commit on one line for brevity. git log --oneline --graph : Shows a graphical representation of the branch structure. git log --graph --author=<author> : Filters commits by a specific author. git log --author = \"Author Name\" --since=<date> and --until=<date> : Filters commits within a date range. git log --since = \"2023-01-01\" --until = \"2023-12-31\" -p : Shows the differences introduced in each commit. git log -p --grep : Filter based on keywords/ commit message. git log --grep = \"keyword/CM\" -n : Filter limited number of commit. git log -n 5 \" --pretty : Customize how the log is displayed:. git log --pretty = format: \"%h - %an, %ar : %s\" Git commit \u00b6 The git commit command saves the staged changes to the repository, creating a new commit. Usage : \u00b6 git commit -m \"Commit message\" Options : \u00b6 -m <message> : Adds a commit message directly. git commit -m \"Initial commit\" -a : Automatically stages tracked files before committing. git commit -a -m \"Updated files\" --amend : Modifies the most recent commit, including its message. git commit --amend -m \"Updated commit message\" --no-edit : Amends the last commit without changing its message. git commit --amend --no-edit Git Diff \u00b6 git diff \u00b6 The git diff command displays the differences between various states of a Git repository. What It Does : \u00b6 Shows changes in the working directory that have not yet been staged. Displays differences between the staging area and the last commit. Compares two specific commits or branches. Usage : \u00b6 git diff [ options ] Options : \u00b6 Compare working directory to staging area: git diff Compare staging area to the last commit: git diff --cached Compare staging area to the last staged commit: git diff --staged Compare two commits: git diff <commit1> <commit2> Compare changes for a specific file: git diff <file-name> --stat : Displays a summary of changes with the number of insertions and deletions. git diff --stat --name-only : Shows only the names of changed files. git diff --name-only -p : Displays the patch format of the changes. git diff -p --color : Forces colored output for better readability. git diff --color Git rm (remove) \u00b6 git rm \u00b6 The git rm command is used to remove files from both the working directory and the staging area. What It Does : \u00b6 Deletes the specified files from the working directory. Stages the removal of these files, so the deletion is recorded in the next commit. Usage : \u00b6 git rm [ options ] <file-name> Options : \u00b6 Remove a file and stage the removal: git rm <file-name> Remove multiple files: git rm file1 file2 --cached : Removes the file only from the staging area while keeping it in the working directory. git rm --cached <file-name> -f or --force : Forces the removal of a file. git rm -f <file-name> --dry-run : Shows what files would be removed without actually deleting them. git rm --dry-run <file-name> Git Tags \u00b6 Tags are used in Git to mark specific points in a repository's history, often used to indicate release versions (e.g., v1.0 , v2.1 ). Tags are immutable references to commits. Types of Tags \u00b6 Lightweight Tags : These are simple pointers to a commit, without any additional metadata. git tag <tagname> Example: git tag v1.0 Annotated Tags : These are stored as full objects in the Git database and include metadata like the tagger's name, email, and date. Annotated tags are recommended for public releases. git tag -a <tagname> -m \"Tag message\" Example: git tag -a v1.0 -m \"Initial release\" Listing Tags \u00b6 To see all tags in the repository: git tag Deleting Tags \u00b6 To delete a tag locally: git tag -d <tagname> To delete a tag remotely: git push origin --delete <tagname> Pushing Tags to a Remote Repository \u00b6 To push a single tag: git push origin <tagname> To push all tags: git push origin --tags Checking Out a Tag \u00b6 While tags cannot be directly modified, you can check out a tag to view its associated commit: git checkout <tagname> Git Show \u00b6 The git show command is used to display detailed information about Git objects such as commits, tags, or trees. It is commonly used to inspect the details of a specific commit. Syntax \u00b6 git show <object> Use Cases \u00b6 Viewing a Commit : Displays details of a commit including the author, date, commit message, and changes made. git show <commit-hash> Viewing a Tag : Shows information about a specific tag, including its metadata and associated commit. git show <tagname> Viewing a File at a Specific Commit : Outputs the content of a file as it existed in a given commit. git show <commit-hash>:<filepath> Options \u00b6 --name-only : Shows only the names of changed files in a commit. git show --name-only <commit-hash> --name-status : Displays the names of changed files along with their status (added, modified, deleted). git show --name-status <commit-hash> --pretty : Formats the output. For example: git show --pretty = oneline <commit-hash> --stat : Shows a summary of changes including file names, insertions, and deletions. git show --stat <commit-hash> Examples \u00b6 Show the latest commit: git show Show details of a specific commit: git show 4f2e5a7 Show a specific file from a commit: git show 4f2e5a7:src/main.java Notes \u00b6 The git show command is a powerful tool for inspecting repository history and understanding changes. It combines commit and diff information for a holistic view of the repository state.","title":"Manage Local Changes"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-status","text":"The git status command displays the state of the working directory and staging area. It shows which changes have been staged, which have not, and which files are not being tracked by Git.","title":"Git Status"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#usage","text":"git status [ options ]","title":"Usage:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#options","text":"--short : Provides a brief summary of the status. git status --short --branch : Displays information about the current branch. git status --branch --ignored : Lists the ignored files. git status --ignored","title":"Options:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-add","text":"The git add command adds changes in the working directory to the staging area, preparing them for a commit.","title":"Git add"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#usage_1","text":"git add [ file-pattern ] - To stage all changes: git add . - To stage a specific file: git add <file-name>","title":"Usage:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#options_1","text":"-n or --dry-run : Shows what files would be added without actually staging them. git add -n -p or --patch : Interactively stages hunks of changes. git add -p For more information about using git add -p , refer to this external article: Explaining git add -p Command with Examples","title":"Options:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-log","text":"The git log command displays the commit history of a repository, showing the sequence of commits.","title":"Git log"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#usage_2","text":"git log [ options ]","title":"Usage:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#options_2","text":"--oneline : Displays each commit on one line for brevity. git log --oneline --graph : Shows a graphical representation of the branch structure. git log --graph --author=<author> : Filters commits by a specific author. git log --author = \"Author Name\" --since=<date> and --until=<date> : Filters commits within a date range. git log --since = \"2023-01-01\" --until = \"2023-12-31\" -p : Shows the differences introduced in each commit. git log -p --grep : Filter based on keywords/ commit message. git log --grep = \"keyword/CM\" -n : Filter limited number of commit. git log -n 5 \" --pretty : Customize how the log is displayed:. git log --pretty = format: \"%h - %an, %ar : %s\"","title":"Options:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-commit","text":"The git commit command saves the staged changes to the repository, creating a new commit.","title":"Git commit"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#usage_3","text":"git commit -m \"Commit message\"","title":"Usage:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#options_3","text":"-m <message> : Adds a commit message directly. git commit -m \"Initial commit\" -a : Automatically stages tracked files before committing. git commit -a -m \"Updated files\" --amend : Modifies the most recent commit, including its message. git commit --amend -m \"Updated commit message\" --no-edit : Amends the last commit without changing its message. git commit --amend --no-edit","title":"Options:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-diff","text":"","title":"Git Diff"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-diff_1","text":"The git diff command displays the differences between various states of a Git repository.","title":"git diff"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#what-it-does","text":"Shows changes in the working directory that have not yet been staged. Displays differences between the staging area and the last commit. Compares two specific commits or branches.","title":"What It Does:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#usage_4","text":"git diff [ options ]","title":"Usage:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#options_4","text":"Compare working directory to staging area: git diff Compare staging area to the last commit: git diff --cached Compare staging area to the last staged commit: git diff --staged Compare two commits: git diff <commit1> <commit2> Compare changes for a specific file: git diff <file-name> --stat : Displays a summary of changes with the number of insertions and deletions. git diff --stat --name-only : Shows only the names of changed files. git diff --name-only -p : Displays the patch format of the changes. git diff -p --color : Forces colored output for better readability. git diff --color","title":"Options:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-rm-remove","text":"","title":"Git rm (remove)"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-rm","text":"The git rm command is used to remove files from both the working directory and the staging area.","title":"git rm"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#what-it-does_1","text":"Deletes the specified files from the working directory. Stages the removal of these files, so the deletion is recorded in the next commit.","title":"What It Does:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#usage_5","text":"git rm [ options ] <file-name>","title":"Usage:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#options_5","text":"Remove a file and stage the removal: git rm <file-name> Remove multiple files: git rm file1 file2 --cached : Removes the file only from the staging area while keeping it in the working directory. git rm --cached <file-name> -f or --force : Forces the removal of a file. git rm -f <file-name> --dry-run : Shows what files would be removed without actually deleting them. git rm --dry-run <file-name>","title":"Options:"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-tags","text":"Tags are used in Git to mark specific points in a repository's history, often used to indicate release versions (e.g., v1.0 , v2.1 ). Tags are immutable references to commits.","title":"Git Tags"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#types-of-tags","text":"Lightweight Tags : These are simple pointers to a commit, without any additional metadata. git tag <tagname> Example: git tag v1.0 Annotated Tags : These are stored as full objects in the Git database and include metadata like the tagger's name, email, and date. Annotated tags are recommended for public releases. git tag -a <tagname> -m \"Tag message\" Example: git tag -a v1.0 -m \"Initial release\"","title":"Types of Tags"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#listing-tags","text":"To see all tags in the repository: git tag","title":"Listing Tags"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#deleting-tags","text":"To delete a tag locally: git tag -d <tagname> To delete a tag remotely: git push origin --delete <tagname>","title":"Deleting Tags"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#pushing-tags-to-a-remote-repository","text":"To push a single tag: git push origin <tagname> To push all tags: git push origin --tags","title":"Pushing Tags to a Remote Repository"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#checking-out-a-tag","text":"While tags cannot be directly modified, you can check out a tag to view its associated commit: git checkout <tagname>","title":"Checking Out a Tag"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#git-show","text":"The git show command is used to display detailed information about Git objects such as commits, tags, or trees. It is commonly used to inspect the details of a specific commit.","title":"Git Show"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#syntax","text":"git show <object>","title":"Syntax"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#use-cases","text":"Viewing a Commit : Displays details of a commit including the author, date, commit message, and changes made. git show <commit-hash> Viewing a Tag : Shows information about a specific tag, including its metadata and associated commit. git show <tagname> Viewing a File at a Specific Commit : Outputs the content of a file as it existed in a given commit. git show <commit-hash>:<filepath>","title":"Use Cases"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#options_6","text":"--name-only : Shows only the names of changed files in a commit. git show --name-only <commit-hash> --name-status : Displays the names of changed files along with their status (added, modified, deleted). git show --name-status <commit-hash> --pretty : Formats the output. For example: git show --pretty = oneline <commit-hash> --stat : Shows a summary of changes including file names, insertions, and deletions. git show --stat <commit-hash>","title":"Options"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#examples","text":"Show the latest commit: git show Show details of a specific commit: git show 4f2e5a7 Show a specific file from a commit: git show 4f2e5a7:src/main.java","title":"Examples"},{"location":"Git%20%26%20Github/Manage-Local-Changes/#notes","text":"The git show command is a powerful tool for inspecting repository history and understanding changes. It combines commit and diff information for a holistic view of the repository state.","title":"Notes"},{"location":"Git%20%26%20Github/Repository-Setup/","text":"Initializing git on local \u00b6 Git Init \u00b6 The git init command initializes a new Git repository in the specified directory. This command creates a .git folder that contains all the metadata and history for the repository. Usage : \u00b6 git init [ directory ] If no directory is specified, it initializes the current folder. Options : \u00b6 --bare : Initializes a bare repository that does not have a working directory. Bare repositories are typically used for remote repositories. git init --bare --quiet : Suppresses the output message. git init --quiet --shared[=permissions] : Configures repository permissions to be shared among a group. Common values for permissions are group , all , or umask . git init --shared = group --separate-git-dir=<git-dir> : Creates a Git repository with the .git folder stored in a separate directory. git init --separate-git-dir = /path/to/git-dir -b <branch-name> : Creates the repository with an initial branch named <branch-name> instead of the default main branch. git init -b <branch-name> Additional Git Commands \u00b6 Configure User Information \u00b6 Before starting, configure your Git user name and email: git config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\"","title":"Repository Setup"},{"location":"Git%20%26%20Github/Repository-Setup/#initializing-git-on-local","text":"","title":"Initializing git on local"},{"location":"Git%20%26%20Github/Repository-Setup/#git-init","text":"The git init command initializes a new Git repository in the specified directory. This command creates a .git folder that contains all the metadata and history for the repository.","title":"Git Init"},{"location":"Git%20%26%20Github/Repository-Setup/#usage","text":"git init [ directory ] If no directory is specified, it initializes the current folder.","title":"Usage:"},{"location":"Git%20%26%20Github/Repository-Setup/#options","text":"--bare : Initializes a bare repository that does not have a working directory. Bare repositories are typically used for remote repositories. git init --bare --quiet : Suppresses the output message. git init --quiet --shared[=permissions] : Configures repository permissions to be shared among a group. Common values for permissions are group , all , or umask . git init --shared = group --separate-git-dir=<git-dir> : Creates a Git repository with the .git folder stored in a separate directory. git init --separate-git-dir = /path/to/git-dir -b <branch-name> : Creates the repository with an initial branch named <branch-name> instead of the default main branch. git init -b <branch-name>","title":"Options:"},{"location":"Git%20%26%20Github/Repository-Setup/#additional-git-commands","text":"","title":"Additional Git Commands"},{"location":"Git%20%26%20Github/Repository-Setup/#configure-user-information","text":"Before starting, configure your Git user name and email: git config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\"","title":"Configure User Information"},{"location":"Git%20%26%20Github/Undo-Git-Changes/","text":"Git Revert \u00b6 git revert \u00b6 The git revert command is used to undo changes in a Git repository by creating a new commit that reverses the changes introduced by a previous commit. What It Does: \u00b6 Reverts changes made by a specific commit. Creates a new commit to record the reversal. Does not alter the commit history (unlike git reset ). Usage: \u00b6 git revert [ options ] <commit-hash> Options: \u00b6 Revert a specific commit: git revert <commit-hash> Revert multiple commits interactively: git revert -i <commit-range> Abort a revert operation in progress: git revert --abort Revert a commit without creating a new commit (apply changes to the working directory): git revert --no-commit <commit-hash> Edit the commit message for the revert: git revert --edit <commit-hash> Git Reset \u00b6 git reset \u00b6 The git reset command is used to undo changes in a Git repository by moving the current branch\u2019s HEAD to a specific state, effectively resetting the repository to that point. It modifies the staging area (index) and the working directory depending on the options used. Unlike git revert , which creates a new commit to reverse changes, git reset can alter the commit history by removing commits from the current branch. What It Does: \u00b6 Moves the HEAD : It changes the current branch\u2019s HEAD to a specific commit. Modifies the Staging Area : It can modify the index (staging area) to match the new commit. Modifies the Working Directory : It can update the working directory to reflect the state of the commit. Usage: \u00b6 git reset [ options ] <commit-hash> Options: \u00b6 Soft Reset ( --soft ) : Moves the HEAD to a specified commit but keeps changes in the staging area . This allows you to amend or commit those changes later. Usage : git reset --soft <commit-hash> Use Case : If you want to undo a commit but keep the changes staged for a new commit. Mixed Reset ( --mixed ) (default option): Moves the HEAD to a specified commit and unstages changes (removes changes from the staging area) but keeps the modifications in the working directory. Usage : git reset --mixed <commit-hash> Use Case : If you want to unstage changes and leave them in your working directory. Hard Reset ( --hard ) : Moves the HEAD to a specified commit and resets both the staging area and working directory to match the specified commit. Any uncommitted changes are lost. Usage : git reset --hard <commit-hash> Use Case : If you want to discard changes completely and reset to a specific commit. Warning : This is destructive and can lead to data loss if there are uncommitted changes. Keep Reset ( --keep ) : Resets the HEAD and updates the staging area to match the specified commit, but keeps changes in the working directory . If there are conflicting changes, it prevents the reset from happening. Usage : git reset --keep <commit-hash> Use Case : If you want to reset the staging area to a previous commit but keep changes in the working directory without discarding any conflicting changes. Merge Reset ( --merge ) : Similar to the --keep option, but it allows resetting with a little more flexibility. It preserves the working directory and attempts to preserve the index (staging area), but conflicts may arise when there are changes in both the commit history and the working directory. Usage : git reset --merge <commit-hash> Use Case : When you want to reset the branch to a specific state but want to preserve most of your current changes. Reset to the Previous Commit : To reset to the previous commit, you can use the shorthand HEAD~1 : git reset --hard HEAD~1 Use Case : This can be helpful to undo the most recent commit and reset your working directory and staging area. Git Stash \u00b6 The git stash command temporarily shelves changes in your working directory so you can work on something else without committing the changes. Syntax \u00b6 git stash [ options ] Common Use Cases \u00b6 Save Changes : git stash Temporarily saves all changes in the working directory. List Stashes : git stash list Displays a list of all saved stashes. Apply Stashed Changes : git stash apply Reapplies the most recent stash to your working directory. Apply and Drop Stash : git stash pop Reapplies the most recent stash and removes it from the stash list. Drop a Specific Stash : git stash drop stash@ { index } Removes a specific stash from the list. Clear All Stashes : git stash clear Deletes all saved stashes. Options \u00b6 --keep-index : Stashes only the changes in the working directory, preserving the staged changes. git stash --keep-index --include-untracked : Includes untracked files in the stash. git stash --include-untracked --all : Includes all files (tracked, untracked, and ignored) in the stash. git stash --all list : Displays all stashed changes. pop : Applies the stash and removes it from the stash list. apply : Reapplies the stash without removing it from the stash list. drop : Deletes a specific stash by its index. Examples \u00b6 Save changes and include untracked files: git stash --include-untracked Reapply the most recent stash: git stash apply Remove all stashes: git stash clear View all stashed changes: git stash list Apply and remove the most recent stash: git stash pop Drop a specific stash: git stash drop stash@ { 1 } Notes \u00b6 Stashing is useful when you want to switch branches without committing your changes. You can stash specific files using: git stash push -m \"message\" <file> Use git stash show to view the changes in a stash: git stash show -p stash@ { 0 }","title":"Undo Git Changes"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#git-revert","text":"","title":"Git Revert"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#git-revert_1","text":"The git revert command is used to undo changes in a Git repository by creating a new commit that reverses the changes introduced by a previous commit.","title":"git revert"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#what-it-does","text":"Reverts changes made by a specific commit. Creates a new commit to record the reversal. Does not alter the commit history (unlike git reset ).","title":"What It Does:"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#usage","text":"git revert [ options ] <commit-hash>","title":"Usage:"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#options","text":"Revert a specific commit: git revert <commit-hash> Revert multiple commits interactively: git revert -i <commit-range> Abort a revert operation in progress: git revert --abort Revert a commit without creating a new commit (apply changes to the working directory): git revert --no-commit <commit-hash> Edit the commit message for the revert: git revert --edit <commit-hash>","title":"Options:"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#git-reset","text":"","title":"Git Reset"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#git-reset_1","text":"The git reset command is used to undo changes in a Git repository by moving the current branch\u2019s HEAD to a specific state, effectively resetting the repository to that point. It modifies the staging area (index) and the working directory depending on the options used. Unlike git revert , which creates a new commit to reverse changes, git reset can alter the commit history by removing commits from the current branch.","title":"git reset"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#what-it-does_1","text":"Moves the HEAD : It changes the current branch\u2019s HEAD to a specific commit. Modifies the Staging Area : It can modify the index (staging area) to match the new commit. Modifies the Working Directory : It can update the working directory to reflect the state of the commit.","title":"What It Does:"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#usage_1","text":"git reset [ options ] <commit-hash>","title":"Usage:"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#options_1","text":"Soft Reset ( --soft ) : Moves the HEAD to a specified commit but keeps changes in the staging area . This allows you to amend or commit those changes later. Usage : git reset --soft <commit-hash> Use Case : If you want to undo a commit but keep the changes staged for a new commit. Mixed Reset ( --mixed ) (default option): Moves the HEAD to a specified commit and unstages changes (removes changes from the staging area) but keeps the modifications in the working directory. Usage : git reset --mixed <commit-hash> Use Case : If you want to unstage changes and leave them in your working directory. Hard Reset ( --hard ) : Moves the HEAD to a specified commit and resets both the staging area and working directory to match the specified commit. Any uncommitted changes are lost. Usage : git reset --hard <commit-hash> Use Case : If you want to discard changes completely and reset to a specific commit. Warning : This is destructive and can lead to data loss if there are uncommitted changes. Keep Reset ( --keep ) : Resets the HEAD and updates the staging area to match the specified commit, but keeps changes in the working directory . If there are conflicting changes, it prevents the reset from happening. Usage : git reset --keep <commit-hash> Use Case : If you want to reset the staging area to a previous commit but keep changes in the working directory without discarding any conflicting changes. Merge Reset ( --merge ) : Similar to the --keep option, but it allows resetting with a little more flexibility. It preserves the working directory and attempts to preserve the index (staging area), but conflicts may arise when there are changes in both the commit history and the working directory. Usage : git reset --merge <commit-hash> Use Case : When you want to reset the branch to a specific state but want to preserve most of your current changes. Reset to the Previous Commit : To reset to the previous commit, you can use the shorthand HEAD~1 : git reset --hard HEAD~1 Use Case : This can be helpful to undo the most recent commit and reset your working directory and staging area.","title":"Options:"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#git-stash","text":"The git stash command temporarily shelves changes in your working directory so you can work on something else without committing the changes.","title":"Git Stash"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#syntax","text":"git stash [ options ]","title":"Syntax"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#common-use-cases","text":"Save Changes : git stash Temporarily saves all changes in the working directory. List Stashes : git stash list Displays a list of all saved stashes. Apply Stashed Changes : git stash apply Reapplies the most recent stash to your working directory. Apply and Drop Stash : git stash pop Reapplies the most recent stash and removes it from the stash list. Drop a Specific Stash : git stash drop stash@ { index } Removes a specific stash from the list. Clear All Stashes : git stash clear Deletes all saved stashes.","title":"Common Use Cases"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#options_2","text":"--keep-index : Stashes only the changes in the working directory, preserving the staged changes. git stash --keep-index --include-untracked : Includes untracked files in the stash. git stash --include-untracked --all : Includes all files (tracked, untracked, and ignored) in the stash. git stash --all list : Displays all stashed changes. pop : Applies the stash and removes it from the stash list. apply : Reapplies the stash without removing it from the stash list. drop : Deletes a specific stash by its index.","title":"Options"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#examples","text":"Save changes and include untracked files: git stash --include-untracked Reapply the most recent stash: git stash apply Remove all stashes: git stash clear View all stashed changes: git stash list Apply and remove the most recent stash: git stash pop Drop a specific stash: git stash drop stash@ { 1 }","title":"Examples"},{"location":"Git%20%26%20Github/Undo-Git-Changes/#notes","text":"Stashing is useful when you want to switch branches without committing your changes. You can stash specific files using: git stash push -m \"message\" <file> Use git stash show to view the changes in a stash: git stash show -p stash@ { 0 }","title":"Notes"},{"location":"Git%20%26%20Github/Working-With-Branches/","text":"Git Branch \u00b6 git branch -M main This command renames the default branch to main . Options for git branch \u00b6 git branch : Lists all local branches. git branch git branch -a : Lists all branches, including remote branches. git branch -a git branch -d <branch> : Deletes a local branch. git branch -d feature-branch git branch --set-upstream-to=<remote>/<branch> : Sets upstream tracking for a branch. git branch --set-upstream-to = origin/main Git Switch \u00b6 The git switch command is a modern replacement for branch-related operations previously handled by git checkout . It simplifies switching branches and creating new branches. Syntax \u00b6 git switch [ options ] <branch-name> Common Use Cases \u00b6 Switching to an Existing Branch : git switch <branch-name> Example: git switch main Creating and Switching to a New Branch : git switch -c <new-branch-name> Example: git switch -c feature/login-module Switching to a Remote-Tracking Branch : git switch --track <remote-branch> Example: git switch --track origin/feature-xyz Options \u00b6 -c : Creates a new branch and switches to it. --create : Synonym for -c . --track : Creates a new branch to track a remote branch. --detach : Switches to a branch in a detached HEAD state. --discard-changes : Discards local changes when switching branches (use with caution). Examples \u00b6 Switch to the development branch: git switch development Create and switch to a new branch named feature-api : git switch -c feature-api Switch to a remote-tracking branch: git switch --track origin/bugfix-123 Switch to a branch in detached HEAD state: git switch --detach feature-old Notes \u00b6 git switch is available in Git 2.23 and later. Unlike git checkout , git switch focuses exclusively on branch-related operations, making it less error-prone. Use git switch instead of git checkout when working with branches for clearer intent. Git Restore \u00b6 The git restore command is used to restore files or revert changes in the working directory and staging area. It was introduced in Git 2.23 as part of the effort to separate the functionality of git checkout into more focused commands. Syntax \u00b6 git restore [ options ] <file-path> Common Use Cases \u00b6 Restore a File to Its Last Committed State : git restore <file-path> Example: git restore README.md Unstage a File : git restore --staged <file-path> Example: git restore --staged index.html Restore All Files in the Repository : git restore . Discard Changes Completely : git restore --source = HEAD <file-path> Example: git restore --source = HEAD config.yaml Options \u00b6 --staged : Unstages a file from the index (staging area) without changing the working directory. --source=<commit> : Specifies the commit to restore from (default is HEAD ). --worktree : Restores changes in the working directory (default behavior). -- : Separates file paths from options, avoiding ambiguity. --patch or -p : Allows interactive restoration of parts of a file. Examples \u00b6 Restore a single file to its committed state: git restore app.js Unstage a file: git restore --staged app.js Discard all local changes: git restore . Interactively restore hunks in a file: git restore -p app.js Notes \u00b6 git restore is available in Git 2.23 and later. Use this command instead of git checkout for file-specific operations for better clarity. Be cautious when discarding changes as they cannot be recovered unless committed. Git Checkout \u00b6 git checkout \u00b6 The git checkout command is used to switch between branches or restore files in a Git repository. What It Does : \u00b6 Switches to an existing branch. Creates a new branch and switches to it (with -b option). Restores a specific file or files to a previous state. Usage : \u00b6 git checkout [ options ] <branch-name> Options : \u00b6 Switch to an existing branch: git checkout <branch-name> Create and switch to a new branch: git checkout -b <new-branch-name> Restore a file to its state in the last commit: git checkout -- <file-name> Switch to a specific commit (detached HEAD state): git checkout <commit-hash> --orphan <new-branch-name> : Creates a new branch with no history. git checkout --orphan <new-branch-name> --detach : Operates in a detached HEAD state, allowing inspection of an arbitrary commit. git checkout --detach <commit-hash> Git Merge \u00b6 The git merge command is used to combine the changes from one branch into the current branch. It is a key tool for integrating work in Git, often used in collaborative workflows. Syntax \u00b6 git merge [ options ] <branch> Common Use Cases \u00b6 Merge a Branch into the Current Branch : git merge <branch-name> Example: git merge feature-branch Merge with a Commit Message : git merge -m \"Merge message\" <branch-name> Example: git merge -m \"Merging feature into main\" feature-branch Abort a Merge : git merge --abort Use this if there are conflicts you do not want to resolve. Options \u00b6 --no-ff : Creates a merge commit even if a fast-forward merge is possible. git merge --no-ff <branch> --squash : Combines all changes into a single commit. git merge --squash <branch> --abort : Cancels the merge process. git merge --abort --commit : Completes the merge with a merge commit. -m <message> : Adds a custom message to the merge commit. --strategy=<strategy> : Specifies a merge strategy (e.g., recursive , ours , theirs ). git merge --strategy = recursive <branch> Examples \u00b6 Merge development into main : git merge development Merge with a commit message: git merge -m \"Merging hotfix\" hotfix-branch Perform a squash merge: git merge --squash feature-enhancement Abort an ongoing merge: git merge --abort Notes \u00b6 Resolve conflicts manually if they arise during a merge. Use git status to see the conflicting files. After resolving conflicts, complete the merge using: git commit Avoid merging too frequently without testing to maintain repository stability. Git Rebase \u00b6 The git rebase command is used to reapply commits from one branch onto another, effectively rewriting the commit history. It is commonly used to maintain a linear project history and integrate changes more cleanly. Syntax \u00b6 git rebase [ options ] <upstream> Common Use Cases \u00b6 Rebase the Current Branch onto Another Branch : git rebase <branch> Example: git rebase main Interactive Rebase to Edit Commit History : git rebase -i <commit> Example: git rebase -i HEAD~3 This opens an editor where you can modify, reorder, or squash commits. Continue a Stopped Rebase : git rebase --continue Use this after resolving conflicts during a rebase. Abort a Rebase : git rebase --abort This restores the branch to its original state before the rebase started. Options \u00b6 -i or --interactive : Starts an interactive rebase session, allowing you to edit the commit history. git rebase -i <commit> --onto <new-base> : Rebases the branch onto a different base. git rebase --onto <new-base> <upstream> <branch> Example: git rebase --onto main feature-branch-old feature-branch-new --continue : Continues the rebase after conflicts are resolved. --skip : Skips the current conflicting commit and proceeds with the rebase. git rebase --skip --abort : Aborts the rebase and restores the branch to its original state. --preserve-merges : Preserves merge commits during a rebase. git rebase --preserve-merges main --no-ff : Ensures that no fast-forward merges are performed during the rebase. Examples \u00b6 Rebase the current branch onto development : git rebase development Start an interactive rebase to modify the last 5 commits: git rebase -i HEAD~5 Rebase feature-branch onto main : git rebase --onto main development feature-branch Skip a conflicting commit during a rebase: git rebase --skip Abort a rebase and undo all changes: git rebase --abort ### Notes - Use git rebase with caution when working on shared branches as it rewrites commit history. - To avoid conflicts, ensure your branch is up to date with the target branch before rebasing: git fetch origin git rebase origin/main - After rebasing, force-push the changes to the remote repository: git push --force Git Cherry-Pick \u00b6 The git cherry-pick command is used to apply a specific commit from one branch onto another. It allows you to select specific changes without merging the entire branch. Syntax \u00b6 git cherry-pick [ options ] <commit-hash> Common Use Cases \u00b6 Apply a Single Commit to the Current Branch : git cherry-pick <commit-hash> Example: git cherry-pick a1b2c3d4 Apply a Range of Commits : git cherry-pick <start-commit>^..<end-commit> Example: git cherry-pick f1e2d3c4^..g5h6i7j8 Apply Multiple Non-Sequential Commits : git cherry-pick <commit1> <commit2> <commit3> Example: git cherry-pick a1b2c3d4 f5e6d7c8 g9h0i1j2 Options \u00b6 -e or --edit : Allows you to modify the commit message before applying it. git cherry-pick -e <commit-hash> -n or --no-commit : Applies the changes without committing them. git cherry-pick -n <commit-hash> --continue : Continues the cherry-pick after resolving conflicts. git cherry-pick --continue --abort : Aborts the cherry-pick and restores the branch to its original state. git cherry-pick --abort --skip : Skips the current conflicting commit and proceeds with the next one. git cherry-pick --skip Examples \u00b6 Apply a specific commit to the current branch: git cherry-pick 123abc Apply a range of commits from another branch: git cherry-pick feature-branch^..main Modify the commit message while cherry-picking: git cherry-pick -e 456def Cherry-pick without committing the changes: git cherry-pick -n 789ghi Continue a stopped cherry-pick after resolving conflicts: git cherry-pick --continue Notes \u00b6 git cherry-pick is useful when you want to backport specific fixes or features to a different branch. Use git log or git reflog to find the commit hashes you want to cherry-pick. Be cautious when cherry-picking changes across branches with different histories, as it may lead to conflicts.","title":"Working with Branches"},{"location":"Git%20%26%20Github/Working-With-Branches/#git-branch","text":"git branch -M main This command renames the default branch to main .","title":"Git Branch"},{"location":"Git%20%26%20Github/Working-With-Branches/#options-for-git-branch","text":"git branch : Lists all local branches. git branch git branch -a : Lists all branches, including remote branches. git branch -a git branch -d <branch> : Deletes a local branch. git branch -d feature-branch git branch --set-upstream-to=<remote>/<branch> : Sets upstream tracking for a branch. git branch --set-upstream-to = origin/main","title":"Options for git branch"},{"location":"Git%20%26%20Github/Working-With-Branches/#git-switch","text":"The git switch command is a modern replacement for branch-related operations previously handled by git checkout . It simplifies switching branches and creating new branches.","title":"Git Switch"},{"location":"Git%20%26%20Github/Working-With-Branches/#syntax","text":"git switch [ options ] <branch-name>","title":"Syntax"},{"location":"Git%20%26%20Github/Working-With-Branches/#common-use-cases","text":"Switching to an Existing Branch : git switch <branch-name> Example: git switch main Creating and Switching to a New Branch : git switch -c <new-branch-name> Example: git switch -c feature/login-module Switching to a Remote-Tracking Branch : git switch --track <remote-branch> Example: git switch --track origin/feature-xyz","title":"Common Use Cases"},{"location":"Git%20%26%20Github/Working-With-Branches/#options","text":"-c : Creates a new branch and switches to it. --create : Synonym for -c . --track : Creates a new branch to track a remote branch. --detach : Switches to a branch in a detached HEAD state. --discard-changes : Discards local changes when switching branches (use with caution).","title":"Options"},{"location":"Git%20%26%20Github/Working-With-Branches/#examples","text":"Switch to the development branch: git switch development Create and switch to a new branch named feature-api : git switch -c feature-api Switch to a remote-tracking branch: git switch --track origin/bugfix-123 Switch to a branch in detached HEAD state: git switch --detach feature-old","title":"Examples"},{"location":"Git%20%26%20Github/Working-With-Branches/#notes","text":"git switch is available in Git 2.23 and later. Unlike git checkout , git switch focuses exclusively on branch-related operations, making it less error-prone. Use git switch instead of git checkout when working with branches for clearer intent.","title":"Notes"},{"location":"Git%20%26%20Github/Working-With-Branches/#git-restore","text":"The git restore command is used to restore files or revert changes in the working directory and staging area. It was introduced in Git 2.23 as part of the effort to separate the functionality of git checkout into more focused commands.","title":"Git Restore"},{"location":"Git%20%26%20Github/Working-With-Branches/#syntax_1","text":"git restore [ options ] <file-path>","title":"Syntax"},{"location":"Git%20%26%20Github/Working-With-Branches/#common-use-cases_1","text":"Restore a File to Its Last Committed State : git restore <file-path> Example: git restore README.md Unstage a File : git restore --staged <file-path> Example: git restore --staged index.html Restore All Files in the Repository : git restore . Discard Changes Completely : git restore --source = HEAD <file-path> Example: git restore --source = HEAD config.yaml","title":"Common Use Cases"},{"location":"Git%20%26%20Github/Working-With-Branches/#options_1","text":"--staged : Unstages a file from the index (staging area) without changing the working directory. --source=<commit> : Specifies the commit to restore from (default is HEAD ). --worktree : Restores changes in the working directory (default behavior). -- : Separates file paths from options, avoiding ambiguity. --patch or -p : Allows interactive restoration of parts of a file.","title":"Options"},{"location":"Git%20%26%20Github/Working-With-Branches/#examples_1","text":"Restore a single file to its committed state: git restore app.js Unstage a file: git restore --staged app.js Discard all local changes: git restore . Interactively restore hunks in a file: git restore -p app.js","title":"Examples"},{"location":"Git%20%26%20Github/Working-With-Branches/#notes_1","text":"git restore is available in Git 2.23 and later. Use this command instead of git checkout for file-specific operations for better clarity. Be cautious when discarding changes as they cannot be recovered unless committed.","title":"Notes"},{"location":"Git%20%26%20Github/Working-With-Branches/#git-checkout","text":"","title":"Git Checkout"},{"location":"Git%20%26%20Github/Working-With-Branches/#git-checkout_1","text":"The git checkout command is used to switch between branches or restore files in a Git repository.","title":"git checkout"},{"location":"Git%20%26%20Github/Working-With-Branches/#what-it-does","text":"Switches to an existing branch. Creates a new branch and switches to it (with -b option). Restores a specific file or files to a previous state.","title":"What It Does:"},{"location":"Git%20%26%20Github/Working-With-Branches/#usage","text":"git checkout [ options ] <branch-name>","title":"Usage:"},{"location":"Git%20%26%20Github/Working-With-Branches/#options_2","text":"Switch to an existing branch: git checkout <branch-name> Create and switch to a new branch: git checkout -b <new-branch-name> Restore a file to its state in the last commit: git checkout -- <file-name> Switch to a specific commit (detached HEAD state): git checkout <commit-hash> --orphan <new-branch-name> : Creates a new branch with no history. git checkout --orphan <new-branch-name> --detach : Operates in a detached HEAD state, allowing inspection of an arbitrary commit. git checkout --detach <commit-hash>","title":"Options:"},{"location":"Git%20%26%20Github/Working-With-Branches/#git-merge","text":"The git merge command is used to combine the changes from one branch into the current branch. It is a key tool for integrating work in Git, often used in collaborative workflows.","title":"Git Merge"},{"location":"Git%20%26%20Github/Working-With-Branches/#syntax_2","text":"git merge [ options ] <branch>","title":"Syntax"},{"location":"Git%20%26%20Github/Working-With-Branches/#common-use-cases_2","text":"Merge a Branch into the Current Branch : git merge <branch-name> Example: git merge feature-branch Merge with a Commit Message : git merge -m \"Merge message\" <branch-name> Example: git merge -m \"Merging feature into main\" feature-branch Abort a Merge : git merge --abort Use this if there are conflicts you do not want to resolve.","title":"Common Use Cases"},{"location":"Git%20%26%20Github/Working-With-Branches/#options_3","text":"--no-ff : Creates a merge commit even if a fast-forward merge is possible. git merge --no-ff <branch> --squash : Combines all changes into a single commit. git merge --squash <branch> --abort : Cancels the merge process. git merge --abort --commit : Completes the merge with a merge commit. -m <message> : Adds a custom message to the merge commit. --strategy=<strategy> : Specifies a merge strategy (e.g., recursive , ours , theirs ). git merge --strategy = recursive <branch>","title":"Options"},{"location":"Git%20%26%20Github/Working-With-Branches/#examples_2","text":"Merge development into main : git merge development Merge with a commit message: git merge -m \"Merging hotfix\" hotfix-branch Perform a squash merge: git merge --squash feature-enhancement Abort an ongoing merge: git merge --abort","title":"Examples"},{"location":"Git%20%26%20Github/Working-With-Branches/#notes_2","text":"Resolve conflicts manually if they arise during a merge. Use git status to see the conflicting files. After resolving conflicts, complete the merge using: git commit Avoid merging too frequently without testing to maintain repository stability.","title":"Notes"},{"location":"Git%20%26%20Github/Working-With-Branches/#git-rebase","text":"The git rebase command is used to reapply commits from one branch onto another, effectively rewriting the commit history. It is commonly used to maintain a linear project history and integrate changes more cleanly.","title":"Git Rebase"},{"location":"Git%20%26%20Github/Working-With-Branches/#syntax_3","text":"git rebase [ options ] <upstream>","title":"Syntax"},{"location":"Git%20%26%20Github/Working-With-Branches/#common-use-cases_3","text":"Rebase the Current Branch onto Another Branch : git rebase <branch> Example: git rebase main Interactive Rebase to Edit Commit History : git rebase -i <commit> Example: git rebase -i HEAD~3 This opens an editor where you can modify, reorder, or squash commits. Continue a Stopped Rebase : git rebase --continue Use this after resolving conflicts during a rebase. Abort a Rebase : git rebase --abort This restores the branch to its original state before the rebase started.","title":"Common Use Cases"},{"location":"Git%20%26%20Github/Working-With-Branches/#options_4","text":"-i or --interactive : Starts an interactive rebase session, allowing you to edit the commit history. git rebase -i <commit> --onto <new-base> : Rebases the branch onto a different base. git rebase --onto <new-base> <upstream> <branch> Example: git rebase --onto main feature-branch-old feature-branch-new --continue : Continues the rebase after conflicts are resolved. --skip : Skips the current conflicting commit and proceeds with the rebase. git rebase --skip --abort : Aborts the rebase and restores the branch to its original state. --preserve-merges : Preserves merge commits during a rebase. git rebase --preserve-merges main --no-ff : Ensures that no fast-forward merges are performed during the rebase.","title":"Options"},{"location":"Git%20%26%20Github/Working-With-Branches/#examples_3","text":"Rebase the current branch onto development : git rebase development Start an interactive rebase to modify the last 5 commits: git rebase -i HEAD~5 Rebase feature-branch onto main : git rebase --onto main development feature-branch Skip a conflicting commit during a rebase: git rebase --skip Abort a rebase and undo all changes: git rebase --abort ### Notes - Use git rebase with caution when working on shared branches as it rewrites commit history. - To avoid conflicts, ensure your branch is up to date with the target branch before rebasing: git fetch origin git rebase origin/main - After rebasing, force-push the changes to the remote repository: git push --force","title":"Examples"},{"location":"Git%20%26%20Github/Working-With-Branches/#git-cherry-pick","text":"The git cherry-pick command is used to apply a specific commit from one branch onto another. It allows you to select specific changes without merging the entire branch.","title":"Git Cherry-Pick"},{"location":"Git%20%26%20Github/Working-With-Branches/#syntax_4","text":"git cherry-pick [ options ] <commit-hash>","title":"Syntax"},{"location":"Git%20%26%20Github/Working-With-Branches/#common-use-cases_4","text":"Apply a Single Commit to the Current Branch : git cherry-pick <commit-hash> Example: git cherry-pick a1b2c3d4 Apply a Range of Commits : git cherry-pick <start-commit>^..<end-commit> Example: git cherry-pick f1e2d3c4^..g5h6i7j8 Apply Multiple Non-Sequential Commits : git cherry-pick <commit1> <commit2> <commit3> Example: git cherry-pick a1b2c3d4 f5e6d7c8 g9h0i1j2","title":"Common Use Cases"},{"location":"Git%20%26%20Github/Working-With-Branches/#options_5","text":"-e or --edit : Allows you to modify the commit message before applying it. git cherry-pick -e <commit-hash> -n or --no-commit : Applies the changes without committing them. git cherry-pick -n <commit-hash> --continue : Continues the cherry-pick after resolving conflicts. git cherry-pick --continue --abort : Aborts the cherry-pick and restores the branch to its original state. git cherry-pick --abort --skip : Skips the current conflicting commit and proceeds with the next one. git cherry-pick --skip","title":"Options"},{"location":"Git%20%26%20Github/Working-With-Branches/#examples_4","text":"Apply a specific commit to the current branch: git cherry-pick 123abc Apply a range of commits from another branch: git cherry-pick feature-branch^..main Modify the commit message while cherry-picking: git cherry-pick -e 456def Cherry-pick without committing the changes: git cherry-pick -n 789ghi Continue a stopped cherry-pick after resolving conflicts: git cherry-pick --continue","title":"Examples"},{"location":"Git%20%26%20Github/Working-With-Branches/#notes_3","text":"git cherry-pick is useful when you want to backport specific fixes or features to a different branch. Use git log or git reflog to find the commit hashes you want to cherry-pick. Be cautious when cherry-picking changes across branches with different histories, as it may lead to conflicts.","title":"Notes"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/","text":"Git Push \u00b6 Push the Code to the Remote Repository git push -u origin main This command pushes the changes in your local main branch to the main branch of the remote repository and sets the remote as the default upstream. Options for git push \u00b6 -f : Forces the push, overwriting changes. git push -f --tags : Pushes all tags to the remote repository. git push --tags --delete <remote>/<branch> : Deletes a branch on the remote repository. git push origin --delete feature-branch Git Pull \u00b6 The git pull command is used to fetch and merge changes from a remote repository into your current branch. It combines git fetch and git merge into a single command. Syntax \u00b6 git pull [ options ] [ repository ] [ refspec ] Common Use Cases \u00b6 Pull Changes from the Default Remote and Branch : git pull Fetches and merges changes from the remote-tracking branch. Pull Changes from a Specific Remote Branch : git pull origin main Fetches and merges changes from the main branch of the origin remote. Rebase Instead of Merging : git pull --rebase Fetches changes and rebases your commits on top of them. Options \u00b6 --rebase : Rebase the current branch on top of the upstream branch after fetching changes. git pull --rebase --all : Fetches and merges changes from all configured remotes. git pull --all --no-commit : Fetches and merges changes without committing the result. git pull --no-commit --squash : Creates a single squashed commit for all changes fetched. git pull --squash --no-rebase : Ensures that the pull operation does not perform a rebase. git pull --no-rebase Examples \u00b6 Fetch and merge changes from the develop branch: git pull origin develop Rebase your branch on top of the main branch: git pull --rebase origin main Fetch changes from all remotes: git pull --all Perform a pull without committing the merge result: git pull --no-commit Notes \u00b6 If there are conflicts during the merge, resolve them and then commit the changes. To pull changes from a specific remote and branch while rebasing: git pull --rebase origin feature-branch Ensure your local branch is up to date before pushing changes after a pull: git pull origin main git push origin main Git Fetch \u00b6 The git fetch command downloads objects and refs from another repository. Unlike git pull , it does not merge the changes into your current branch but updates your local tracking branches with the latest changes from the remote. Syntax \u00b6 git fetch [ options ] [ repository ] [ refspec ] Common Use Cases \u00b6 Fetch Updates from the Default Remote : git fetch Retrieves all updates from the remote repository without applying them to your working directory. Fetch from a Specific Remote : git fetch origin Updates the local tracking branches from the origin remote. Fetch a Specific Branch : git fetch origin main Fetches updates only for the main branch from the origin remote. Options \u00b6 --all : Fetches updates from all remotes. git fetch --all --dry-run : Displays what would be fetched without actually fetching the updates. git fetch --dry-run --prune : Removes local references to remote branches that no longer exist. git fetch --prune --tags : Fetches all tags from the remote repository. git fetch --tags --depth <depth> : Fetches a limited history of commits for shallow repositories. git fetch --depth 1 Examples \u00b6 Fetch updates from all remotes and prune stale branches: git fetch --all --prune Fetch a specific branch and display details without making changes: git fetch --dry-run origin feature-branch Fetch all tags: git fetch --tags Fetch updates with a shallow clone: git fetch --depth 1 Notes \u00b6 Use git fetch regularly to keep your tracking branches updated. Combine git fetch with git log to inspect remote changes before merging them into your local branch. git fetch origin main git log HEAD..origin/main To integrate fetched changes, follow up with git merge or git rebase as appropriate. Git Clone \u00b6 The git clone command creates a copy of an existing remote repository locally. It is commonly used to start working on an existing project. Syntax \u00b6 git clone [ options ] <repository> [ directory ] Common Use Cases \u00b6 Clone a Repository into a New Directory : git clone https://github.com/user/repo.git Creates a local copy of the repository. Clone into a Specific Directory : git clone https://github.com/user/repo.git my-folder Clones the repository into a folder named my-folder . Clone Only a Specific Branch : git clone -b main --single-branch https://github.com/user/repo.git Clones only the main branch. Options \u00b6 -b or --branch : Clone a specific branch instead of the default branch. git clone -b feature-branch https://github.com/user/repo.git --single-branch : Clone only the history of the specified branch. git clone --single-branch -b main https://github.com/user/repo.git --depth : Perform a shallow clone with a limited commit history. git clone --depth 1 https://github.com/user/repo.git --recurse-submodules : Clone submodules along with the repository. git clone --recurse-submodules https://github.com/user/repo.git --mirror : Clone a repository for use as a mirror, copying all refs and branches. git clone --mirror https://github.com/user/repo.git Examples \u00b6 Clone a repository into the current directory: git clone https://github.com/user/repo.git . Clone a specific branch with limited commit history: git clone --depth 10 -b main https://github.com/user/repo.git Clone a repository along with its submodules: git clone --recurse-submodules https://github.com/user/repo.git Notes \u00b6 After cloning, you can navigate into the repository and begin working: cd repo Ensure that you have the necessary permissions to clone private repositories. Use git remote -v to verify the remote URLs of the cloned repository. Git Remote \u00b6 git remote add origin git@github.com:EhsaasChaudhary/dfdf.git This links your local repository to a remote repository hosted on GitHub. Options for git remote \u00b6 git remote -v : Lists the remotes and their URLs. git remote -v git remote rename <old-name> <new-name> : Renames a remote. git remote rename origin upstream git remote remove <name> : Removes a remote. git remote remove origin","title":"Working with Remote Repos"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#git-push","text":"Push the Code to the Remote Repository git push -u origin main This command pushes the changes in your local main branch to the main branch of the remote repository and sets the remote as the default upstream.","title":"Git Push"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#options-for-git-push","text":"-f : Forces the push, overwriting changes. git push -f --tags : Pushes all tags to the remote repository. git push --tags --delete <remote>/<branch> : Deletes a branch on the remote repository. git push origin --delete feature-branch","title":"Options for git push"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#git-pull","text":"The git pull command is used to fetch and merge changes from a remote repository into your current branch. It combines git fetch and git merge into a single command.","title":"Git Pull"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#syntax","text":"git pull [ options ] [ repository ] [ refspec ]","title":"Syntax"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#common-use-cases","text":"Pull Changes from the Default Remote and Branch : git pull Fetches and merges changes from the remote-tracking branch. Pull Changes from a Specific Remote Branch : git pull origin main Fetches and merges changes from the main branch of the origin remote. Rebase Instead of Merging : git pull --rebase Fetches changes and rebases your commits on top of them.","title":"Common Use Cases"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#options","text":"--rebase : Rebase the current branch on top of the upstream branch after fetching changes. git pull --rebase --all : Fetches and merges changes from all configured remotes. git pull --all --no-commit : Fetches and merges changes without committing the result. git pull --no-commit --squash : Creates a single squashed commit for all changes fetched. git pull --squash --no-rebase : Ensures that the pull operation does not perform a rebase. git pull --no-rebase","title":"Options"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#examples","text":"Fetch and merge changes from the develop branch: git pull origin develop Rebase your branch on top of the main branch: git pull --rebase origin main Fetch changes from all remotes: git pull --all Perform a pull without committing the merge result: git pull --no-commit","title":"Examples"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#notes","text":"If there are conflicts during the merge, resolve them and then commit the changes. To pull changes from a specific remote and branch while rebasing: git pull --rebase origin feature-branch Ensure your local branch is up to date before pushing changes after a pull: git pull origin main git push origin main","title":"Notes"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#git-fetch","text":"The git fetch command downloads objects and refs from another repository. Unlike git pull , it does not merge the changes into your current branch but updates your local tracking branches with the latest changes from the remote.","title":"Git Fetch"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#syntax_1","text":"git fetch [ options ] [ repository ] [ refspec ]","title":"Syntax"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#common-use-cases_1","text":"Fetch Updates from the Default Remote : git fetch Retrieves all updates from the remote repository without applying them to your working directory. Fetch from a Specific Remote : git fetch origin Updates the local tracking branches from the origin remote. Fetch a Specific Branch : git fetch origin main Fetches updates only for the main branch from the origin remote.","title":"Common Use Cases"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#options_1","text":"--all : Fetches updates from all remotes. git fetch --all --dry-run : Displays what would be fetched without actually fetching the updates. git fetch --dry-run --prune : Removes local references to remote branches that no longer exist. git fetch --prune --tags : Fetches all tags from the remote repository. git fetch --tags --depth <depth> : Fetches a limited history of commits for shallow repositories. git fetch --depth 1","title":"Options"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#examples_1","text":"Fetch updates from all remotes and prune stale branches: git fetch --all --prune Fetch a specific branch and display details without making changes: git fetch --dry-run origin feature-branch Fetch all tags: git fetch --tags Fetch updates with a shallow clone: git fetch --depth 1","title":"Examples"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#notes_1","text":"Use git fetch regularly to keep your tracking branches updated. Combine git fetch with git log to inspect remote changes before merging them into your local branch. git fetch origin main git log HEAD..origin/main To integrate fetched changes, follow up with git merge or git rebase as appropriate.","title":"Notes"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#git-clone","text":"The git clone command creates a copy of an existing remote repository locally. It is commonly used to start working on an existing project.","title":"Git Clone"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#syntax_2","text":"git clone [ options ] <repository> [ directory ]","title":"Syntax"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#common-use-cases_2","text":"Clone a Repository into a New Directory : git clone https://github.com/user/repo.git Creates a local copy of the repository. Clone into a Specific Directory : git clone https://github.com/user/repo.git my-folder Clones the repository into a folder named my-folder . Clone Only a Specific Branch : git clone -b main --single-branch https://github.com/user/repo.git Clones only the main branch.","title":"Common Use Cases"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#options_2","text":"-b or --branch : Clone a specific branch instead of the default branch. git clone -b feature-branch https://github.com/user/repo.git --single-branch : Clone only the history of the specified branch. git clone --single-branch -b main https://github.com/user/repo.git --depth : Perform a shallow clone with a limited commit history. git clone --depth 1 https://github.com/user/repo.git --recurse-submodules : Clone submodules along with the repository. git clone --recurse-submodules https://github.com/user/repo.git --mirror : Clone a repository for use as a mirror, copying all refs and branches. git clone --mirror https://github.com/user/repo.git","title":"Options"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#examples_2","text":"Clone a repository into the current directory: git clone https://github.com/user/repo.git . Clone a specific branch with limited commit history: git clone --depth 10 -b main https://github.com/user/repo.git Clone a repository along with its submodules: git clone --recurse-submodules https://github.com/user/repo.git","title":"Examples"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#notes_2","text":"After cloning, you can navigate into the repository and begin working: cd repo Ensure that you have the necessary permissions to clone private repositories. Use git remote -v to verify the remote URLs of the cloned repository.","title":"Notes"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#git-remote","text":"git remote add origin git@github.com:EhsaasChaudhary/dfdf.git This links your local repository to a remote repository hosted on GitHub.","title":"Git Remote"},{"location":"Git%20%26%20Github/Working-With-Remote-Repo/#options-for-git-remote","text":"git remote -v : Lists the remotes and their URLs. git remote -v git remote rename <old-name> <new-name> : Renames a remote. git remote rename origin upstream git remote remove <name> : Removes a remote. git remote remove origin","title":"Options for git remote"},{"location":"Git%20%26%20Github/git_concepts/","text":"Introduction to Git and GitHub \u00b6 Git \u00b6 Git is a distributed version control system designed to manage source code changes during software development. It allows multiple developers to work on a project simultaneously without overwriting each other's changes. Key Features of Git \u00b6 Version Control : Tracks changes to files, allowing you to revert to previous versions if needed. Branching and Merging : Lets you create branches to work on features or fixes separately, which can be merged back into the main branch later. Distributed Nature : Each developer has a full copy of the repository, ensuring redundancy and enabling offline work. Efficiency : Git is optimized for speed and handles large projects efficiently. Common Commands \u00b6 git init : Initialize a new Git repository. git add : Stage changes for a commit. git commit : Save staged changes to the repository. git push : Upload local changes to a remote repository. git pull : Fetch and merge changes from a remote repository. git clone : Copy an existing repository. GitHub \u00b6 GitHub is a web-based platform that hosts Git repositories. It provides a user-friendly interface and additional tools for collaboration, project management, and deployment. Key Features of GitHub \u00b6 Repository Hosting : Stores Git repositories in the cloud. Collaboration Tools : Includes features like pull requests, code reviews, and team discussions. Issue Tracking : Allows tracking bugs, tasks, and feature requests. Continuous Integration/Continuous Deployment (CI/CD) : Supports automated testing and deployment workflows. GitHub Actions : Enables automation for software workflows directly within GitHub. GitHub vs. Git \u00b6 Git : A version control system installed locally on your machine. GitHub : A platform that hosts Git repositories and enhances collaboration with additional tools and features. Working Directory and Staging Area \u00b6 Working Directory \u00b6 The working directory is the local folder on your computer where you make changes to your files. It reflects the current state of your project and contains the files you're actively working on. Changes made in the working directory are not tracked by Git until they are staged or committed. Staging Area \u00b6 The staging area is a temporary space where changes are prepared before committing them to the repository. It allows you to select which changes to include in the next commit. Files must be added to the staging area using the git add command. Workflow Example: \u00b6 Make changes in the Working Directory . Use git add to move changes to the Staging Area . Use git commit to save the changes from the staging area to the repository.","title":"Git Concepts"},{"location":"Git%20%26%20Github/git_concepts/#introduction-to-git-and-github","text":"","title":"Introduction to Git and GitHub"},{"location":"Git%20%26%20Github/git_concepts/#git","text":"Git is a distributed version control system designed to manage source code changes during software development. It allows multiple developers to work on a project simultaneously without overwriting each other's changes.","title":"Git"},{"location":"Git%20%26%20Github/git_concepts/#key-features-of-git","text":"Version Control : Tracks changes to files, allowing you to revert to previous versions if needed. Branching and Merging : Lets you create branches to work on features or fixes separately, which can be merged back into the main branch later. Distributed Nature : Each developer has a full copy of the repository, ensuring redundancy and enabling offline work. Efficiency : Git is optimized for speed and handles large projects efficiently.","title":"Key Features of Git"},{"location":"Git%20%26%20Github/git_concepts/#common-commands","text":"git init : Initialize a new Git repository. git add : Stage changes for a commit. git commit : Save staged changes to the repository. git push : Upload local changes to a remote repository. git pull : Fetch and merge changes from a remote repository. git clone : Copy an existing repository.","title":"Common Commands"},{"location":"Git%20%26%20Github/git_concepts/#github","text":"GitHub is a web-based platform that hosts Git repositories. It provides a user-friendly interface and additional tools for collaboration, project management, and deployment.","title":"GitHub"},{"location":"Git%20%26%20Github/git_concepts/#key-features-of-github","text":"Repository Hosting : Stores Git repositories in the cloud. Collaboration Tools : Includes features like pull requests, code reviews, and team discussions. Issue Tracking : Allows tracking bugs, tasks, and feature requests. Continuous Integration/Continuous Deployment (CI/CD) : Supports automated testing and deployment workflows. GitHub Actions : Enables automation for software workflows directly within GitHub.","title":"Key Features of GitHub"},{"location":"Git%20%26%20Github/git_concepts/#github-vs-git","text":"Git : A version control system installed locally on your machine. GitHub : A platform that hosts Git repositories and enhances collaboration with additional tools and features.","title":"GitHub vs. Git"},{"location":"Git%20%26%20Github/git_concepts/#working-directory-and-staging-area","text":"","title":"Working Directory and Staging Area"},{"location":"Git%20%26%20Github/git_concepts/#working-directory","text":"The working directory is the local folder on your computer where you make changes to your files. It reflects the current state of your project and contains the files you're actively working on. Changes made in the working directory are not tracked by Git until they are staged or committed.","title":"Working Directory"},{"location":"Git%20%26%20Github/git_concepts/#staging-area","text":"The staging area is a temporary space where changes are prepared before committing them to the repository. It allows you to select which changes to include in the next commit. Files must be added to the staging area using the git add command.","title":"Staging Area"},{"location":"Git%20%26%20Github/git_concepts/#workflow-example","text":"Make changes in the Working Directory . Use git add to move changes to the Staging Area . Use git commit to save the changes from the staging area to the repository.","title":"Workflow Example:"},{"location":"Git%20%26%20Github/ssh-steps/","text":"How to Create an SSH Key for GitHub and Save it \u00b6 1. Generate the SSH Key Pair \u00b6 Open a terminal. Run the following command to create a new SSH key pair: Recommended: ssh-keygen -o Alternative (with custom options): ssh-keygen -o -t rsa -b 4096 -C \"your_email@example.com\" 2. Choose a Location to Save the Key \u00b6 When prompted, you can specify a custom location for the key file or press Enter to use the default location ( ~/.ssh/id_rsa ). 3. Enter a Passphrase (Optional) \u00b6 You will be asked to enter a passphrase to secure the key. This is optional; press Enter for no passphrase. 4. Locate the SSH Key \u00b6 Navigate to the .ssh directory (default location) using your terminal or file explorer. Open the .pub file (e.g., id_rsa.pub ) located in the .ssh folder. Copy the content of the .pub file, starting with ssh- . 5. Add the SSH Key to GitHub \u00b6 Log in to your GitHub account. Go to Settings : Click on your profile picture (top-right corner) > Settings > SSH and GPG Keys . Click New SSH Key . Add a title (e.g., EC Laptop ) and paste the public key into the \"Key\" field. Click Add SSH Key . 6. Verify the SSH Connection \u00b6 Run the following command to verify your SSH connection to GitHub: ssh -T git@github.com You should see a message like this: Hi EhsaasChaudhary! You ' ve successfully authenticated, but GitHub does not provide shell access.","title":"SSH Steps"},{"location":"Git%20%26%20Github/ssh-steps/#how-to-create-an-ssh-key-for-github-and-save-it","text":"","title":"How to Create an SSH Key for GitHub and Save it"},{"location":"Git%20%26%20Github/ssh-steps/#1-generate-the-ssh-key-pair","text":"Open a terminal. Run the following command to create a new SSH key pair: Recommended: ssh-keygen -o Alternative (with custom options): ssh-keygen -o -t rsa -b 4096 -C \"your_email@example.com\"","title":"1. Generate the SSH Key Pair"},{"location":"Git%20%26%20Github/ssh-steps/#2-choose-a-location-to-save-the-key","text":"When prompted, you can specify a custom location for the key file or press Enter to use the default location ( ~/.ssh/id_rsa ).","title":"2. Choose a Location to Save the Key"},{"location":"Git%20%26%20Github/ssh-steps/#3-enter-a-passphrase-optional","text":"You will be asked to enter a passphrase to secure the key. This is optional; press Enter for no passphrase.","title":"3. Enter a Passphrase (Optional)"},{"location":"Git%20%26%20Github/ssh-steps/#4-locate-the-ssh-key","text":"Navigate to the .ssh directory (default location) using your terminal or file explorer. Open the .pub file (e.g., id_rsa.pub ) located in the .ssh folder. Copy the content of the .pub file, starting with ssh- .","title":"4. Locate the SSH Key"},{"location":"Git%20%26%20Github/ssh-steps/#5-add-the-ssh-key-to-github","text":"Log in to your GitHub account. Go to Settings : Click on your profile picture (top-right corner) > Settings > SSH and GPG Keys . Click New SSH Key . Add a title (e.g., EC Laptop ) and paste the public key into the \"Key\" field. Click Add SSH Key .","title":"5. Add the SSH Key to GitHub"},{"location":"Git%20%26%20Github/ssh-steps/#6-verify-the-ssh-connection","text":"Run the following command to verify your SSH connection to GitHub: ssh -T git@github.com You should see a message like this: Hi EhsaasChaudhary! You ' ve successfully authenticated, but GitHub does not provide shell access.","title":"6. Verify the SSH Connection"},{"location":"Linux%20Commands/File-owner-permission/","text":"File Permissions and Ownership in Linux \u00b6 Overview \u00b6 File permissions and ownership in Linux determine who can read, write, or execute a file or directory. These settings ensure system security and controlled access. Commands for Managing File Permissions and Ownership \u00b6 1. chmod - Change File Permissions \u00b6 Description : Modifies the read, write, and execute permissions for files and directories. Examples : # Give read, write, and execute permissions to the owner $ chmod u+rwx file.txt # Remove write permissions for the group $ chmod g-w file.txt # Set permissions using numeric notation $ chmod 755 file.txt Options : -R : Apply changes recursively to directories. $ chmod -R 755 folder --reference : Apply permissions from a reference file. $ chmod --reference = reference.txt target.txt 2. chown - Change File Ownership \u00b6 Description : Alters the ownership of a file or directory. Examples : # Change owner to 'user' $ chown user file.txt # Change owner and group $ chown user:group file.txt Options : -R : Apply changes recursively. $ chown -R user:group folder --from : Change ownership only if the current owner matches. $ chown --from = current_user new_user file.txt 3. chgrp - Change Group Ownership \u00b6 Description : Modifies the group associated with a file or directory. Examples : # Change group to 'developers' $ chgrp developers file.txt Options : -R : Apply changes recursively. $ chgrp -R developers folder --reference : Apply group ownership from a reference file. $ chgrp --reference = reference.txt target.txt 4. ls -l - List File Permissions \u00b6 Description : Displays the permissions of files and directories in a detailed format. Example : $ ls -l file.txt -rw-r--r-- 1 user group 1234 Jan 1 10 :00 file.txt The first column ( -rw-r--r-- ) shows permissions for owner, group, and others. 5. umask - Default Permissions \u00b6 Description : Sets the default permissions for new files and directories. Examples : # View current umask value $ umask 0022 # Set a new umask value $ umask 0027 Explanation : A umask value of 0022 means: Owner: Read, write Group: Read-only Others: Read-only 6. stat - Detailed File Information \u00b6 Description : Provides detailed information about a file, including permissions and ownership. Example : $ stat file.txt File: file.txt Size: 1234 Blocks: 8 IO Block: 4096 regular file Device: 802h/2050d Inode: 123456 Links: 1 Access: 2025 -01-05 10 :00:00.000000000 +0000 Modify: 2025 -01-05 10 :00:00.000000000 +0000 Change: 2025 -01-05 10 :00:00.000000000 +0000 Birth: - 7. getfacl and setfacl - Access Control Lists (ACLs) \u00b6 Description : Manages fine-grained file permissions using ACLs. getfacl - View ACLs \u00b6 Example : $ getfacl file.txt # file: file.txt # owner: user # group: group user::rw- group::r-- other::r-- setfacl - Modify ACLs \u00b6 Examples : # Grant user 'john' read permission $ setfacl -m u:john:r file.txt # Remove all ACL entries $ setfacl -b file.txt Options : -m : Modify ACL entries. -x : Remove specific ACL entries. -b : Remove all ACL entries. -R : Apply changes recursively. Acronyms Used \u00b6 ACL : Access Control List IO Block : Input/Output Block umask : User file creation mode mask Summary \u00b6 These commands provide robust control over file permissions and ownership, allowing administrators and users to manage access securely and efficiently. By mastering these tools, you can ensure the integrity and confidentiality of your files and directories.","title":"File Owner Permission"},{"location":"Linux%20Commands/File-owner-permission/#file-permissions-and-ownership-in-linux","text":"","title":"File Permissions and Ownership in Linux"},{"location":"Linux%20Commands/File-owner-permission/#overview","text":"File permissions and ownership in Linux determine who can read, write, or execute a file or directory. These settings ensure system security and controlled access.","title":"Overview"},{"location":"Linux%20Commands/File-owner-permission/#commands-for-managing-file-permissions-and-ownership","text":"","title":"Commands for Managing File Permissions and Ownership"},{"location":"Linux%20Commands/File-owner-permission/#1-chmod-change-file-permissions","text":"Description : Modifies the read, write, and execute permissions for files and directories. Examples : # Give read, write, and execute permissions to the owner $ chmod u+rwx file.txt # Remove write permissions for the group $ chmod g-w file.txt # Set permissions using numeric notation $ chmod 755 file.txt Options : -R : Apply changes recursively to directories. $ chmod -R 755 folder --reference : Apply permissions from a reference file. $ chmod --reference = reference.txt target.txt","title":"1. chmod - Change File Permissions"},{"location":"Linux%20Commands/File-owner-permission/#2-chown-change-file-ownership","text":"Description : Alters the ownership of a file or directory. Examples : # Change owner to 'user' $ chown user file.txt # Change owner and group $ chown user:group file.txt Options : -R : Apply changes recursively. $ chown -R user:group folder --from : Change ownership only if the current owner matches. $ chown --from = current_user new_user file.txt","title":"2. chown - Change File Ownership"},{"location":"Linux%20Commands/File-owner-permission/#3-chgrp-change-group-ownership","text":"Description : Modifies the group associated with a file or directory. Examples : # Change group to 'developers' $ chgrp developers file.txt Options : -R : Apply changes recursively. $ chgrp -R developers folder --reference : Apply group ownership from a reference file. $ chgrp --reference = reference.txt target.txt","title":"3. chgrp - Change Group Ownership"},{"location":"Linux%20Commands/File-owner-permission/#4-ls-l-list-file-permissions","text":"Description : Displays the permissions of files and directories in a detailed format. Example : $ ls -l file.txt -rw-r--r-- 1 user group 1234 Jan 1 10 :00 file.txt The first column ( -rw-r--r-- ) shows permissions for owner, group, and others.","title":"4. ls -l - List File Permissions"},{"location":"Linux%20Commands/File-owner-permission/#5-umask-default-permissions","text":"Description : Sets the default permissions for new files and directories. Examples : # View current umask value $ umask 0022 # Set a new umask value $ umask 0027 Explanation : A umask value of 0022 means: Owner: Read, write Group: Read-only Others: Read-only","title":"5. umask - Default Permissions"},{"location":"Linux%20Commands/File-owner-permission/#6-stat-detailed-file-information","text":"Description : Provides detailed information about a file, including permissions and ownership. Example : $ stat file.txt File: file.txt Size: 1234 Blocks: 8 IO Block: 4096 regular file Device: 802h/2050d Inode: 123456 Links: 1 Access: 2025 -01-05 10 :00:00.000000000 +0000 Modify: 2025 -01-05 10 :00:00.000000000 +0000 Change: 2025 -01-05 10 :00:00.000000000 +0000 Birth: -","title":"6. stat - Detailed File Information"},{"location":"Linux%20Commands/File-owner-permission/#7-getfacl-and-setfacl-access-control-lists-acls","text":"Description : Manages fine-grained file permissions using ACLs.","title":"7. getfacl and setfacl - Access Control Lists (ACLs)"},{"location":"Linux%20Commands/File-owner-permission/#getfacl-view-acls","text":"Example : $ getfacl file.txt # file: file.txt # owner: user # group: group user::rw- group::r-- other::r--","title":"getfacl - View ACLs"},{"location":"Linux%20Commands/File-owner-permission/#setfacl-modify-acls","text":"Examples : # Grant user 'john' read permission $ setfacl -m u:john:r file.txt # Remove all ACL entries $ setfacl -b file.txt Options : -m : Modify ACL entries. -x : Remove specific ACL entries. -b : Remove all ACL entries. -R : Apply changes recursively.","title":"setfacl - Modify ACLs"},{"location":"Linux%20Commands/File-owner-permission/#acronyms-used","text":"ACL : Access Control List IO Block : Input/Output Block umask : User file creation mode mask","title":"Acronyms Used"},{"location":"Linux%20Commands/File-owner-permission/#summary","text":"These commands provide robust control over file permissions and ownership, allowing administrators and users to manage access securely and efficiently. By mastering these tools, you can ensure the integrity and confidentiality of your files and directories.","title":"Summary"},{"location":"Linux%20Commands/basic-commands/","text":"Linux Commands Explanation with Examples \u00b6 1. pwd - Print Working Directory \u00b6 Description : Displays the current directory path. Example : $ pwd Output: /home/feilzz Options : --help : Displays help information about pwd . 2. whoami - Show Current User \u00b6 Description : Prints the username of the current user. Example : $ whoami Output: feilzz Options : --help : Displays help information about whoami . 3. date - Display System Date and Time \u00b6 Description : Shows the current date and time of the system. Example : $ date Output: Wed Jan 1 09:10:33 UTC 2025 Options : +%Y-%m-%d : Displays the date in YYYY-MM-DD format. $ date +%Y-%m-%d 2025 -01-01 +%T : Displays only the time in HH:MM:SS format. $ date +%T 09 :10:33 4. mkdir - Make Directory \u00b6 Description : Creates a new directory. Example : $ mkdir linux Creates a directory named linux in the current path. Options : -p : Creates parent directories as needed. $ mkdir -p parent/child -v : Prints a message for each created directory. $ mkdir -v linux mkdir: created directory 'linux' 5. ls - List Directory Contents \u00b6 Description : Displays the contents of the current directory. Example : $ ls Output: linux Options : -a : Shows all files, including hidden files. $ ls -a . .. .bashrc linux -l : Lists files in long format with details. $ ls -l drwxr-xr-x 2 feilzz feilzz 4096 Jan 1 09 :10 linux -h : Human-readable sizes when used with -l . $ ls -lh drwxr-xr-x 2 feilzz feilzz 4 .0K Jan 1 09 :10 linux 6. cd - Change Directory \u00b6 Description : Navigates between directories. Example : $ cd linux $ pwd /home/feilzz/linux Options : No specific options, but useful shortcuts include: cd .. : Moves to the parent directory. cd ~ : Moves to the home directory. cd - : Switches to the previous directory. 7. clear - Clear Terminal Screen \u00b6 Description : Clears the terminal screen, making it easier to focus on new commands or output. Example : $ clear The terminal screen is cleared, but previous output can still be scrolled back to. Usage Notes \u00b6 These commands are foundational to Linux and allow for efficient navigation and system interaction. They form the basis for more complex scripting and system management.","title":"Basic Commands"},{"location":"Linux%20Commands/basic-commands/#linux-commands-explanation-with-examples","text":"","title":"Linux Commands Explanation with Examples"},{"location":"Linux%20Commands/basic-commands/#1-pwd-print-working-directory","text":"Description : Displays the current directory path. Example : $ pwd Output: /home/feilzz Options : --help : Displays help information about pwd .","title":"1. pwd - Print Working Directory"},{"location":"Linux%20Commands/basic-commands/#2-whoami-show-current-user","text":"Description : Prints the username of the current user. Example : $ whoami Output: feilzz Options : --help : Displays help information about whoami .","title":"2. whoami - Show Current User"},{"location":"Linux%20Commands/basic-commands/#3-date-display-system-date-and-time","text":"Description : Shows the current date and time of the system. Example : $ date Output: Wed Jan 1 09:10:33 UTC 2025 Options : +%Y-%m-%d : Displays the date in YYYY-MM-DD format. $ date +%Y-%m-%d 2025 -01-01 +%T : Displays only the time in HH:MM:SS format. $ date +%T 09 :10:33","title":"3. date - Display System Date and Time"},{"location":"Linux%20Commands/basic-commands/#4-mkdir-make-directory","text":"Description : Creates a new directory. Example : $ mkdir linux Creates a directory named linux in the current path. Options : -p : Creates parent directories as needed. $ mkdir -p parent/child -v : Prints a message for each created directory. $ mkdir -v linux mkdir: created directory 'linux'","title":"4. mkdir - Make Directory"},{"location":"Linux%20Commands/basic-commands/#5-ls-list-directory-contents","text":"Description : Displays the contents of the current directory. Example : $ ls Output: linux Options : -a : Shows all files, including hidden files. $ ls -a . .. .bashrc linux -l : Lists files in long format with details. $ ls -l drwxr-xr-x 2 feilzz feilzz 4096 Jan 1 09 :10 linux -h : Human-readable sizes when used with -l . $ ls -lh drwxr-xr-x 2 feilzz feilzz 4 .0K Jan 1 09 :10 linux","title":"5. ls - List Directory Contents"},{"location":"Linux%20Commands/basic-commands/#6-cd-change-directory","text":"Description : Navigates between directories. Example : $ cd linux $ pwd /home/feilzz/linux Options : No specific options, but useful shortcuts include: cd .. : Moves to the parent directory. cd ~ : Moves to the home directory. cd - : Switches to the previous directory.","title":"6. cd - Change Directory"},{"location":"Linux%20Commands/basic-commands/#7-clear-clear-terminal-screen","text":"Description : Clears the terminal screen, making it easier to focus on new commands or output. Example : $ clear The terminal screen is cleared, but previous output can still be scrolled back to.","title":"7. clear - Clear Terminal Screen"},{"location":"Linux%20Commands/basic-commands/#usage-notes","text":"These commands are foundational to Linux and allow for efficient navigation and system interaction. They form the basis for more complex scripting and system management.","title":"Usage Notes"},{"location":"Linux%20Commands/file-redirection-piping/","text":"File Redirection and Piping \u00b6 File redirection and piping are essential features of Linux that allow users to manage input and output efficiently. They are used to direct the flow of data between files, commands, and devices. File Redirection \u00b6 File redirection allows the standard input ( stdin ), standard output ( stdout ), and standard error ( stderr ) of a command to be redirected to a file or another command. Output Redirection ( > ) \u00b6 Redirects the standard output of a command to a file. If the file exists, it will be overwritten. Syntax: command > filename Example: echo \"Hello, World!\" > output.txt This will create a file named output.txt with the content Hello, World! . Append Redirection ( >> ) \u00b6 Appends the standard output of a command to the end of a file without overwriting it. Syntax: command >> filename Example: echo \"New Line\" >> output.txt This adds New Line to the end of the output.txt file. Error Redirection ( 2> ) \u00b6 Redirects the standard error of a command to a file. Syntax: command 2 > filename Example: ls nonexistentfile 2 > error.log This will redirect the error message to error.log . Redirect Both Output and Error ( >& ) \u00b6 Redirects both standard output and standard error to a file. Syntax: command > filename 2 > & 1 Example: ls nonexistentfile > output.log 2 > & 1 This sends both output and error messages to output.log . Piping \u00b6 Piping ( | ) is used to direct the output of one command as input to another command. Basic Usage \u00b6 Syntax: command1 | command2 Example: ls | grep \"file\" This lists files and then filters the output to show only those containing the word file . Combining Multiple Commands \u00b6 Example: ps aux | grep \"bash\" | wc -l This counts the number of bash processes running on the system. Practice Examples \u00b6 Redirecting Output: echo \"Test line 1\" > testfile.txt echo \"Test line 2\" >> testfile.txt cat testfile.txt Capturing Errors: ls /nonexistent 2 > errors.log cat errors.log Using Pipes: cat /etc/passwd | grep \"root\" Combining Redirection and Piping: find / -name \"file.txt\" 2 > errors.log | grep \"home\" Additional Options \u00b6 tee : Used to redirect output to both a file and the console. Example: echo \"Hello World\" | tee output.txt xargs : Used to build and execute command lines from standard input. Example: echo \"file1 file2 file3\" | xargs touch Steps to Practice File Redirection and Piping Commands \u00b6 Create Test Files and Directories: mkdir practice_dir cd practice_dir echo -e \"Line1\\nLine2\\nLine3\" > file1.txt echo -e \"Another1\\nAnother2\" > file2.txt Practice Redirecting Output: Overwrite a file: echo \"Overwrite Example\" > file1.txt cat file1.txt Append to a file: echo \"Appended Line\" >> file1.txt cat file1.txt Practice Capturing Errors: Redirect error messages: ls nonexistentfile 2 > error.log cat error.log Practice Using Pipes: Chain commands: cat file1.txt | grep \"Line\" Count lines: ls | wc -l Combine Redirection and Piping: Search and log results: find / -name \"file1.txt\" 2 > find_errors.log | grep \"practice_dir\" Advanced Practice with tee and xargs : Redirect and display output: echo \"Using tee command\" | tee combined_output.txt cat combined_output.txt Execute commands from input: echo \"fileA fileB\" | xargs touch ls","title":"File Redirection & Piping"},{"location":"Linux%20Commands/file-redirection-piping/#file-redirection-and-piping","text":"File redirection and piping are essential features of Linux that allow users to manage input and output efficiently. They are used to direct the flow of data between files, commands, and devices.","title":"File Redirection and Piping"},{"location":"Linux%20Commands/file-redirection-piping/#file-redirection","text":"File redirection allows the standard input ( stdin ), standard output ( stdout ), and standard error ( stderr ) of a command to be redirected to a file or another command.","title":"File Redirection"},{"location":"Linux%20Commands/file-redirection-piping/#output-redirection","text":"Redirects the standard output of a command to a file. If the file exists, it will be overwritten. Syntax: command > filename Example: echo \"Hello, World!\" > output.txt This will create a file named output.txt with the content Hello, World! .","title":"Output Redirection (&gt;)"},{"location":"Linux%20Commands/file-redirection-piping/#append-redirection","text":"Appends the standard output of a command to the end of a file without overwriting it. Syntax: command >> filename Example: echo \"New Line\" >> output.txt This adds New Line to the end of the output.txt file.","title":"Append Redirection (&gt;&gt;)"},{"location":"Linux%20Commands/file-redirection-piping/#error-redirection-2","text":"Redirects the standard error of a command to a file. Syntax: command 2 > filename Example: ls nonexistentfile 2 > error.log This will redirect the error message to error.log .","title":"Error Redirection (2&gt;)"},{"location":"Linux%20Commands/file-redirection-piping/#redirect-both-output-and-error","text":"Redirects both standard output and standard error to a file. Syntax: command > filename 2 > & 1 Example: ls nonexistentfile > output.log 2 > & 1 This sends both output and error messages to output.log .","title":"Redirect Both Output and Error (&gt;&amp;)"},{"location":"Linux%20Commands/file-redirection-piping/#piping","text":"Piping ( | ) is used to direct the output of one command as input to another command.","title":"Piping"},{"location":"Linux%20Commands/file-redirection-piping/#basic-usage","text":"Syntax: command1 | command2 Example: ls | grep \"file\" This lists files and then filters the output to show only those containing the word file .","title":"Basic Usage"},{"location":"Linux%20Commands/file-redirection-piping/#combining-multiple-commands","text":"Example: ps aux | grep \"bash\" | wc -l This counts the number of bash processes running on the system.","title":"Combining Multiple Commands"},{"location":"Linux%20Commands/file-redirection-piping/#practice-examples","text":"Redirecting Output: echo \"Test line 1\" > testfile.txt echo \"Test line 2\" >> testfile.txt cat testfile.txt Capturing Errors: ls /nonexistent 2 > errors.log cat errors.log Using Pipes: cat /etc/passwd | grep \"root\" Combining Redirection and Piping: find / -name \"file.txt\" 2 > errors.log | grep \"home\"","title":"Practice Examples"},{"location":"Linux%20Commands/file-redirection-piping/#additional-options","text":"tee : Used to redirect output to both a file and the console. Example: echo \"Hello World\" | tee output.txt xargs : Used to build and execute command lines from standard input. Example: echo \"file1 file2 file3\" | xargs touch","title":"Additional Options"},{"location":"Linux%20Commands/file-redirection-piping/#steps-to-practice-file-redirection-and-piping-commands","text":"Create Test Files and Directories: mkdir practice_dir cd practice_dir echo -e \"Line1\\nLine2\\nLine3\" > file1.txt echo -e \"Another1\\nAnother2\" > file2.txt Practice Redirecting Output: Overwrite a file: echo \"Overwrite Example\" > file1.txt cat file1.txt Append to a file: echo \"Appended Line\" >> file1.txt cat file1.txt Practice Capturing Errors: Redirect error messages: ls nonexistentfile 2 > error.log cat error.log Practice Using Pipes: Chain commands: cat file1.txt | grep \"Line\" Count lines: ls | wc -l Combine Redirection and Piping: Search and log results: find / -name \"file1.txt\" 2 > find_errors.log | grep \"practice_dir\" Advanced Practice with tee and xargs : Redirect and display output: echo \"Using tee command\" | tee combined_output.txt cat combined_output.txt Execute commands from input: echo \"fileA fileB\" | xargs touch ls","title":"Steps to Practice File Redirection and Piping Commands"},{"location":"Linux%20Commands/linux-file_ops/","text":"Linux Commands for File Operations in CLI \u00b6 1. cat \u00b6 The cat command is used to display the contents of a file, combine multiple files, or create a new file. Examples: \u00b6 Display a file's content: cat filename.txt Concatenate multiple files and display the result: cat file1.txt file2.txt Create a new file (Ctrl+D to save): cat > newfile.txt 2. less \u00b6 The less command lets you view a file one screen at a time. Steps to Use: \u00b6 Move to the next item: Press n Move to the top: Press Shift + G Move to the bottom: Press g Search forward: Type /search_term Search backward: Type ?search_term Exit: Press q Example: \u00b6 View a file: less filename.txt 3. more \u00b6 The more command is similar to less but has fewer features. It allows you to view a file one screen at a time. Example: \u00b6 View a file: more filename.txt Scroll one line at a time: Press Enter Scroll one page at a time: Press Space Exit: Press q 4. touch \u00b6 The touch command is used to create an empty file or update the timestamp of an existing file. Example: \u00b6 Create a new file: touch newfile.txt Update a file's timestamp: touch existingfile.txt 5. rm \u00b6 The rm command is used to delete files or directories. Examples: \u00b6 Delete a file: rm filename.txt Delete multiple files: rm file1.txt file2.txt Delete a directory and its contents recursively: rm -r directory_name Force delete without confirmation: rm -rf directory_name 6. vi \u00b6 The vi editor is a powerful text editor available on most Linux systems. Steps to Use: \u00b6 Open a file in vi : vi filename.txt Press i to enter insert (edit) mode. Make your changes. Press Esc to exit insert mode. Save the file and exit: Save changes: :w Save and exit: :wq Exit without saving: :q! Example: \u00b6 Open and edit a file: vi filename.txt 7. nano \u00b6 The nano editor is a simpler text editor compared to vi . Steps to Use: \u00b6 Open a file in nano : nano filename.txt Edit the file as needed. Save the changes: Press Ctrl + O , then Enter to save. Exit the editor: Press Ctrl + X to exit. Example: \u00b6 Open and edit a file: nano filename.txt","title":"Linux File Operations"},{"location":"Linux%20Commands/linux-file_ops/#linux-commands-for-file-operations-in-cli","text":"","title":"Linux Commands for File Operations in CLI"},{"location":"Linux%20Commands/linux-file_ops/#1-cat","text":"The cat command is used to display the contents of a file, combine multiple files, or create a new file.","title":"1. cat"},{"location":"Linux%20Commands/linux-file_ops/#examples","text":"Display a file's content: cat filename.txt Concatenate multiple files and display the result: cat file1.txt file2.txt Create a new file (Ctrl+D to save): cat > newfile.txt","title":"Examples:"},{"location":"Linux%20Commands/linux-file_ops/#2-less","text":"The less command lets you view a file one screen at a time.","title":"2. less"},{"location":"Linux%20Commands/linux-file_ops/#steps-to-use","text":"Move to the next item: Press n Move to the top: Press Shift + G Move to the bottom: Press g Search forward: Type /search_term Search backward: Type ?search_term Exit: Press q","title":"Steps to Use:"},{"location":"Linux%20Commands/linux-file_ops/#example","text":"View a file: less filename.txt","title":"Example:"},{"location":"Linux%20Commands/linux-file_ops/#3-more","text":"The more command is similar to less but has fewer features. It allows you to view a file one screen at a time.","title":"3. more"},{"location":"Linux%20Commands/linux-file_ops/#example_1","text":"View a file: more filename.txt Scroll one line at a time: Press Enter Scroll one page at a time: Press Space Exit: Press q","title":"Example:"},{"location":"Linux%20Commands/linux-file_ops/#4-touch","text":"The touch command is used to create an empty file or update the timestamp of an existing file.","title":"4. touch"},{"location":"Linux%20Commands/linux-file_ops/#example_2","text":"Create a new file: touch newfile.txt Update a file's timestamp: touch existingfile.txt","title":"Example:"},{"location":"Linux%20Commands/linux-file_ops/#5-rm","text":"The rm command is used to delete files or directories.","title":"5. rm"},{"location":"Linux%20Commands/linux-file_ops/#examples_1","text":"Delete a file: rm filename.txt Delete multiple files: rm file1.txt file2.txt Delete a directory and its contents recursively: rm -r directory_name Force delete without confirmation: rm -rf directory_name","title":"Examples:"},{"location":"Linux%20Commands/linux-file_ops/#6-vi","text":"The vi editor is a powerful text editor available on most Linux systems.","title":"6. vi"},{"location":"Linux%20Commands/linux-file_ops/#steps-to-use_1","text":"Open a file in vi : vi filename.txt Press i to enter insert (edit) mode. Make your changes. Press Esc to exit insert mode. Save the file and exit: Save changes: :w Save and exit: :wq Exit without saving: :q!","title":"Steps to Use:"},{"location":"Linux%20Commands/linux-file_ops/#example_3","text":"Open and edit a file: vi filename.txt","title":"Example:"},{"location":"Linux%20Commands/linux-file_ops/#7-nano","text":"The nano editor is a simpler text editor compared to vi .","title":"7. nano"},{"location":"Linux%20Commands/linux-file_ops/#steps-to-use_2","text":"Open a file in nano : nano filename.txt Edit the file as needed. Save the changes: Press Ctrl + O , then Enter to save. Exit the editor: Press Ctrl + X to exit.","title":"Steps to Use:"},{"location":"Linux%20Commands/linux-file_ops/#example_4","text":"Open and edit a file: nano filename.txt","title":"Example:"},{"location":"Linux%20Commands/process-management/","text":"Process Management Commands \u00b6 1. ps - Display Process Information \u00b6 Description : Displays information about the currently running processes. Example : $ ps Output: PID TTY TIME CMD 1234 pts/0 00:00:01 bash 5678 pts/0 00:00:00 ps Options : -e : Displays all processes. $ ps -e -f : Displays full format listing. $ ps -f -u username : Displays processes for a specific user. $ ps -u feilzz 2. top - Display Real-Time Process Info \u00b6 Description : Shows a real-time view of system processes and resource usage. Example : $ top Press q to quit. Options : -d seconds : Sets the delay between updates. $ top -d 5 -u username : Displays processes for a specific user. $ top -u feilzz 3. kill - Terminate Processes \u00b6 Description : Sends signals to terminate or control processes. Example : $ kill 1234 Terminates the process with PID 1234. Options : -9 : Forcefully kills a process. $ kill -9 1234 -l : Lists all available signals. $ kill -l 4. jobs - Display Background Jobs \u00b6 Description : Lists all background jobs in the current session. Example : $ jobs Output: [1]+ Running sleep 100 & Options : -l : Displays process IDs of jobs. $ jobs -l 5. fg - Bring Background Job to Foreground \u00b6 Description : Resumes a background job in the foreground. Example : $ fg %1 Brings job 1 to the foreground. 6. bg - Resume Background Job \u00b6 Description : Resumes a stopped job in the background. Example : $ bg %1 Resumes job 1 in the background. 7. htop - Interactive Process Viewer \u00b6 Description : Provides an interactive and visual view of system processes and resource usage. Example : $ htop Opens an interactive interface showing CPU, memory usage, and running processes. Options : -u <username> : Show processes for a specific user. $ htop -u feilzz --sort-key : Sort by a specific column (e.g., %CPU ). $ htop --sort-key = %CPU 8. pkill - Kill Processes by Name \u00b6 Description : Terminates processes based on their name. Example : $ pkill firefox Kills all processes with the name firefox . Options : -u <username> : Kill processes belonging to a specific user. $ pkill -u feilzz -signal : Specify a signal to send (e.g., SIGKILL ). $ pkill -9 firefox 9. nice - Set Process Priority \u00b6 Description : Launches a process with a specified priority level. Example : $ nice -n 10 myprogram Runs myprogram with a priority of 10 . Options : -n <priority> : Specify the priority level (-20 is the highest, 19 is the lowest). $ nice -n -5 myprogram 10. renice - Change Process Priority \u00b6 Description : Changes the priority of a running process. Example : $ renice 5 -p 1234 Changes the priority of process 1234 to 5 . Options : -p <pid> : Specify the process ID. $ renice -10 -p 5678 -u <username> : Change priority for all processes of a user. $ renice 15 -u feilzz 11. uptime - Show System Uptime \u00b6 Description : Displays how long the system has been running along with load averages. Example : $ uptime Output: 09:45:12 up 1 day, 3:45, 2 users, load average: 0.00, 0.01, 0.05 Options : None specific, but it's often used in scripts to check system stability. 12. watch - Run Command Periodically \u00b6 Description : Executes a command repeatedly at a set interval, showing the output. Example : $ watch -n 2 df -h Runs df -h every 2 seconds, showing disk usage. Options : -n <seconds> : Set the interval in seconds. $ watch -n 5 ls -d : Highlight differences between updates. $ watch -d free Usage Notes \u00b6 These commands are essential for monitoring, controlling, and managing processes on a Linux system. They provide both real-time and static views of process activity.","title":"Process Management"},{"location":"Linux%20Commands/process-management/#process-management-commands","text":"","title":"Process Management Commands"},{"location":"Linux%20Commands/process-management/#1-ps-display-process-information","text":"Description : Displays information about the currently running processes. Example : $ ps Output: PID TTY TIME CMD 1234 pts/0 00:00:01 bash 5678 pts/0 00:00:00 ps Options : -e : Displays all processes. $ ps -e -f : Displays full format listing. $ ps -f -u username : Displays processes for a specific user. $ ps -u feilzz","title":"1. ps - Display Process Information"},{"location":"Linux%20Commands/process-management/#2-top-display-real-time-process-info","text":"Description : Shows a real-time view of system processes and resource usage. Example : $ top Press q to quit. Options : -d seconds : Sets the delay between updates. $ top -d 5 -u username : Displays processes for a specific user. $ top -u feilzz","title":"2. top - Display Real-Time Process Info"},{"location":"Linux%20Commands/process-management/#3-kill-terminate-processes","text":"Description : Sends signals to terminate or control processes. Example : $ kill 1234 Terminates the process with PID 1234. Options : -9 : Forcefully kills a process. $ kill -9 1234 -l : Lists all available signals. $ kill -l","title":"3. kill - Terminate Processes"},{"location":"Linux%20Commands/process-management/#4-jobs-display-background-jobs","text":"Description : Lists all background jobs in the current session. Example : $ jobs Output: [1]+ Running sleep 100 & Options : -l : Displays process IDs of jobs. $ jobs -l","title":"4. jobs - Display Background Jobs"},{"location":"Linux%20Commands/process-management/#5-fg-bring-background-job-to-foreground","text":"Description : Resumes a background job in the foreground. Example : $ fg %1 Brings job 1 to the foreground.","title":"5. fg - Bring Background Job to Foreground"},{"location":"Linux%20Commands/process-management/#6-bg-resume-background-job","text":"Description : Resumes a stopped job in the background. Example : $ bg %1 Resumes job 1 in the background.","title":"6. bg - Resume Background Job"},{"location":"Linux%20Commands/process-management/#7-htop-interactive-process-viewer","text":"Description : Provides an interactive and visual view of system processes and resource usage. Example : $ htop Opens an interactive interface showing CPU, memory usage, and running processes. Options : -u <username> : Show processes for a specific user. $ htop -u feilzz --sort-key : Sort by a specific column (e.g., %CPU ). $ htop --sort-key = %CPU","title":"7. htop - Interactive Process Viewer"},{"location":"Linux%20Commands/process-management/#8-pkill-kill-processes-by-name","text":"Description : Terminates processes based on their name. Example : $ pkill firefox Kills all processes with the name firefox . Options : -u <username> : Kill processes belonging to a specific user. $ pkill -u feilzz -signal : Specify a signal to send (e.g., SIGKILL ). $ pkill -9 firefox","title":"8. pkill - Kill Processes by Name"},{"location":"Linux%20Commands/process-management/#9-nice-set-process-priority","text":"Description : Launches a process with a specified priority level. Example : $ nice -n 10 myprogram Runs myprogram with a priority of 10 . Options : -n <priority> : Specify the priority level (-20 is the highest, 19 is the lowest). $ nice -n -5 myprogram","title":"9. nice - Set Process Priority"},{"location":"Linux%20Commands/process-management/#10-renice-change-process-priority","text":"Description : Changes the priority of a running process. Example : $ renice 5 -p 1234 Changes the priority of process 1234 to 5 . Options : -p <pid> : Specify the process ID. $ renice -10 -p 5678 -u <username> : Change priority for all processes of a user. $ renice 15 -u feilzz","title":"10. renice - Change Process Priority"},{"location":"Linux%20Commands/process-management/#11-uptime-show-system-uptime","text":"Description : Displays how long the system has been running along with load averages. Example : $ uptime Output: 09:45:12 up 1 day, 3:45, 2 users, load average: 0.00, 0.01, 0.05 Options : None specific, but it's often used in scripts to check system stability.","title":"11. uptime - Show System Uptime"},{"location":"Linux%20Commands/process-management/#12-watch-run-command-periodically","text":"Description : Executes a command repeatedly at a set interval, showing the output. Example : $ watch -n 2 df -h Runs df -h every 2 seconds, showing disk usage. Options : -n <seconds> : Set the interval in seconds. $ watch -n 5 ls -d : Highlight differences between updates. $ watch -d free","title":"12. watch - Run Command Periodically"},{"location":"Linux%20Commands/process-management/#usage-notes","text":"These commands are essential for monitoring, controlling, and managing processes on a Linux system. They provide both real-time and static views of process activity.","title":"Usage Notes"},{"location":"Linux%20Commands/text-processing/","text":"Text Processing Commands \u00b6 Overview \u00b6 Text processing commands in Linux are essential for manipulating and analyzing text files. These commands allow users to filter, extract, transform, and format text efficiently. Commands and Their Usage \u00b6 1. grep - Search for Patterns \u00b6 Description : Searches for specific patterns in a file or input stream. Examples : # Search for the word 'error' in a file $ grep 'error' logfile.txt # Search for a pattern recursively in all files in a directory $ grep -r 'error' /var/logs # Display line numbers with matches $ grep -n 'error' logfile.txt # Ignore case during search $ grep -i 'error' logfile.txt Options : -r : Recursive search. -i : Case-insensitive search. -n : Show line numbers. -v : Invert match (show lines that do not match). 2. sed - Stream Editor \u00b6 Description : Edits text in a stream or file line by line. Examples : # Replace 'old' with 'new' in a file $ sed 's/old/new/' file.txt # Replace globally in each line $ sed 's/old/new/g' file.txt # Delete lines containing 'error' $ sed '/error/d' file.txt # Edit file in-place $ sed -i 's/old/new/g' file.txt Options : -i : Edit file in-place. -e : Execute multiple commands. -n : Suppress automatic printing of pattern space. 3. awk - Pattern Scanning and Processing \u00b6 Description : Processes and analyzes text files based on patterns and fields. Examples : # Print the first column of a file $ awk '{print $1}' file.txt # Print lines where the second column equals 100 $ awk '$2 == 100' file.txt # Sum the values in the second column $ awk '{sum += $2} END {print sum}' file.txt # Use a custom delimiter $ awk -F: '{print $1}' /etc/passwd Options : -F : Specify field separator. -v : Assign a variable. -f : Read program from a file. 4. cut - Extract Specific Fields \u00b6 Description : Extracts specific columns or fields from a file or input stream. Examples : # Extract the first 10 characters of each line $ cut -c 1 -10 file.txt # Extract the second column using a tab delimiter $ cut -f2 file.txt # Use a custom delimiter (colon in this case) $ cut -d ':' -f1 /etc/passwd Options : -c : Extract specific characters. -f : Extract specific fields. -d : Specify delimiter. 5. sort - Sort Lines of Text \u00b6 Description : Sorts lines in text files based on specified criteria. Examples : # Sort a file alphabetically $ sort file.txt # Sort a file numerically $ sort -n file.txt # Sort in reverse order $ sort -r file.txt # Sort based on a specific column $ sort -k2 file.txt Options : -n : Numeric sort. -r : Reverse order. -k : Specify column. 6. uniq - Remove Duplicate Lines \u00b6 Description : Filters out duplicate lines in a file. Examples : # Remove duplicate lines (file must be sorted first) $ uniq file.txt # Show counts of duplicate lines $ uniq -c file.txt # Ignore case during comparison $ uniq -i file.txt Options : -c : Show counts of duplicates. -i : Ignore case. -d : Only show duplicate lines. 7. tr - Translate or Delete Characters \u00b6 Description : Translates or deletes characters in a stream. Examples : # Replace all lowercase letters with uppercase $ echo 'hello' | tr 'a-z' 'A-Z' # Delete all digits from input $ echo '123abc456' | tr -d '0-9' # Replace spaces with underscores $ echo 'hello world' | tr ' ' '_' Options : -d : Delete characters. -s : Squeeze repeated characters. 8. wc - Word, Line, and Character Count \u00b6 Description : Counts lines, words, and characters in a file. Examples : # Count lines $ wc -l file.txt # Count words $ wc -w file.txt # Count characters $ wc -c file.txt # Count all (lines, words, characters) $ wc file.txt Options : -l : Count lines. -w : Count words. -c : Count characters. Practice Examples \u00b6 Here are steps to practice text processing commands: Create a Sample Text File : echo -e \"line1: hello world\\nline2: linux commands\\nline3: text processing\" > sample.txt Practice with grep : # Find lines containing the word 'line' grep 'line' sample.txt # Find lines containing 'hello' ignoring case grep -i 'hello' sample.txt Practice with sed : # Replace 'hello' with 'hi' sed 's/hello/hi/' sample.txt # Delete lines containing 'linux' sed '/linux/d' sample.txt Practice with awk : # Print the first word of each line awk '{print $1}' sample.txt # Print lines where the second column is 'commands' awk '$2 == \"commands\"' sample.txt Practice with cut : # Extract the first 5 characters of each line cut -c 1 -5 sample.txt # Extract the second field using ':' as a delimiter cut -d ':' -f2 sample.txt Combine Commands : # Extract lines containing 'line', replace 'line' with 'Line', and save to a new file grep 'line' sample.txt | sed 's/line/Line/' > output.txt Summary \u00b6 These text processing commands are powerful tools for analyzing and manipulating text data in Linux. Mastering them can significantly improve your efficiency and capability when working with text files.","title":"Text Processing"},{"location":"Linux%20Commands/text-processing/#text-processing-commands","text":"","title":"Text Processing Commands"},{"location":"Linux%20Commands/text-processing/#overview","text":"Text processing commands in Linux are essential for manipulating and analyzing text files. These commands allow users to filter, extract, transform, and format text efficiently.","title":"Overview"},{"location":"Linux%20Commands/text-processing/#commands-and-their-usage","text":"","title":"Commands and Their Usage"},{"location":"Linux%20Commands/text-processing/#1-grep-search-for-patterns","text":"Description : Searches for specific patterns in a file or input stream. Examples : # Search for the word 'error' in a file $ grep 'error' logfile.txt # Search for a pattern recursively in all files in a directory $ grep -r 'error' /var/logs # Display line numbers with matches $ grep -n 'error' logfile.txt # Ignore case during search $ grep -i 'error' logfile.txt Options : -r : Recursive search. -i : Case-insensitive search. -n : Show line numbers. -v : Invert match (show lines that do not match).","title":"1. grep - Search for Patterns"},{"location":"Linux%20Commands/text-processing/#2-sed-stream-editor","text":"Description : Edits text in a stream or file line by line. Examples : # Replace 'old' with 'new' in a file $ sed 's/old/new/' file.txt # Replace globally in each line $ sed 's/old/new/g' file.txt # Delete lines containing 'error' $ sed '/error/d' file.txt # Edit file in-place $ sed -i 's/old/new/g' file.txt Options : -i : Edit file in-place. -e : Execute multiple commands. -n : Suppress automatic printing of pattern space.","title":"2. sed - Stream Editor"},{"location":"Linux%20Commands/text-processing/#3-awk-pattern-scanning-and-processing","text":"Description : Processes and analyzes text files based on patterns and fields. Examples : # Print the first column of a file $ awk '{print $1}' file.txt # Print lines where the second column equals 100 $ awk '$2 == 100' file.txt # Sum the values in the second column $ awk '{sum += $2} END {print sum}' file.txt # Use a custom delimiter $ awk -F: '{print $1}' /etc/passwd Options : -F : Specify field separator. -v : Assign a variable. -f : Read program from a file.","title":"3. awk - Pattern Scanning and Processing"},{"location":"Linux%20Commands/text-processing/#4-cut-extract-specific-fields","text":"Description : Extracts specific columns or fields from a file or input stream. Examples : # Extract the first 10 characters of each line $ cut -c 1 -10 file.txt # Extract the second column using a tab delimiter $ cut -f2 file.txt # Use a custom delimiter (colon in this case) $ cut -d ':' -f1 /etc/passwd Options : -c : Extract specific characters. -f : Extract specific fields. -d : Specify delimiter.","title":"4. cut - Extract Specific Fields"},{"location":"Linux%20Commands/text-processing/#5-sort-sort-lines-of-text","text":"Description : Sorts lines in text files based on specified criteria. Examples : # Sort a file alphabetically $ sort file.txt # Sort a file numerically $ sort -n file.txt # Sort in reverse order $ sort -r file.txt # Sort based on a specific column $ sort -k2 file.txt Options : -n : Numeric sort. -r : Reverse order. -k : Specify column.","title":"5. sort - Sort Lines of Text"},{"location":"Linux%20Commands/text-processing/#6-uniq-remove-duplicate-lines","text":"Description : Filters out duplicate lines in a file. Examples : # Remove duplicate lines (file must be sorted first) $ uniq file.txt # Show counts of duplicate lines $ uniq -c file.txt # Ignore case during comparison $ uniq -i file.txt Options : -c : Show counts of duplicates. -i : Ignore case. -d : Only show duplicate lines.","title":"6. uniq - Remove Duplicate Lines"},{"location":"Linux%20Commands/text-processing/#7-tr-translate-or-delete-characters","text":"Description : Translates or deletes characters in a stream. Examples : # Replace all lowercase letters with uppercase $ echo 'hello' | tr 'a-z' 'A-Z' # Delete all digits from input $ echo '123abc456' | tr -d '0-9' # Replace spaces with underscores $ echo 'hello world' | tr ' ' '_' Options : -d : Delete characters. -s : Squeeze repeated characters.","title":"7. tr - Translate or Delete Characters"},{"location":"Linux%20Commands/text-processing/#8-wc-word-line-and-character-count","text":"Description : Counts lines, words, and characters in a file. Examples : # Count lines $ wc -l file.txt # Count words $ wc -w file.txt # Count characters $ wc -c file.txt # Count all (lines, words, characters) $ wc file.txt Options : -l : Count lines. -w : Count words. -c : Count characters.","title":"8. wc - Word, Line, and Character Count"},{"location":"Linux%20Commands/text-processing/#practice-examples","text":"Here are steps to practice text processing commands: Create a Sample Text File : echo -e \"line1: hello world\\nline2: linux commands\\nline3: text processing\" > sample.txt Practice with grep : # Find lines containing the word 'line' grep 'line' sample.txt # Find lines containing 'hello' ignoring case grep -i 'hello' sample.txt Practice with sed : # Replace 'hello' with 'hi' sed 's/hello/hi/' sample.txt # Delete lines containing 'linux' sed '/linux/d' sample.txt Practice with awk : # Print the first word of each line awk '{print $1}' sample.txt # Print lines where the second column is 'commands' awk '$2 == \"commands\"' sample.txt Practice with cut : # Extract the first 5 characters of each line cut -c 1 -5 sample.txt # Extract the second field using ':' as a delimiter cut -d ':' -f2 sample.txt Combine Commands : # Extract lines containing 'line', replace 'line' with 'Line', and save to a new file grep 'line' sample.txt | sed 's/line/Line/' > output.txt","title":"Practice Examples"},{"location":"Linux%20Commands/text-processing/#summary","text":"These text processing commands are powerful tools for analyzing and manipulating text data in Linux. Mastering them can significantly improve your efficiency and capability when working with text files.","title":"Summary"},{"location":"NetWorking%20Concepts/dns/","text":"DNS (Domain Name System) \u00b6 DNS is a critical component of the internet that translates human-friendly domain names (like google.com ) into machine-readable IP addresses (like 172.217.16.238 ). Without DNS, users would have to remember IP addresses to access websites. How DNS Works \u00b6 User Query : When you enter a domain name in your browser, your computer contacts a DNS resolver (usually provided by your ISP) to resolve the domain name into an IP address. Response : The resolver returns the IP address to your device, which then connects to the server hosting the website. Key DNS Records \u00b6 A Record : Maps a domain to an IPv4 address. Example: google.com -> 172.217.16.238 AAAA Record : Maps a domain to an IPv6 address. CNAME Record : Alias for another domain. Example: www.example.com -> example.com MX Record : Specifies mail servers for a domain. PTR Record : Used for reverse DNS lookups (IP to domain). NS Record : Points to the authoritative name servers for a domain. Commands with Examples \u00b6 1. Check DNS Resolution \u00b6 Command : nslookup option 1: \u00b6 nslookup tablesmate.vercel.app Command Output: \u00b6 Server: 10 .255.255.254 Address: 10 .255.255.254#53 Non-authoritative answer: Name: tablesmate.vercel.app Address: 64 .29.17.65 Name: tablesmate.vercel.app Address: 216 .198.79.65 Name: tablesmate.vercel.app Address: 64 :ff9b::d8c6:4f41 Name: tablesmate.vercel.app Address: 64 :ff9b::401d:1141 - Server : Outputed Server IP associated with the server (here tablesmate.vercel.app) option 2: \u00b6 nslookup 216 .198.79.65 Command Output: \u00b6 65 .79.198.216.in-addr.arpa name = atl-cer1-755commercedr.cypresscom.net. - Name : The domain name associated with an IP.","title":"DNS"},{"location":"NetWorking%20Concepts/dns/#dns-domain-name-system","text":"DNS is a critical component of the internet that translates human-friendly domain names (like google.com ) into machine-readable IP addresses (like 172.217.16.238 ). Without DNS, users would have to remember IP addresses to access websites.","title":"DNS (Domain Name System)"},{"location":"NetWorking%20Concepts/dns/#how-dns-works","text":"User Query : When you enter a domain name in your browser, your computer contacts a DNS resolver (usually provided by your ISP) to resolve the domain name into an IP address. Response : The resolver returns the IP address to your device, which then connects to the server hosting the website.","title":"How DNS Works"},{"location":"NetWorking%20Concepts/dns/#key-dns-records","text":"A Record : Maps a domain to an IPv4 address. Example: google.com -> 172.217.16.238 AAAA Record : Maps a domain to an IPv6 address. CNAME Record : Alias for another domain. Example: www.example.com -> example.com MX Record : Specifies mail servers for a domain. PTR Record : Used for reverse DNS lookups (IP to domain). NS Record : Points to the authoritative name servers for a domain.","title":"Key DNS Records"},{"location":"NetWorking%20Concepts/dns/#commands-with-examples","text":"","title":"Commands with Examples"},{"location":"NetWorking%20Concepts/dns/#1-check-dns-resolution","text":"Command : nslookup","title":"1. Check DNS Resolution"},{"location":"NetWorking%20Concepts/dns/#option-1","text":"nslookup tablesmate.vercel.app","title":"option 1:"},{"location":"NetWorking%20Concepts/dns/#command-output","text":"Server: 10 .255.255.254 Address: 10 .255.255.254#53 Non-authoritative answer: Name: tablesmate.vercel.app Address: 64 .29.17.65 Name: tablesmate.vercel.app Address: 216 .198.79.65 Name: tablesmate.vercel.app Address: 64 :ff9b::d8c6:4f41 Name: tablesmate.vercel.app Address: 64 :ff9b::401d:1141 - Server : Outputed Server IP associated with the server (here tablesmate.vercel.app)","title":"Command Output:"},{"location":"NetWorking%20Concepts/dns/#option-2","text":"nslookup 216 .198.79.65","title":"option 2:"},{"location":"NetWorking%20Concepts/dns/#command-output_1","text":"65 .79.198.216.in-addr.arpa name = atl-cer1-755commercedr.cypresscom.net. - Name : The domain name associated with an IP.","title":"Command Output:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/","text":"Overview of FTP, SMTP, and TCP/IP Protocols \u00b6 FTP (File Transfer Protocol) \u00b6 What It Is: \u00b6 FTP is a protocol for transferring files between a client and a server on a network. It uses a client-server model and typically operates on ports 20 and 21. How It Works: \u00b6 A client establishes a connection with an FTP server. Files can be uploaded, downloaded, or manipulated on the server. It supports active and passive modes for data transfer. Use Cases: \u00b6 Website maintenance (uploading files to a web server). Sharing files across systems in a controlled environment. Commands and Examples: \u00b6 Connect to an FTP server: ftp ftp.example.com Prompts for username and password. Local Test: - Install an FTP server (e.g., FileZilla Server) on your system. - Start the server and use ftp 127.0.0.1 to connect locally. List files in the current directory on the server: ls Local Test: Ensure the FTP server directory contains files to test listing. Download a file from the server: get filename.txt Local Test: Place a file in the server directory and download it to your local system. Upload a file to the server: put localfile.txt Local Test: Use a local file and verify it appears in the FTP server directory after upload. Exit FTP: bye SMTP (Simple Mail Transfer Protocol) \u00b6 What It Is: \u00b6 SMTP is used to send emails across the internet. Operates on port 25 (default), 465 (secure), or 587 (submission). How It Works: \u00b6 The client sends an email to an SMTP server. The server forwards the email to the recipient's mail server. The recipient retrieves the email using protocols like POP3 or IMAP. Use Cases: \u00b6 Sending automated emails (notifications, alerts). Testing email server configurations. Commands and Examples: \u00b6 Test SMTP using telnet : telnet smtp.example.com 25 Opens a connection to the SMTP server. Local Test: - Install a mail server (e.g., Postfix or Sendmail) locally. - Use telnet 127.0.0.1 25 to connect to the local server. Send an email manually (example): HELO domain.com MAIL FROM: <sender@example.com> RCPT TO: <recipient@example.com> DATA Subject: Test Email This is a test email. . QUIT Local Test: Configure your local mail server to accept emails and verify that emails are logged or delivered. Check server response: Server responds with status codes like 250 (OK) or 550 (Error). Local Test: - Use logs from the local mail server to analyze responses. TCP/IP (Transmission Control Protocol/Internet Protocol) \u00b6 What It Is: \u00b6 TCP/IP is a suite of communication protocols used to connect devices on a network. TCP ensures reliable delivery, while IP handles addressing and routing. How It Works: \u00b6 TCP breaks data into packets and ensures they are delivered reliably. IP ensures packets are routed and addressed to the correct destination. Together, they form the backbone of internet communication. Use Cases: \u00b6 Ensuring reliable data transmission (e.g., web browsing, email). Network diagnostics and connectivity tests. Commands and Examples: \u00b6 Check if a port is open (using netcat ): nc -zv google.com 443 Tests if port 443 (HTTPS) on Google is reachable. Local Test: - Run a local server (e.g., Python's HTTP server) using: python -m http.server 808 - Check port connectivity using: nc -zv 127 .0.0.1 8080 Ping a server to check connectivity: ping example.com Local Test: Use ping 127.0.0.1 to test connectivity to your local system. View TCP/IP configuration: ifconfig ( Linux/macOS ) ipconfig ( Windows ) Local Test: Run the command to view network details of your local machine. Trace the route packets take to a server: traceroute example.com ( Linux/macOS ) tracert example.com ( Windows ) Local Test: Use traceroute 127.0.0.1 or tracert 127.0.0.1 to trace routes to your own system. Key Differences: \u00b6 Protocol Purpose Common Ports Tools/Commands FTP File transfers 20, 21 ftp , sftp , curl SMTP Sending emails 25, 465, 587 telnet , sendmail TCP/IP Data communication backbone Various ping , netcat These protocols form the foundation of internet and network communication. \u00b6","title":"FTP, SMTP & TCP"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#overview-of-ftp-smtp-and-tcpip-protocols","text":"","title":"Overview of FTP, SMTP, and TCP/IP Protocols"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#ftp-file-transfer-protocol","text":"","title":"FTP (File Transfer Protocol)"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#what-it-is","text":"FTP is a protocol for transferring files between a client and a server on a network. It uses a client-server model and typically operates on ports 20 and 21.","title":"What It Is:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#how-it-works","text":"A client establishes a connection with an FTP server. Files can be uploaded, downloaded, or manipulated on the server. It supports active and passive modes for data transfer.","title":"How It Works:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#use-cases","text":"Website maintenance (uploading files to a web server). Sharing files across systems in a controlled environment.","title":"Use Cases:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#commands-and-examples","text":"Connect to an FTP server: ftp ftp.example.com Prompts for username and password. Local Test: - Install an FTP server (e.g., FileZilla Server) on your system. - Start the server and use ftp 127.0.0.1 to connect locally. List files in the current directory on the server: ls Local Test: Ensure the FTP server directory contains files to test listing. Download a file from the server: get filename.txt Local Test: Place a file in the server directory and download it to your local system. Upload a file to the server: put localfile.txt Local Test: Use a local file and verify it appears in the FTP server directory after upload. Exit FTP: bye","title":"Commands and Examples:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#smtp-simple-mail-transfer-protocol","text":"","title":"SMTP (Simple Mail Transfer Protocol)"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#what-it-is_1","text":"SMTP is used to send emails across the internet. Operates on port 25 (default), 465 (secure), or 587 (submission).","title":"What It Is:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#how-it-works_1","text":"The client sends an email to an SMTP server. The server forwards the email to the recipient's mail server. The recipient retrieves the email using protocols like POP3 or IMAP.","title":"How It Works:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#use-cases_1","text":"Sending automated emails (notifications, alerts). Testing email server configurations.","title":"Use Cases:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#commands-and-examples_1","text":"Test SMTP using telnet : telnet smtp.example.com 25 Opens a connection to the SMTP server. Local Test: - Install a mail server (e.g., Postfix or Sendmail) locally. - Use telnet 127.0.0.1 25 to connect to the local server. Send an email manually (example): HELO domain.com MAIL FROM: <sender@example.com> RCPT TO: <recipient@example.com> DATA Subject: Test Email This is a test email. . QUIT Local Test: Configure your local mail server to accept emails and verify that emails are logged or delivered. Check server response: Server responds with status codes like 250 (OK) or 550 (Error). Local Test: - Use logs from the local mail server to analyze responses.","title":"Commands and Examples:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#tcpip-transmission-control-protocolinternet-protocol","text":"","title":"TCP/IP (Transmission Control Protocol/Internet Protocol)"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#what-it-is_2","text":"TCP/IP is a suite of communication protocols used to connect devices on a network. TCP ensures reliable delivery, while IP handles addressing and routing.","title":"What It Is:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#how-it-works_2","text":"TCP breaks data into packets and ensures they are delivered reliably. IP ensures packets are routed and addressed to the correct destination. Together, they form the backbone of internet communication.","title":"How It Works:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#use-cases_2","text":"Ensuring reliable data transmission (e.g., web browsing, email). Network diagnostics and connectivity tests.","title":"Use Cases:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#commands-and-examples_2","text":"Check if a port is open (using netcat ): nc -zv google.com 443 Tests if port 443 (HTTPS) on Google is reachable. Local Test: - Run a local server (e.g., Python's HTTP server) using: python -m http.server 808 - Check port connectivity using: nc -zv 127 .0.0.1 8080 Ping a server to check connectivity: ping example.com Local Test: Use ping 127.0.0.1 to test connectivity to your local system. View TCP/IP configuration: ifconfig ( Linux/macOS ) ipconfig ( Windows ) Local Test: Run the command to view network details of your local machine. Trace the route packets take to a server: traceroute example.com ( Linux/macOS ) tracert example.com ( Windows ) Local Test: Use traceroute 127.0.0.1 or tracert 127.0.0.1 to trace routes to your own system.","title":"Commands and Examples:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#key-differences","text":"Protocol Purpose Common Ports Tools/Commands FTP File transfers 20, 21 ftp , sftp , curl SMTP Sending emails 25, 465, 587 telnet , sendmail TCP/IP Data communication backbone Various ping , netcat","title":"Key Differences:"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#these-protocols-form-the-foundation-of-internet-and-network-communication","text":"","title":"These protocols form the foundation of internet and network communication."},{"location":"NetWorking%20Concepts/https%26http/","text":"HTTP vs HTTPS \u00b6 What is HTTP? \u00b6 HTTP (Hypertext Transfer Protocol) is the foundation of data communication on the web. It is used to transfer data like HTML pages, images, videos, and more between a web client (browser) and a server. How HTTP works: \u00b6 A client sends an HTTP request to a server. The server processes the request and sends back an HTTP response, usually containing the requested resource. HTTP is stateless , meaning each request-response pair is independent. Use Case: \u00b6 HTTP is typically used for accessing web pages or APIs where encryption is not required. What is HTTPS? \u00b6 HTTPS (Hypertext Transfer Protocol Secure) is an extension of HTTP with added security features. It encrypts the communication between the client and server using SSL/TLS . How HTTPS works: \u00b6 Adds a layer of encryption via SSL/TLS, ensuring that data exchanged is secure from eavesdropping or tampering. Verifies the authenticity of the server through an SSL certificate. Use Case: \u00b6 HTTPS is essential for secure communication, such as online banking, e-commerce, and protecting sensitive user data. Key Differences Between HTTP and HTTPS \u00b6 Feature HTTP HTTPS Security Unencrypted, prone to attacks Encrypted, secure communication Port 80 443 Certificate No SSL/TLS certificate needed Requires SSL/TLS certificate Performance Slightly faster Slightly slower due to encryption Example Commands and Outputs \u00b6 1. Fetching a Webpage (HTTP vs HTTPS) \u00b6 Command: curl http://example.com curl https://example.com Command Output: <html> <head><title>Example Domain</title></head> <body>...</body> </html> Output for both is same, in https what data is encrypted 2. Check SSL Certificate ( for HTTPS website) \u00b6 Command: openssl s_client -connect tablesmate.vercel.app:443 Output for above command contains certificate key, session id and various info for SSL Identification. 3. Analyze HTTPS header (HTTP vs HTTPS) \u00b6 Command: curl -I https://tablesmate.vercel.app Command Output: HTTP/2 200 accept-ranges: bytes access-control-allow-origin: * age: 435825 cache-control: public, max-age = 0 , must-revalidate content-disposition: inline content-type: text/html ; charset = utf-8 date: Thu, 26 Dec 2024 17 :18:24 GMT etag: \"51a5a44d4b8759e7ec7ba4b1f83addcc\" server: Vercel strict-transport-security: max-age = 63072000 ; includeSubDomains ; preload vary: RSC, Next-Router-State-Tree, Next-Router-Prefetch x-matched-path: / x-vercel-cache: HIT x-vercel-id: bom1::pnqb8-1735233504785-0cf1f8236a74 content-length: 20363 output for the above command is header for the website such as status code, server, cache-control etc.","title":"HTTPS & HTTP"},{"location":"NetWorking%20Concepts/https%26http/#http-vs-https","text":"","title":"HTTP vs HTTPS"},{"location":"NetWorking%20Concepts/https%26http/#what-is-http","text":"HTTP (Hypertext Transfer Protocol) is the foundation of data communication on the web. It is used to transfer data like HTML pages, images, videos, and more between a web client (browser) and a server.","title":"What is HTTP?"},{"location":"NetWorking%20Concepts/https%26http/#how-http-works","text":"A client sends an HTTP request to a server. The server processes the request and sends back an HTTP response, usually containing the requested resource. HTTP is stateless , meaning each request-response pair is independent.","title":"How HTTP works:"},{"location":"NetWorking%20Concepts/https%26http/#use-case","text":"HTTP is typically used for accessing web pages or APIs where encryption is not required.","title":"Use Case:"},{"location":"NetWorking%20Concepts/https%26http/#what-is-https","text":"HTTPS (Hypertext Transfer Protocol Secure) is an extension of HTTP with added security features. It encrypts the communication between the client and server using SSL/TLS .","title":"What is HTTPS?"},{"location":"NetWorking%20Concepts/https%26http/#how-https-works","text":"Adds a layer of encryption via SSL/TLS, ensuring that data exchanged is secure from eavesdropping or tampering. Verifies the authenticity of the server through an SSL certificate.","title":"How HTTPS works:"},{"location":"NetWorking%20Concepts/https%26http/#use-case_1","text":"HTTPS is essential for secure communication, such as online banking, e-commerce, and protecting sensitive user data.","title":"Use Case:"},{"location":"NetWorking%20Concepts/https%26http/#key-differences-between-http-and-https","text":"Feature HTTP HTTPS Security Unencrypted, prone to attacks Encrypted, secure communication Port 80 443 Certificate No SSL/TLS certificate needed Requires SSL/TLS certificate Performance Slightly faster Slightly slower due to encryption","title":"Key Differences Between HTTP and HTTPS"},{"location":"NetWorking%20Concepts/https%26http/#example-commands-and-outputs","text":"","title":"Example Commands and Outputs"},{"location":"NetWorking%20Concepts/https%26http/#1-fetching-a-webpage-http-vs-https","text":"Command: curl http://example.com curl https://example.com Command Output: <html> <head><title>Example Domain</title></head> <body>...</body> </html> Output for both is same, in https what data is encrypted","title":"1. Fetching a Webpage (HTTP vs HTTPS)"},{"location":"NetWorking%20Concepts/https%26http/#2-check-ssl-certificate-for-https-website","text":"Command: openssl s_client -connect tablesmate.vercel.app:443 Output for above command contains certificate key, session id and various info for SSL Identification.","title":"2. Check SSL Certificate ( for HTTPS website)"},{"location":"NetWorking%20Concepts/https%26http/#3-analyze-https-header-http-vs-https","text":"Command: curl -I https://tablesmate.vercel.app Command Output: HTTP/2 200 accept-ranges: bytes access-control-allow-origin: * age: 435825 cache-control: public, max-age = 0 , must-revalidate content-disposition: inline content-type: text/html ; charset = utf-8 date: Thu, 26 Dec 2024 17 :18:24 GMT etag: \"51a5a44d4b8759e7ec7ba4b1f83addcc\" server: Vercel strict-transport-security: max-age = 63072000 ; includeSubDomains ; preload vary: RSC, Next-Router-State-Tree, Next-Router-Prefetch x-matched-path: / x-vercel-cache: HIT x-vercel-id: bom1::pnqb8-1735233504785-0cf1f8236a74 content-length: 20363 output for the above command is header for the website such as status code, server, cache-control etc.","title":"3. Analyze HTTPS header (HTTP vs HTTPS)"},{"location":"NetWorking%20Concepts/ip_addressing/","text":"IP Addressing \u00b6 IPv4 (Internet Protocol version 4) \u00b6 Overview \u00b6 IPv4 is the fourth version of the Internet Protocol and is widely used for identifying devices on a network using a logical addressing system. It was first introduced in the 1980s and has been the backbone of the internet since its inception. Key Features \u00b6 Address Format : 32-bit address, represented in dotted-decimal format (e.g., 192.168.1.1 ). Provides approximately 4.3 billion unique addresses (2\u00b3\u00b2). Address Classes : Divided into five classes (A, B, C, D, E), with A, B, and C being commonly used for host identification. Example: Class A: 1.0.0.0 to 126.0.0.0 Class B: 128.0.0.0 to 191.255.0.0 Class C: 192.0.0.0 to 223.255.255.0 Subnetting : Allows dividing a network into smaller, manageable segments. Broadcast : IPv4 supports broadcast communication, sending data to all devices on a subnet. Challenges : Limited address space due to the explosion of internet-connected devices. Security vulnerabilities inherent in the protocol. IPv6 (Internet Protocol version 6) \u00b6 Overview \u00b6 IPv6 was developed as a successor to IPv4 to address its limitations, especially the exhaustion of IP addresses. Introduced in 1998, IPv6 provides a much larger address space and improved features. Key Features \u00b6 Address Format : 128-bit address, represented in hexadecimal colon-separated format (e.g., 2001:0db8:85a3:0000:0000:8a2e:0370:7334 ). Provides approximately 340 undecillion addresses (2\u00b9\u00b2\u2078), which is vastly larger than IPv4. No Classes : Does not use traditional address classes. Instead, it employs hierarchical addressing for efficient routing. Simplified Header : Designed with a simplified and efficient header compared to IPv4. Security : Built-in support for IPsec (Internet Protocol Security), making IPv6 inherently more secure. No Broadcast : Replaces broadcast communication with multicast and anycast, which are more efficient. Auto-Configuration : Supports both stateful (DHCPv6) and stateless (SLAAC) address auto-configuration. Compatibility : Includes mechanisms like dual-stack and tunneling to coexist with IPv4 during the transition period. Comparison: IPv4 vs. IPv6 \u00b6 Feature IPv4 IPv6 Address Size 32-bit 128-bit Address Format Decimal (e.g., 192.0.2.1) Hexadecimal (e.g., 2001:0db8::1) Address Space ~4.3 billion addresses ~340 undecillion addresses Security Optional (IPsec support) Mandatory (IPsec integration) Header Complexity More complex Simplified Broadcast Supported Replaced by multicast/anycast Auto-Configuration Limited Extensive support for auto-configuration Network Efficiency Less efficient Improved efficiency and routing Why IPv6? \u00b6 The rapid growth of the internet, IoT devices, and mobile networks necessitated a protocol that could handle billions of new devices. IPv6 offers scalability, better performance, and more robust security, making it the future of internet addressing. Despite IPv6's advantages, IPv4 remains widely used due to compatibility issues, the slow transition process, and the development of technologies like NAT (Network Address Translation) that prolong IPv4's usability. Command: ifconfig \u00b6 Usage \u00b6 ifconfig : Displays active network interfaces along with their IP addresses, subnet masks, and MAC addresses. ifconfig -a : Lists detailed information about all network interfaces, including inactive ones. Example Output \u00b6 eth0: flags = 4163 <UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 172 .24.240.76 netmask 255 .255.240.0 broadcast 172 .24.255.255 inet6 fe80::215:5dff:fe04:d5b0 prefixlen 64 scopeid 0x20<link> ether 00 :15:5d:04:d5:b0 txqueuelen 1000 ( Ethernet ) RX packets 15114 bytes 61383003 ( 61 .3 MB ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 11239 bytes 827892 ( 827 .8 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags = 73 <UP,LOOPBACK,RUNNING> mtu 65536 inet 127 .0.0.1 netmask 255 .0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10<host> loop txqueuelen 1000 ( Local Loopback ) RX packets 60 bytes 7052 ( 7 .0 KB ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 60 bytes 7052 ( 7 .0 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Key Components of ifconfig Output \u00b6 eth0 - Ethernet Interface: \u00b6 Flags : Indicates the interface state and capabilities. UP : The interface is active. BROADCAST : Supports broadcast of packets. RUNNING : The interface driver is operational. MULTICAST : Supports multicast communication. MTU (Maximum Transmission Unit) : Maximum size of packets (in bytes). Default is 1500. IPv4 Information \u00b6 inet : IPv4 address of the interface (e.g., 172.24.240.76 ). netmask : Subnet mask, indicating the size of the subnet. For example: 255.255.240.0 represents a 20-bit network and a 12-bit host (2^12 = 4096 IPs). Binary : 11111111.11111111.11110000.00000000 . broadcast : Address to broadcast packets to all devices on the subnet. IPv6 Information \u00b6 inet6 : IPv6 address of the interface (e.g., fe80::215:5dff:fe04:d5b0 ). prefixlen : Subnet size (e.g., 64 ). scopeid : Specifies the scope of the IPv6 address: link : Valid only on the same physical or logical link (e.g., fe80::/10 ). global : Valid across the entire IPv6 internet. MAC Address \u00b6 ether : MAC address of the interface (e.g., 00:15:5d:04:d5:b0 ). Transmission Queue \u00b6 txqueuelen : Length of the queue for outgoing packets. Packet Statistics \u00b6 RX packets 12445 bytes 50759954 ( 50 .7 MB ) : Number of packets ( 12445 ) and total data ( 50 .7 MB ) received by this interface. RX errors 0 dropped 0 overruns 0 frame 0 : Indicates no errors occurred during reception. TX packets 9490 bytes 699021 ( 699 .0 KB ) : Number of packets ( 9490 ) and total data ( 699 KB ) transmitted by this interface. TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 : Indicates no errors occurred during transmission. RX (Receive) \u00b6 Packets : Number of packets received. Bytes : Total data received. Errors, Drops, Overruns, Frame : Error statistics. TX (Transmit) \u00b6 Packets : Number of packets transmitted. Bytes : Total data transmitted. Errors, Drops, Overruns, Carrier, Collisions : Error statistics. lo - Loopback Interface: \u00b6 Used for internal communication within the system. Flags \u00b6 UP LOOPBACK RUNNING MTU (Maximum Transmission Unit): \u00b6 65536 (used internally) IPv4 Loopback: \u00b6 inet : 127.0.0.1 (commonly referred to as localhost.) Traffic sent here stays within the same machine. IPv6 Loopback: \u00b6 inet6 : ::1 (equivalent to 127.0.0.1 for IPv4) Packet Statistics: \u00b6 RX packets 48 bytes 5650 ( 5 .6 KB ) : Traffic received by the loopback interface. TX packets 48 bytes 5650 ( 5 .6 KB ) : Traffic sent over the loopback interface. - RX (Receive) : Traffic received by the loopback interface. - TX (Transmit) : Traffic sent over the loopback interface. No errors or dropped packets are reported, as expected for local traffic. Command: ping \u00b6 Usage Example: \u00b6 Test if a host is reachable. ping tablesmate.vercel.app Example Output: \u00b6 PING tablesmate.vercel.app ( 216 .198.79.65 ) 56 ( 84 ) bytes of data. 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 1 ttl = 241 time = 58 .0 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 2 ttl = 241 time = 54 .9 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 3 ttl = 241 time = 65 .1 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 4 ttl = 241 time = 54 .4 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 5 ttl = 241 time = 56 .8 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 6 ttl = 241 time = 72 .5 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 7 ttl = 241 time = 75 .1 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 8 ttl = 241 time = 65 .8 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 9 ttl = 241 time = 51 .4 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 10 ttl = 241 time = 51 .5 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 11 ttl = 241 time = 65 .1 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 12 ttl = 241 time = 44 .6 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 13 ttl = 241 time = 50 .7 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 14 ttl = 241 time = 83 .7 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 15 ttl = 241 time = 43 .2 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 16 ttl = 241 time = 68 .1 ms ^C --- tablesmate.vercel.app ping statistics --- 16 packets transmitted, 16 received, 0 % packet loss, time 15182ms rtt min/avg/max/mdev = 43 .209/60.052/83.673/10.957 ms Components of ping Output \u00b6 216.198.79.65 : Resolved IP of the domain. 56(84) bytes of data : Each ICMP packet contains 56 bytes of data, and the total packet size is 84 bytes (56 bytes of data + 28 bytes for headers). 64 bytes : Size of response packet. atl-cer1-755commercedr.cypresscom.net : The hostname corresponding to the IP address of the server (216.198.79.65). icmp_seq : The sequence number of ICMP packets (starts with 1 and increments). ttl : The Time-To-Live (TTL) value, indicating the maximum number of network hops the packet can take before being discarded. A TTL of 241 suggests the packet traversed several hops but is still within its initial limit. time : The round-trip time (RTT) for the packet, measured in milliseconds. This indicates how long it took for the packet to travel to the server and back. Summary: \u00b6 16 received : The total number of packets successfully received back from the server. 16 packets transmitted : The total number of ICMP packets sent to the server. 0% packet loss : Indicates no packets were lost, showing a reliable connection. time 15182ms : Total time taken to transmit and receive all packets. RTT Statistics: \u00b6 min : Minimum RTT recorded (43.209 ms). avg : Average RTT across all packets (60.052 ms). max : Maximum RTT recorded (83.673 ms). mdev : Mean deviation, indicating variability in RTT (10.957 ms). A lower value suggests more consistent latency. Command: traceroute \u00b6 Usage Example: \u00b6 Network diagnosis, shows the path that packets take to reach the destination. traceroute tablesmate.vercel.app Example Output: \u00b6 traceroute to tablesmate.vercel.app ( 64 .29.17.65 ) , 64 hops max 1 172 .24.240.1 0 .740ms 0 .357ms 0 .293ms 2 192 .168.28.246 13 .179ms 2 .941ms 2 .385ms 3 * * * 4 192 .168.173.209 31 .011ms 38 .245ms 22 .654ms 5 192 .168.203.1 28 .829ms 26 .160ms 28 .298ms 6 * * * 7 123 .63.198.92 74 .375ms 30 .335ms 28 .007ms 8 182 .19.106.103 31 .764ms 60 .714ms 29 .920ms 9 * * * 10 * * * | | | 64 * * * Elements in Traceroute: \u00b6 Hop Number : Each line starts with a hop number, indicating the sequential step in the route. IP Address : The IP address of the router or device at that hop. Round-Trip Times (RTT) : The time (in milliseconds) it takes for a packet to travel to that hop and back, displayed for three attempts. : Indicates that no response (ICMP packet) was received from that hop within the timeout period due to firewall (for security).","title":"IP Addressing"},{"location":"NetWorking%20Concepts/ip_addressing/#ip-addressing","text":"","title":"IP Addressing"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv4-internet-protocol-version-4","text":"","title":"IPv4 (Internet Protocol version 4)"},{"location":"NetWorking%20Concepts/ip_addressing/#overview","text":"IPv4 is the fourth version of the Internet Protocol and is widely used for identifying devices on a network using a logical addressing system. It was first introduced in the 1980s and has been the backbone of the internet since its inception.","title":"Overview"},{"location":"NetWorking%20Concepts/ip_addressing/#key-features","text":"Address Format : 32-bit address, represented in dotted-decimal format (e.g., 192.168.1.1 ). Provides approximately 4.3 billion unique addresses (2\u00b3\u00b2). Address Classes : Divided into five classes (A, B, C, D, E), with A, B, and C being commonly used for host identification. Example: Class A: 1.0.0.0 to 126.0.0.0 Class B: 128.0.0.0 to 191.255.0.0 Class C: 192.0.0.0 to 223.255.255.0 Subnetting : Allows dividing a network into smaller, manageable segments. Broadcast : IPv4 supports broadcast communication, sending data to all devices on a subnet. Challenges : Limited address space due to the explosion of internet-connected devices. Security vulnerabilities inherent in the protocol.","title":"Key Features"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv6-internet-protocol-version-6","text":"","title":"IPv6 (Internet Protocol version 6)"},{"location":"NetWorking%20Concepts/ip_addressing/#overview_1","text":"IPv6 was developed as a successor to IPv4 to address its limitations, especially the exhaustion of IP addresses. Introduced in 1998, IPv6 provides a much larger address space and improved features.","title":"Overview"},{"location":"NetWorking%20Concepts/ip_addressing/#key-features_1","text":"Address Format : 128-bit address, represented in hexadecimal colon-separated format (e.g., 2001:0db8:85a3:0000:0000:8a2e:0370:7334 ). Provides approximately 340 undecillion addresses (2\u00b9\u00b2\u2078), which is vastly larger than IPv4. No Classes : Does not use traditional address classes. Instead, it employs hierarchical addressing for efficient routing. Simplified Header : Designed with a simplified and efficient header compared to IPv4. Security : Built-in support for IPsec (Internet Protocol Security), making IPv6 inherently more secure. No Broadcast : Replaces broadcast communication with multicast and anycast, which are more efficient. Auto-Configuration : Supports both stateful (DHCPv6) and stateless (SLAAC) address auto-configuration. Compatibility : Includes mechanisms like dual-stack and tunneling to coexist with IPv4 during the transition period.","title":"Key Features"},{"location":"NetWorking%20Concepts/ip_addressing/#comparison-ipv4-vs-ipv6","text":"Feature IPv4 IPv6 Address Size 32-bit 128-bit Address Format Decimal (e.g., 192.0.2.1) Hexadecimal (e.g., 2001:0db8::1) Address Space ~4.3 billion addresses ~340 undecillion addresses Security Optional (IPsec support) Mandatory (IPsec integration) Header Complexity More complex Simplified Broadcast Supported Replaced by multicast/anycast Auto-Configuration Limited Extensive support for auto-configuration Network Efficiency Less efficient Improved efficiency and routing","title":"Comparison: IPv4 vs. IPv6"},{"location":"NetWorking%20Concepts/ip_addressing/#why-ipv6","text":"The rapid growth of the internet, IoT devices, and mobile networks necessitated a protocol that could handle billions of new devices. IPv6 offers scalability, better performance, and more robust security, making it the future of internet addressing. Despite IPv6's advantages, IPv4 remains widely used due to compatibility issues, the slow transition process, and the development of technologies like NAT (Network Address Translation) that prolong IPv4's usability.","title":"Why IPv6?"},{"location":"NetWorking%20Concepts/ip_addressing/#command-ifconfig","text":"","title":"Command: ifconfig"},{"location":"NetWorking%20Concepts/ip_addressing/#usage","text":"ifconfig : Displays active network interfaces along with their IP addresses, subnet masks, and MAC addresses. ifconfig -a : Lists detailed information about all network interfaces, including inactive ones.","title":"Usage"},{"location":"NetWorking%20Concepts/ip_addressing/#example-output","text":"eth0: flags = 4163 <UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 172 .24.240.76 netmask 255 .255.240.0 broadcast 172 .24.255.255 inet6 fe80::215:5dff:fe04:d5b0 prefixlen 64 scopeid 0x20<link> ether 00 :15:5d:04:d5:b0 txqueuelen 1000 ( Ethernet ) RX packets 15114 bytes 61383003 ( 61 .3 MB ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 11239 bytes 827892 ( 827 .8 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags = 73 <UP,LOOPBACK,RUNNING> mtu 65536 inet 127 .0.0.1 netmask 255 .0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10<host> loop txqueuelen 1000 ( Local Loopback ) RX packets 60 bytes 7052 ( 7 .0 KB ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 60 bytes 7052 ( 7 .0 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0","title":"Example Output"},{"location":"NetWorking%20Concepts/ip_addressing/#key-components-of-ifconfig-output","text":"","title":"Key Components of ifconfig Output"},{"location":"NetWorking%20Concepts/ip_addressing/#eth0-ethernet-interface","text":"Flags : Indicates the interface state and capabilities. UP : The interface is active. BROADCAST : Supports broadcast of packets. RUNNING : The interface driver is operational. MULTICAST : Supports multicast communication. MTU (Maximum Transmission Unit) : Maximum size of packets (in bytes). Default is 1500.","title":"eth0 - Ethernet Interface:"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv4-information","text":"inet : IPv4 address of the interface (e.g., 172.24.240.76 ). netmask : Subnet mask, indicating the size of the subnet. For example: 255.255.240.0 represents a 20-bit network and a 12-bit host (2^12 = 4096 IPs). Binary : 11111111.11111111.11110000.00000000 . broadcast : Address to broadcast packets to all devices on the subnet.","title":"IPv4 Information"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv6-information","text":"inet6 : IPv6 address of the interface (e.g., fe80::215:5dff:fe04:d5b0 ). prefixlen : Subnet size (e.g., 64 ). scopeid : Specifies the scope of the IPv6 address: link : Valid only on the same physical or logical link (e.g., fe80::/10 ). global : Valid across the entire IPv6 internet.","title":"IPv6 Information"},{"location":"NetWorking%20Concepts/ip_addressing/#mac-address","text":"ether : MAC address of the interface (e.g., 00:15:5d:04:d5:b0 ).","title":"MAC Address"},{"location":"NetWorking%20Concepts/ip_addressing/#transmission-queue","text":"txqueuelen : Length of the queue for outgoing packets.","title":"Transmission Queue"},{"location":"NetWorking%20Concepts/ip_addressing/#packet-statistics","text":"RX packets 12445 bytes 50759954 ( 50 .7 MB ) : Number of packets ( 12445 ) and total data ( 50 .7 MB ) received by this interface. RX errors 0 dropped 0 overruns 0 frame 0 : Indicates no errors occurred during reception. TX packets 9490 bytes 699021 ( 699 .0 KB ) : Number of packets ( 9490 ) and total data ( 699 KB ) transmitted by this interface. TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 : Indicates no errors occurred during transmission.","title":"Packet Statistics"},{"location":"NetWorking%20Concepts/ip_addressing/#rx-receive","text":"Packets : Number of packets received. Bytes : Total data received. Errors, Drops, Overruns, Frame : Error statistics.","title":"RX (Receive)"},{"location":"NetWorking%20Concepts/ip_addressing/#tx-transmit","text":"Packets : Number of packets transmitted. Bytes : Total data transmitted. Errors, Drops, Overruns, Carrier, Collisions : Error statistics.","title":"TX (Transmit)"},{"location":"NetWorking%20Concepts/ip_addressing/#lo-loopback-interface","text":"Used for internal communication within the system.","title":"lo - Loopback Interface:"},{"location":"NetWorking%20Concepts/ip_addressing/#flags","text":"UP LOOPBACK RUNNING","title":"Flags"},{"location":"NetWorking%20Concepts/ip_addressing/#mtu-maximum-transmission-unit","text":"65536 (used internally)","title":"MTU (Maximum Transmission Unit):"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv4-loopback","text":"inet : 127.0.0.1 (commonly referred to as localhost.) Traffic sent here stays within the same machine.","title":"IPv4 Loopback:"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv6-loopback","text":"inet6 : ::1 (equivalent to 127.0.0.1 for IPv4)","title":"IPv6 Loopback:"},{"location":"NetWorking%20Concepts/ip_addressing/#packet-statistics_1","text":"RX packets 48 bytes 5650 ( 5 .6 KB ) : Traffic received by the loopback interface. TX packets 48 bytes 5650 ( 5 .6 KB ) : Traffic sent over the loopback interface. - RX (Receive) : Traffic received by the loopback interface. - TX (Transmit) : Traffic sent over the loopback interface. No errors or dropped packets are reported, as expected for local traffic.","title":"Packet Statistics:"},{"location":"NetWorking%20Concepts/ip_addressing/#command-ping","text":"","title":"Command: ping"},{"location":"NetWorking%20Concepts/ip_addressing/#usage-example","text":"Test if a host is reachable. ping tablesmate.vercel.app","title":"Usage Example:"},{"location":"NetWorking%20Concepts/ip_addressing/#example-output_1","text":"PING tablesmate.vercel.app ( 216 .198.79.65 ) 56 ( 84 ) bytes of data. 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 1 ttl = 241 time = 58 .0 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 2 ttl = 241 time = 54 .9 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 3 ttl = 241 time = 65 .1 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 4 ttl = 241 time = 54 .4 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 5 ttl = 241 time = 56 .8 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 6 ttl = 241 time = 72 .5 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 7 ttl = 241 time = 75 .1 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 8 ttl = 241 time = 65 .8 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 9 ttl = 241 time = 51 .4 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 10 ttl = 241 time = 51 .5 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 11 ttl = 241 time = 65 .1 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 12 ttl = 241 time = 44 .6 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 13 ttl = 241 time = 50 .7 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 14 ttl = 241 time = 83 .7 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 15 ttl = 241 time = 43 .2 ms 64 bytes from atl-cer1-755commercedr.cypresscom.net ( 216 .198.79.65 ) : icmp_seq = 16 ttl = 241 time = 68 .1 ms ^C --- tablesmate.vercel.app ping statistics --- 16 packets transmitted, 16 received, 0 % packet loss, time 15182ms rtt min/avg/max/mdev = 43 .209/60.052/83.673/10.957 ms","title":"Example Output:"},{"location":"NetWorking%20Concepts/ip_addressing/#components-of-ping-output","text":"216.198.79.65 : Resolved IP of the domain. 56(84) bytes of data : Each ICMP packet contains 56 bytes of data, and the total packet size is 84 bytes (56 bytes of data + 28 bytes for headers). 64 bytes : Size of response packet. atl-cer1-755commercedr.cypresscom.net : The hostname corresponding to the IP address of the server (216.198.79.65). icmp_seq : The sequence number of ICMP packets (starts with 1 and increments). ttl : The Time-To-Live (TTL) value, indicating the maximum number of network hops the packet can take before being discarded. A TTL of 241 suggests the packet traversed several hops but is still within its initial limit. time : The round-trip time (RTT) for the packet, measured in milliseconds. This indicates how long it took for the packet to travel to the server and back.","title":"Components of ping Output"},{"location":"NetWorking%20Concepts/ip_addressing/#summary","text":"16 received : The total number of packets successfully received back from the server. 16 packets transmitted : The total number of ICMP packets sent to the server. 0% packet loss : Indicates no packets were lost, showing a reliable connection. time 15182ms : Total time taken to transmit and receive all packets.","title":"Summary:"},{"location":"NetWorking%20Concepts/ip_addressing/#rtt-statistics","text":"min : Minimum RTT recorded (43.209 ms). avg : Average RTT across all packets (60.052 ms). max : Maximum RTT recorded (83.673 ms). mdev : Mean deviation, indicating variability in RTT (10.957 ms). A lower value suggests more consistent latency.","title":"RTT Statistics:"},{"location":"NetWorking%20Concepts/ip_addressing/#command-traceroute","text":"","title":"Command: traceroute"},{"location":"NetWorking%20Concepts/ip_addressing/#usage-example_1","text":"Network diagnosis, shows the path that packets take to reach the destination. traceroute tablesmate.vercel.app","title":"Usage Example:"},{"location":"NetWorking%20Concepts/ip_addressing/#example-output_2","text":"traceroute to tablesmate.vercel.app ( 64 .29.17.65 ) , 64 hops max 1 172 .24.240.1 0 .740ms 0 .357ms 0 .293ms 2 192 .168.28.246 13 .179ms 2 .941ms 2 .385ms 3 * * * 4 192 .168.173.209 31 .011ms 38 .245ms 22 .654ms 5 192 .168.203.1 28 .829ms 26 .160ms 28 .298ms 6 * * * 7 123 .63.198.92 74 .375ms 30 .335ms 28 .007ms 8 182 .19.106.103 31 .764ms 60 .714ms 29 .920ms 9 * * * 10 * * * | | | 64 * * *","title":"Example Output:"},{"location":"NetWorking%20Concepts/ip_addressing/#elements-in-traceroute","text":"Hop Number : Each line starts with a hop number, indicating the sequential step in the route. IP Address : The IP address of the router or device at that hop. Round-Trip Times (RTT) : The time (in milliseconds) it takes for a packet to travel to that hop and back, displayed for three attempts. : Indicates that no response (ICMP packet) was received from that hop within the timeout period due to firewall (for security).","title":"Elements in Traceroute:"},{"location":"NetWorking%20Concepts/subnetting/","text":"Subnetting: Commands and Examples \u00b6 Understanding Subnetting \u00b6 What is Subnetting? \u00b6 Subnetting is the process of dividing a larger network (or IP address block) into smaller, more manageable sub-networks, known as subnets. This is done to improve network performance, enhance security, and better utilize IP address space. Why Subnetting is Needed? \u00b6 Efficient IP Address Utilization : Prevents wastage of IP addresses. Improved Performance : Reduces network congestion by limiting the size of broadcast domains. Enhanced Security : Isolates subnets, ensuring only specific communication is allowed. Simplifies Management : Makes it easier to manage a large network. How Does Subnetting Work? \u00b6 Divide the Network : Use subnet masks to split an IP range into smaller subnets. Assign IPs : Allocate IP addresses to devices within each subnet. Route Traffic : Configure routers to handle communication between subnets. Subnet Mask : Defines which portion of an IP address is the network ID and which part is the host ID. Example: For 192.168.1.0/24 , the subnet mask is 255.255.255.0 , meaning the first 24 bits are the network portion, and the last 8 bits are for host addresses. CIDR Notation : /24 represents the subnet mask's bit length. Dividing a Network : Network divided into Network address, broadcast address, host address. Network Address : Identifies the subnet. Broadcast Address : Used to send messages to all hosts in a subnet. Host Addresses : Usable IPs for devices. Impact of Subnetting on a Network \u00b6 Limits the number of devices per subnet. Helps segregate traffic, improving speed and security. Requires routers to manage communication between subnets. Setting Up a Subnet \u00b6 1. Planning Subnets \u00b6 Suppose you have 192.168.1.0/24 and need: - 2 subnets for 50 devices each. - 1 subnet for 20 devices. Subnet Required Hosts Subnet Mask Network Address Broadcast Address Host Range A 50 255.255.255.192 (/26) 192.168.1.0 192.168.1.63 192.168.1.1 - 192.168.1.62 B 50 255.255.255.192 (/26) 192.168.1.64 192.168.1.127 192.168.1.65 - 192.168.1.126 C 20 255.255.255.224 (/27) 192.168.1.128 192.168.1.159 192.168.1.129 - 192.168.1.158 Commands Related to Subnetting \u00b6 1. Calculate Subnets \u00b6 Use tools to calculate subnets for an IP range. Example: \u00b6 ipcalc 192 .168.1.0/24 Output: Address: 192.168.1.0 11000000.10101000.00000001. 00000000 Netmask: 255.255.255.0 = 24 11111111.11111111.11111111. 00000000 Wildcard: 0.0.0.255 00000000.00000000.00000000. 11111111 => Network: 192.168.1.0/24 11000000.10101000.00000001. 00000000 HostMin: 192.168.1.1 11000000.10101000.00000001. 00000001 HostMax: 192.168.1.254 11000000.10101000.00000001. 11111110 Broadcast: 192.168.1.255 11000000.10101000.00000001. 11111111 Hosts/Net: 254 Class C 2. Add a Static Route \u00b6 To enable communication between subnets: Example: \u00b6 sudo route add -net 192 .168.2.0/24 gw 192 .168.1.1 This adds a route for the 192.168.2.0/24 subnet through gateway 192.168.1.1 . 3. View Network Information \u00b6 To view routing table and network configuration: Example: \u00b6 ip route Output: 192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.1 192.168.2.0/24 via 192.168.1.1 dev eth0 4. Enable IP Forwarding \u00b6 Enable a Linux machine to act as a router: Example: \u00b6 echo 1 > /proc/sys/net/ipv4/ip_forward 5. Test Subnet Mask \u00b6 To verify the subnet mask of a network interface: Example: \u00b6 ifconfig | grep \"Mask\" Output: inet addr:192.168.1.2 Bcast:192.168.1.255 Mask:255.255.255.0 6. Test Connectivity \u00b6 Verifies communication with a device in another subnet. ping -c 4 192 .168.2.1 Output: PING 192.168.2.1 (192.168.2.1) 56(84) bytes of data. 64 bytes from 192.168.2.1: icmp_seq=1 ttl=64 time=0.032 ms Real-Life Subnetting Example: Two Networks with 20 Computers Each \u00b6 Scenario \u00b6 You have two networks , each with 20 computers , connected to the same router . Subnetting is required to organize and manage these networks. Step-by-Step Solution \u00b6 Step 1: Define Requirements \u00b6 Hosts per Network : 20 devices + some buffer (e.g., printers or future devices). Plan for 30 hosts per network. Number of Networks : 2. Step 2: Choose an IP Range \u00b6 Suppose the router is assigned the IP range 192.168.1.0/24 (256 IPs). Step 3: Subnet the Range \u00b6 To accommodate two networks: - Required hosts per subnet: 30 . - Subnet size: /27 (32 IPs per subnet). Subnet ID Network Address Subnet Mask Host Range Broadcast Address Subnet 1 192.168.1.0 255.255.255.224 192.168.1.1-192.168.1.30 192.168.1.31 Subnet 2 192.168.1.32 255.255.255.224 192.168.1.33-192.168.1.62 192.168.1.63 Step 4: Assign IPs \u00b6 Subnet 1 : Router IP: 192.168.1.1 . Computers: 192.168.1.2 to 192.168.1.30 . Subnet 2 : Router IP: 192.168.1.33 . Computers: 192.168.1.34 to 192.168.1.62 . Step 5: Configure the Router \u00b6 To enable communication between subnets: - Add static routes: route add -net 192 .168.1.32/27 gw 192 .168.1.1 route add -net 192 .168.1.0/27 gw 192 .168.1.33 - Enable IP forwarding: echo 1 > /proc/sys/net/ipv4/ip_forward Step 6: Test Connectivity \u00b6 Ping between subnets: ping 192 .168.1.34 Verify routing table: ip route Key Takeaways \u00b6 Subnetting isolates traffic and improves performance. The router acts as a gateway between subnets. Proper subnet masks and static routes ensure seamless communication.","title":"Subnetting"},{"location":"NetWorking%20Concepts/subnetting/#subnetting-commands-and-examples","text":"","title":"Subnetting: Commands and Examples"},{"location":"NetWorking%20Concepts/subnetting/#understanding-subnetting","text":"","title":"Understanding Subnetting"},{"location":"NetWorking%20Concepts/subnetting/#what-is-subnetting","text":"Subnetting is the process of dividing a larger network (or IP address block) into smaller, more manageable sub-networks, known as subnets. This is done to improve network performance, enhance security, and better utilize IP address space.","title":"What is Subnetting?"},{"location":"NetWorking%20Concepts/subnetting/#why-subnetting-is-needed","text":"Efficient IP Address Utilization : Prevents wastage of IP addresses. Improved Performance : Reduces network congestion by limiting the size of broadcast domains. Enhanced Security : Isolates subnets, ensuring only specific communication is allowed. Simplifies Management : Makes it easier to manage a large network.","title":"Why Subnetting is Needed?"},{"location":"NetWorking%20Concepts/subnetting/#how-does-subnetting-work","text":"Divide the Network : Use subnet masks to split an IP range into smaller subnets. Assign IPs : Allocate IP addresses to devices within each subnet. Route Traffic : Configure routers to handle communication between subnets. Subnet Mask : Defines which portion of an IP address is the network ID and which part is the host ID. Example: For 192.168.1.0/24 , the subnet mask is 255.255.255.0 , meaning the first 24 bits are the network portion, and the last 8 bits are for host addresses. CIDR Notation : /24 represents the subnet mask's bit length. Dividing a Network : Network divided into Network address, broadcast address, host address. Network Address : Identifies the subnet. Broadcast Address : Used to send messages to all hosts in a subnet. Host Addresses : Usable IPs for devices.","title":"How Does Subnetting Work?"},{"location":"NetWorking%20Concepts/subnetting/#impact-of-subnetting-on-a-network","text":"Limits the number of devices per subnet. Helps segregate traffic, improving speed and security. Requires routers to manage communication between subnets.","title":"Impact of Subnetting on a Network"},{"location":"NetWorking%20Concepts/subnetting/#setting-up-a-subnet","text":"","title":"Setting Up a Subnet"},{"location":"NetWorking%20Concepts/subnetting/#1-planning-subnets","text":"Suppose you have 192.168.1.0/24 and need: - 2 subnets for 50 devices each. - 1 subnet for 20 devices. Subnet Required Hosts Subnet Mask Network Address Broadcast Address Host Range A 50 255.255.255.192 (/26) 192.168.1.0 192.168.1.63 192.168.1.1 - 192.168.1.62 B 50 255.255.255.192 (/26) 192.168.1.64 192.168.1.127 192.168.1.65 - 192.168.1.126 C 20 255.255.255.224 (/27) 192.168.1.128 192.168.1.159 192.168.1.129 - 192.168.1.158","title":"1. Planning Subnets"},{"location":"NetWorking%20Concepts/subnetting/#commands-related-to-subnetting","text":"","title":"Commands Related to Subnetting"},{"location":"NetWorking%20Concepts/subnetting/#1-calculate-subnets","text":"Use tools to calculate subnets for an IP range.","title":"1. Calculate Subnets"},{"location":"NetWorking%20Concepts/subnetting/#example","text":"ipcalc 192 .168.1.0/24 Output: Address: 192.168.1.0 11000000.10101000.00000001. 00000000 Netmask: 255.255.255.0 = 24 11111111.11111111.11111111. 00000000 Wildcard: 0.0.0.255 00000000.00000000.00000000. 11111111 => Network: 192.168.1.0/24 11000000.10101000.00000001. 00000000 HostMin: 192.168.1.1 11000000.10101000.00000001. 00000001 HostMax: 192.168.1.254 11000000.10101000.00000001. 11111110 Broadcast: 192.168.1.255 11000000.10101000.00000001. 11111111 Hosts/Net: 254 Class C","title":"Example:"},{"location":"NetWorking%20Concepts/subnetting/#2-add-a-static-route","text":"To enable communication between subnets:","title":"2. Add a Static Route"},{"location":"NetWorking%20Concepts/subnetting/#example_1","text":"sudo route add -net 192 .168.2.0/24 gw 192 .168.1.1 This adds a route for the 192.168.2.0/24 subnet through gateway 192.168.1.1 .","title":"Example:"},{"location":"NetWorking%20Concepts/subnetting/#3-view-network-information","text":"To view routing table and network configuration:","title":"3. View Network Information"},{"location":"NetWorking%20Concepts/subnetting/#example_2","text":"ip route Output: 192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.1 192.168.2.0/24 via 192.168.1.1 dev eth0","title":"Example:"},{"location":"NetWorking%20Concepts/subnetting/#4-enable-ip-forwarding","text":"Enable a Linux machine to act as a router:","title":"4. Enable IP Forwarding"},{"location":"NetWorking%20Concepts/subnetting/#example_3","text":"echo 1 > /proc/sys/net/ipv4/ip_forward","title":"Example:"},{"location":"NetWorking%20Concepts/subnetting/#5-test-subnet-mask","text":"To verify the subnet mask of a network interface:","title":"5. Test Subnet Mask"},{"location":"NetWorking%20Concepts/subnetting/#example_4","text":"ifconfig | grep \"Mask\" Output: inet addr:192.168.1.2 Bcast:192.168.1.255 Mask:255.255.255.0","title":"Example:"},{"location":"NetWorking%20Concepts/subnetting/#6-test-connectivity","text":"Verifies communication with a device in another subnet. ping -c 4 192 .168.2.1 Output: PING 192.168.2.1 (192.168.2.1) 56(84) bytes of data. 64 bytes from 192.168.2.1: icmp_seq=1 ttl=64 time=0.032 ms","title":"6. Test Connectivity"},{"location":"NetWorking%20Concepts/subnetting/#real-life-subnetting-example-two-networks-with-20-computers-each","text":"","title":"Real-Life Subnetting Example: Two Networks with 20 Computers Each"},{"location":"NetWorking%20Concepts/subnetting/#scenario","text":"You have two networks , each with 20 computers , connected to the same router . Subnetting is required to organize and manage these networks.","title":"Scenario"},{"location":"NetWorking%20Concepts/subnetting/#step-by-step-solution","text":"","title":"Step-by-Step Solution"},{"location":"NetWorking%20Concepts/subnetting/#step-1-define-requirements","text":"Hosts per Network : 20 devices + some buffer (e.g., printers or future devices). Plan for 30 hosts per network. Number of Networks : 2.","title":"Step 1: Define Requirements"},{"location":"NetWorking%20Concepts/subnetting/#step-2-choose-an-ip-range","text":"Suppose the router is assigned the IP range 192.168.1.0/24 (256 IPs).","title":"Step 2: Choose an IP Range"},{"location":"NetWorking%20Concepts/subnetting/#step-3-subnet-the-range","text":"To accommodate two networks: - Required hosts per subnet: 30 . - Subnet size: /27 (32 IPs per subnet). Subnet ID Network Address Subnet Mask Host Range Broadcast Address Subnet 1 192.168.1.0 255.255.255.224 192.168.1.1-192.168.1.30 192.168.1.31 Subnet 2 192.168.1.32 255.255.255.224 192.168.1.33-192.168.1.62 192.168.1.63","title":"Step 3: Subnet the Range"},{"location":"NetWorking%20Concepts/subnetting/#step-4-assign-ips","text":"Subnet 1 : Router IP: 192.168.1.1 . Computers: 192.168.1.2 to 192.168.1.30 . Subnet 2 : Router IP: 192.168.1.33 . Computers: 192.168.1.34 to 192.168.1.62 .","title":"Step 4: Assign IPs"},{"location":"NetWorking%20Concepts/subnetting/#step-5-configure-the-router","text":"To enable communication between subnets: - Add static routes: route add -net 192 .168.1.32/27 gw 192 .168.1.1 route add -net 192 .168.1.0/27 gw 192 .168.1.33 - Enable IP forwarding: echo 1 > /proc/sys/net/ipv4/ip_forward","title":"Step 5: Configure the Router"},{"location":"NetWorking%20Concepts/subnetting/#step-6-test-connectivity","text":"Ping between subnets: ping 192 .168.1.34 Verify routing table: ip route","title":"Step 6: Test Connectivity"},{"location":"NetWorking%20Concepts/subnetting/#key-takeaways","text":"Subnetting isolates traffic and improves performance. The router acts as a gateway between subnets. Proper subnet masks and static routes ensure seamless communication.","title":"Key Takeaways"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/","text":"VPN Overview \u00b6 What is VPN? \u00b6 A Virtual Private Network (VPN) creates a secure, encrypted connection between your device and a remote server. VPNs are commonly used for: Securing data transmission over public networks. Accessing region-restricted services. Hiding your IP address to enhance privacy. Common VPN Commands and Examples \u00b6 1. OpenVPN Connection \u00b6 sudo openvpn --config myvpn.ovpn Use Case: Connect to a VPN using an OpenVPN configuration file. 2. Check VPN Status \u00b6 nmcli connection show Use Case: Display active network connections, including VPN. 3. Disconnect VPN \u00b6 nmcli connection down <vpn_name> Use Case: Terminate the VPN connection. Best Practices \u00b6 Use strong authentication methods (e.g., certificates). Avoid public VPN services for sensitive tasks. Regularly update VPN client software. SSH Overview \u00b6 What is SSH? \u00b6 Secure Shell (SSH) is a cryptographic network protocol for secure communication over an insecure network. It is commonly used for: Remote server administration. Secure file transfers. Port forwarding. Common SSH Commands and Examples \u00b6 1. SSH to Remote Server \u00b6 ssh user@host Use Case: Connect to a remote server using the specified username and host. 2. Copy Files Securely Using SCP \u00b6 scp file.txt user@host:/path/ scp user@host:/path/file.txt . Use Case: Upload or download files securely to/from a remote server. 3. Generate SSH Key \u00b6 ssh-keygen -t rsa -b 2048 Use Case: Create an RSA key pair for passwordless authentication. 4. Copy SSH Key to Remote Server \u00b6 ssh-copy-id user@host Use Case: Enable passwordless SSH login to a remote server. 5. SSH Port Forwarding \u00b6 ssh -L 8080 :localhost:80 user@host Use Case: Forward a local port (8080) to a remote port (80) via SSH. 6. Execute Command on Remote Server \u00b6 ssh user@host \"ls -la\" Use Case: Run a command remotely without starting an interactive shell. Best Practices \u00b6 Use SSH keys instead of passwords. Restrict SSH access to specific IPs. Disable root login and use non-default ports. Advanced Use Cases \u00b6 VPN with WireGuard \u00b6 sudo wg-quick up wg0 Use Case: Activate a WireGuard VPN interface. SSH Tunneling for Proxying \u00b6 ssh -D 9050 user@host Use Case: Set up a dynamic SOCKS proxy through an SSH connection. Securely Sync Directories with rsync over SSH \u00b6 rsync -avz -e ssh /local/path/ user@host:/remote/path/ Use Case: Synchronize directories between a local and remote machine. Firewall Overview \u00b6 What is a Firewall? \u00b6 A firewall is a network security device or software designed to monitor and control incoming and outgoing traffic based on predefined security rules. Firewalls are commonly used to: Protect systems from unauthorized access. Control traffic flow within and across networks. Prevent malicious attacks and data breaches. Types of Firewalls \u00b6 Network Firewalls: Protect an entire network. Host-Based Firewalls: Installed on individual devices. Cloud Firewalls: Protect cloud-based infrastructure. Common Firewall Commands and Examples \u00b6 1. List Active Rules \u00b6 sudo ufw status sudo iptables -L Use Case: Check active firewall rules. 2. Allow Traffic on a Port \u00b6 sudo ufw allow 22 /tcp Use Case: Enable SSH access. 3. Block Traffic on a Port \u00b6 sudo ufw deny 80 /tcp Use Case: Block HTTP access. 4. Enable Firewall \u00b6 sudo ufw enable Use Case: Activate the firewall to enforce security policies. 5. Log Firewall Activity \u00b6 sudo iptables -A INPUT -j LOG Use Case: Monitor traffic for analysis and debugging. 6. Delete a Rule \u00b6 sudo ufw delete allow 22 /tcp Use Case: Remove an existing rule. Advanced Use Cases \u00b6 Temporary Block Using iptables \u00b6 sudo iptables -I INPUT -s 192 .168.1.100 -j DROP Use Case: Temporarily block traffic from a specific IP address. Open Multiple Ports \u00b6 sudo ufw allow 443 ,80/tcp Use Case: Allow HTTPS and HTTP traffic. Rate Limiting with UFW \u00b6 sudo ufw limit 22 /tcp Use Case: Protect against brute force attacks on SSH. Best Practices \u00b6 General Firewall Tips \u00b6 Regularly review and update firewall rules. Use the principle of least privilege (allow only necessary traffic). Monitor logs to detect unusual activity. UFW Specific \u00b6 Enable logging with sudo ufw logging on . Use sudo ufw reset to reset all rules if needed. IPTables Specific \u00b6 Save rules using sudo iptables-save > /etc/iptables/rules.v4 . Load rules at boot with appropriate system services. LDAP Overview \u00b6 What is LDAP? \u00b6 The Lightweight Directory Access Protocol (LDAP) is a protocol for accessing and maintaining distributed directory information services over an IP network. LDAP is commonly used for: Centralized authentication and authorization. Storing user, group, and device information. Facilitating single sign-on (SSO) for networked systems. Key Features of LDAP \u00b6 Hierarchical Structure: Data is stored in a tree-like structure. Interoperability: Works with a variety of systems and platforms. Authentication Support: Can be integrated with security mechanisms like SASL. Common LDAP Commands and Examples \u00b6 1. Search LDAP Directory \u00b6 ldapsearch -x -b \"dc=example,dc=com\" Use Case: Query user or group information from the directory. 2. Bind to LDAP Server \u00b6 ldapwhoami -x -D \"cn=admin,dc=example,dc=com\" -W Use Case: Authenticate against an LDAP server. 3. Add LDAP Entry \u00b6 ldapadd -x -D \"cn=admin,dc=example,dc=com\" -W -f entry.ldif Use Case: Add new users or groups to the directory. 4. Modify LDAP Entry \u00b6 ldapmodify -x -D \"cn=admin,dc=example,dc=com\" -W -f modify.ldif Use Case: Update attributes of an existing user or group. 5. Delete LDAP Entry \u00b6 ldapdelete -x -D \"cn=admin,dc=example,dc=com\" -W \"cn=user,dc=example,dc=com\" Use Case: Remove obsolete entries from the directory. Advanced Use Cases \u00b6 Bulk Import Entries \u00b6 ldapadd -x -D \"cn=admin,dc=example,dc=com\" -W -f bulk.ldif Use Case: Add multiple entries at once using an LDIF file. Search with Filters \u00b6 ldapsearch -x -b \"dc=example,dc=com\" \"(&(objectClass=person)(uid=jdoe))\" Use Case: Find specific entries based on attributes. Change User Password \u00b6 ldappasswd -x -D \"cn=admin,dc=example,dc=com\" -W -s newpassword \"uid=jdoe,dc=example,dc=com\" Use Case: Reset a user's password. Export Entire Directory \u00b6 ldapsearch -x -LLL -b \"dc=example,dc=com\" > backup.ldif Use Case: Backup all directory data to an LDIF file. Delete All Entries Under a Branch \u00b6 ldapdelete -x -D \"cn=admin,dc=example,dc=com\" -W \"ou=groups,dc=example,dc=com\" Use Case: Remove all entries within a specific branch of the directory. Best Practices \u00b6 General LDAP Tips \u00b6 Use strong administrative passwords and secure connections (e.g., LDAPS). Regularly back up directory data. Implement access controls to restrict sensitive data. Schema Management \u00b6 Extend schemas carefully to ensure compatibility. Use tools like slapcat for schema validation. Monitoring and Maintenance \u00b6 Enable logging for audit purposes. Monitor performance and tune configurations for large directories.","title":"VPN, SSH, Firewall & LDAP"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#vpn-overview","text":"","title":"VPN Overview"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#what-is-vpn","text":"A Virtual Private Network (VPN) creates a secure, encrypted connection between your device and a remote server. VPNs are commonly used for: Securing data transmission over public networks. Accessing region-restricted services. Hiding your IP address to enhance privacy.","title":"What is VPN?"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#common-vpn-commands-and-examples","text":"","title":"Common VPN Commands and Examples"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#1-openvpn-connection","text":"sudo openvpn --config myvpn.ovpn Use Case: Connect to a VPN using an OpenVPN configuration file.","title":"1. OpenVPN Connection"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#2-check-vpn-status","text":"nmcli connection show Use Case: Display active network connections, including VPN.","title":"2. Check VPN Status"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#3-disconnect-vpn","text":"nmcli connection down <vpn_name> Use Case: Terminate the VPN connection.","title":"3. Disconnect VPN"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#best-practices","text":"Use strong authentication methods (e.g., certificates). Avoid public VPN services for sensitive tasks. Regularly update VPN client software.","title":"Best Practices"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#ssh-overview","text":"","title":"SSH Overview"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#what-is-ssh","text":"Secure Shell (SSH) is a cryptographic network protocol for secure communication over an insecure network. It is commonly used for: Remote server administration. Secure file transfers. Port forwarding.","title":"What is SSH?"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#common-ssh-commands-and-examples","text":"","title":"Common SSH Commands and Examples"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#1-ssh-to-remote-server","text":"ssh user@host Use Case: Connect to a remote server using the specified username and host.","title":"1. SSH to Remote Server"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#2-copy-files-securely-using-scp","text":"scp file.txt user@host:/path/ scp user@host:/path/file.txt . Use Case: Upload or download files securely to/from a remote server.","title":"2. Copy Files Securely Using SCP"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#3-generate-ssh-key","text":"ssh-keygen -t rsa -b 2048 Use Case: Create an RSA key pair for passwordless authentication.","title":"3. Generate SSH Key"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#4-copy-ssh-key-to-remote-server","text":"ssh-copy-id user@host Use Case: Enable passwordless SSH login to a remote server.","title":"4. Copy SSH Key to Remote Server"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#5-ssh-port-forwarding","text":"ssh -L 8080 :localhost:80 user@host Use Case: Forward a local port (8080) to a remote port (80) via SSH.","title":"5. SSH Port Forwarding"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#6-execute-command-on-remote-server","text":"ssh user@host \"ls -la\" Use Case: Run a command remotely without starting an interactive shell.","title":"6. Execute Command on Remote Server"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#best-practices_1","text":"Use SSH keys instead of passwords. Restrict SSH access to specific IPs. Disable root login and use non-default ports.","title":"Best Practices"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#advanced-use-cases","text":"","title":"Advanced Use Cases"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#vpn-with-wireguard","text":"sudo wg-quick up wg0 Use Case: Activate a WireGuard VPN interface.","title":"VPN with WireGuard"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#ssh-tunneling-for-proxying","text":"ssh -D 9050 user@host Use Case: Set up a dynamic SOCKS proxy through an SSH connection.","title":"SSH Tunneling for Proxying"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#securely-sync-directories-with-rsync-over-ssh","text":"rsync -avz -e ssh /local/path/ user@host:/remote/path/ Use Case: Synchronize directories between a local and remote machine.","title":"Securely Sync Directories with rsync over SSH"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#firewall-overview","text":"","title":"Firewall Overview"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#what-is-a-firewall","text":"A firewall is a network security device or software designed to monitor and control incoming and outgoing traffic based on predefined security rules. Firewalls are commonly used to: Protect systems from unauthorized access. Control traffic flow within and across networks. Prevent malicious attacks and data breaches.","title":"What is a Firewall?"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#types-of-firewalls","text":"Network Firewalls: Protect an entire network. Host-Based Firewalls: Installed on individual devices. Cloud Firewalls: Protect cloud-based infrastructure.","title":"Types of Firewalls"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#common-firewall-commands-and-examples","text":"","title":"Common Firewall Commands and Examples"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#1-list-active-rules","text":"sudo ufw status sudo iptables -L Use Case: Check active firewall rules.","title":"1. List Active Rules"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#2-allow-traffic-on-a-port","text":"sudo ufw allow 22 /tcp Use Case: Enable SSH access.","title":"2. Allow Traffic on a Port"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#3-block-traffic-on-a-port","text":"sudo ufw deny 80 /tcp Use Case: Block HTTP access.","title":"3. Block Traffic on a Port"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#4-enable-firewall","text":"sudo ufw enable Use Case: Activate the firewall to enforce security policies.","title":"4. Enable Firewall"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#5-log-firewall-activity","text":"sudo iptables -A INPUT -j LOG Use Case: Monitor traffic for analysis and debugging.","title":"5. Log Firewall Activity"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#6-delete-a-rule","text":"sudo ufw delete allow 22 /tcp Use Case: Remove an existing rule.","title":"6. Delete a Rule"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#advanced-use-cases_1","text":"","title":"Advanced Use Cases"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#temporary-block-using-iptables","text":"sudo iptables -I INPUT -s 192 .168.1.100 -j DROP Use Case: Temporarily block traffic from a specific IP address.","title":"Temporary Block Using iptables"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#open-multiple-ports","text":"sudo ufw allow 443 ,80/tcp Use Case: Allow HTTPS and HTTP traffic.","title":"Open Multiple Ports"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#rate-limiting-with-ufw","text":"sudo ufw limit 22 /tcp Use Case: Protect against brute force attacks on SSH.","title":"Rate Limiting with UFW"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#best-practices_2","text":"","title":"Best Practices"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#general-firewall-tips","text":"Regularly review and update firewall rules. Use the principle of least privilege (allow only necessary traffic). Monitor logs to detect unusual activity.","title":"General Firewall Tips"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#ufw-specific","text":"Enable logging with sudo ufw logging on . Use sudo ufw reset to reset all rules if needed.","title":"UFW Specific"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#iptables-specific","text":"Save rules using sudo iptables-save > /etc/iptables/rules.v4 . Load rules at boot with appropriate system services.","title":"IPTables Specific"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#ldap-overview","text":"","title":"LDAP Overview"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#what-is-ldap","text":"The Lightweight Directory Access Protocol (LDAP) is a protocol for accessing and maintaining distributed directory information services over an IP network. LDAP is commonly used for: Centralized authentication and authorization. Storing user, group, and device information. Facilitating single sign-on (SSO) for networked systems.","title":"What is LDAP?"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#key-features-of-ldap","text":"Hierarchical Structure: Data is stored in a tree-like structure. Interoperability: Works with a variety of systems and platforms. Authentication Support: Can be integrated with security mechanisms like SASL.","title":"Key Features of LDAP"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#common-ldap-commands-and-examples","text":"","title":"Common LDAP Commands and Examples"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#1-search-ldap-directory","text":"ldapsearch -x -b \"dc=example,dc=com\" Use Case: Query user or group information from the directory.","title":"1. Search LDAP Directory"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#2-bind-to-ldap-server","text":"ldapwhoami -x -D \"cn=admin,dc=example,dc=com\" -W Use Case: Authenticate against an LDAP server.","title":"2. Bind to LDAP Server"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#3-add-ldap-entry","text":"ldapadd -x -D \"cn=admin,dc=example,dc=com\" -W -f entry.ldif Use Case: Add new users or groups to the directory.","title":"3. Add LDAP Entry"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#4-modify-ldap-entry","text":"ldapmodify -x -D \"cn=admin,dc=example,dc=com\" -W -f modify.ldif Use Case: Update attributes of an existing user or group.","title":"4. Modify LDAP Entry"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#5-delete-ldap-entry","text":"ldapdelete -x -D \"cn=admin,dc=example,dc=com\" -W \"cn=user,dc=example,dc=com\" Use Case: Remove obsolete entries from the directory.","title":"5. Delete LDAP Entry"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#advanced-use-cases_2","text":"","title":"Advanced Use Cases"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#bulk-import-entries","text":"ldapadd -x -D \"cn=admin,dc=example,dc=com\" -W -f bulk.ldif Use Case: Add multiple entries at once using an LDIF file.","title":"Bulk Import Entries"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#search-with-filters","text":"ldapsearch -x -b \"dc=example,dc=com\" \"(&(objectClass=person)(uid=jdoe))\" Use Case: Find specific entries based on attributes.","title":"Search with Filters"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#change-user-password","text":"ldappasswd -x -D \"cn=admin,dc=example,dc=com\" -W -s newpassword \"uid=jdoe,dc=example,dc=com\" Use Case: Reset a user's password.","title":"Change User Password"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#export-entire-directory","text":"ldapsearch -x -LLL -b \"dc=example,dc=com\" > backup.ldif Use Case: Backup all directory data to an LDIF file.","title":"Export Entire Directory"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#delete-all-entries-under-a-branch","text":"ldapdelete -x -D \"cn=admin,dc=example,dc=com\" -W \"ou=groups,dc=example,dc=com\" Use Case: Remove all entries within a specific branch of the directory.","title":"Delete All Entries Under a Branch"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#best-practices_3","text":"","title":"Best Practices"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#general-ldap-tips","text":"Use strong administrative passwords and secure connections (e.g., LDAPS). Regularly back up directory data. Implement access controls to restrict sensitive data.","title":"General LDAP Tips"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#schema-management","text":"Extend schemas carefully to ensure compatibility. Use tools like slapcat for schema validation.","title":"Schema Management"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#monitoring-and-maintenance","text":"Enable logging for audit purposes. Monitor performance and tune configurations for large directories.","title":"Monitoring and Maintenance"}]}