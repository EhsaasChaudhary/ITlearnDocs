{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Docker/Docker-file/","title":"Docker Basics","text":"<p>Docker is an open-source platform that allows you to automate the deployment of applications inside lightweight, portable containers. Containers include everything an application needs to run, such as libraries, dependencies, and configuration files.</p>"},{"location":"Docker/Docker-file/#why-use-docker","title":"Why Use Docker?","text":"<ol> <li>Consistency Across Environments: Eliminates the \"works on my machine\" problem by ensuring applications run the same everywhere.</li> <li>Resource Efficiency: Containers are lightweight compared to virtual machines.</li> <li>Speed: Containers start quickly as they do not boot up an operating system.</li> <li>Portability: Docker containers can run on any system with Docker installed.</li> <li>Scalability: Simplifies scaling applications across distributed systems.</li> </ol>"},{"location":"Docker/Docker-file/#key-components-of-docker","title":"Key Components of Docker","text":""},{"location":"Docker/Docker-file/#1-docker-engine","title":"1. Docker Engine","text":"<ul> <li>The core component that runs and manages containers.</li> </ul>"},{"location":"Docker/Docker-file/#2-docker-images","title":"2. Docker Images","text":"<ul> <li>Immutable, lightweight, and self-sufficient packages containing an application and its environment.</li> </ul>"},{"location":"Docker/Docker-file/#3-docker-containers","title":"3. Docker Containers","text":"<ul> <li>Instances of Docker images running as separate processes on the host machine.</li> </ul>"},{"location":"Docker/Docker-file/#4-dockerfile","title":"4. Dockerfile","text":"<ul> <li>A script with instructions to build a Docker image.</li> </ul>"},{"location":"Docker/Docker-file/#5-docker-compose","title":"5. Docker Compose","text":"<ul> <li>A tool to define and manage multi-container applications.</li> </ul>"},{"location":"Docker/Docker-file/#verify-installation","title":"Verify installation:","text":"<pre><code>docker --version\n</code></pre>"},{"location":"Docker/Docker-file/#common-docker-commands","title":"Common Docker Commands","text":""},{"location":"Docker/Docker-file/#images","title":"Images","text":"<ul> <li><code>docker pull &lt;image&gt;</code>: Download an image from Docker Hub.</li> <li><code>docker images</code>: List all downloaded images.</li> <li><code>docker rmi &lt;image&gt;</code>: Remove an image.</li> </ul>"},{"location":"Docker/Docker-file/#containers","title":"Containers","text":"<ul> <li><code>docker run &lt;image&gt;</code>: Run a container.</li> <li><code>docker ps</code>: List running containers.</li> <li><code>docker ps -a</code>: List all containers (including stopped ones).</li> <li><code>docker stop &lt;container&gt;</code>: Stop a running container.</li> <li><code>docker rm &lt;container&gt;</code>: Remove a container.</li> </ul>"},{"location":"Docker/Docker-file/#build-and-logs","title":"Build and Logs","text":"<ul> <li><code>docker build -t &lt;tag&gt; .</code>: Build an image from a Dockerfile.</li> <li><code>docker logs &lt;container&gt;</code>: View logs of a container.</li> </ul>"},{"location":"Docker/Docker-file/#other-commands","title":"Other Commands","text":"<ul> <li><code>docker exec -it &lt;container&gt; &lt;command&gt;</code>: Run a command inside a running container.</li> <li><code>docker network ls</code>: List Docker networks.</li> </ul>"},{"location":"Docker/Docker-file/#dockerfile","title":"Dockerfile","text":"<p>A <code>Dockerfile</code> is used to create a custom Docker image. Below is an example:</p> <pre><code># Use an official Node.js runtime as a base image\nFROM node:18\n\n# Set the working directory inside the container\nWORKDIR /app\n\n# Copy package.json and install dependencies\nCOPY package.json ./\nRUN npm install\n\n# Copy the application source code\nCOPY . ./\n\n# Expose the application port\nEXPOSE 3000\n\n# Command to run the application\nCMD [\"npm\", \"run\", \"dev\"]\n</code></pre> <p>Build the image and run the container: <pre><code>docker build -t my-node-app .\ndocker run -p 3000:3000 my-node-app\n</code></pre></p>"},{"location":"Docker/Docker-file/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose allows you to define and run multi-container applications. A <code>docker-compose.yml</code> file specifies the services.</p>"},{"location":"Docker/Docker-file/#example-nodejs-and-mongodb","title":"Example: Node.js and MongoDB","text":"<pre><code>services:\n  development:\n    build:\n      context: .\n      dockerfile: Dockerfile.prod\n      target: development\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app \n      - /app/node_modules  \n    environment:\n      - NODE_ENV=development\n</code></pre> <p>Start the application: <pre><code>docker-compose up\n</code></pre></p> <p>Stop and remove containers: <pre><code>docker-compose down\n</code></pre></p>"},{"location":"Docker/Docker-file/#additional-resources","title":"Additional Resources","text":"<ul> <li>Docker Documentation</li> <li>Docker Hub</li> <li>Docker Cheatsheet</li> </ul>"},{"location":"Git%20%26%20Github/git-commands/","title":"Git / Github Commands","text":""},{"location":"Git%20%26%20Github/git-commands/#git-init","title":"Git Init","text":"<p>The <code>git init</code> command initializes a new Git repository in the specified directory. This command creates a <code>.git</code> folder that contains all the metadata and history for the repository.</p>"},{"location":"Git%20%26%20Github/git-commands/#usage","title":"Usage:","text":"<pre><code>git init [directory]\n</code></pre> <ul> <li>If no directory is specified, it initializes the current folder.</li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#options","title":"Options:","text":"<ul> <li><code>--bare</code>: Initializes a bare repository that does not have a working directory. Bare repositories are typically used for remote repositories.   <pre><code>git init --bare\n</code></pre></li> <li><code>--quiet</code>: Suppresses the output message.   <pre><code>git init --quiet\n</code></pre></li> <li><code>--shared[=permissions]</code>: Configures repository permissions to be shared among a group. Common values for permissions are <code>group</code>, <code>all</code>, or <code>umask</code>.   <pre><code>git init --shared=group\n</code></pre></li> <li><code>--separate-git-dir=&lt;git-dir&gt;</code>: Creates a Git repository with the <code>.git</code> folder stored in a separate directory.   <pre><code>git init --separate-git-dir=/path/to/git-dir\n</code></pre></li> <li><code>-b &lt;branch-name&gt;</code>: Creates the repository with an initial branch named <code>&lt;branch-name&gt;</code> instead of the default <code>main</code> branch.   <pre><code>git init -b &lt;branch-name&gt;\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#git-status","title":"Git Status","text":"<p>The <code>git status</code> command displays the state of the working directory and staging area. It shows which changes have been staged, which have not, and which files are not being tracked by Git.</p>"},{"location":"Git%20%26%20Github/git-commands/#usage_1","title":"Usage:","text":"<pre><code>git status [options]\n</code></pre>"},{"location":"Git%20%26%20Github/git-commands/#options_1","title":"Options:","text":"<ul> <li><code>--short</code>: Provides a brief summary of the status.   <pre><code>git status --short\n</code></pre></li> <li><code>--branch</code>: Displays information about the current branch.   <pre><code>git status --branch\n</code></pre></li> <li><code>--ignored</code>: Lists the ignored files.   <pre><code>git status --ignored\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#git-add","title":"Git add","text":"<p>The <code>git add</code> command adds changes in the working directory to the staging area, preparing them for a commit.</p>"},{"location":"Git%20%26%20Github/git-commands/#usage_2","title":"Usage:","text":"<p><pre><code>git add [file-pattern]\n</code></pre> - To stage all changes:   <pre><code>git add .\n</code></pre> - To stage a specific file:   <pre><code>git add &lt;file-name&gt;\n</code></pre></p>"},{"location":"Git%20%26%20Github/git-commands/#options_2","title":"Options:","text":"<ul> <li><code>-n</code> or <code>--dry-run</code>: Shows what files would be added without actually staging them.   <pre><code>git add -n\n</code></pre></li> <li><code>-p</code> or <code>--patch</code>: Interactively stages hunks of changes.   <pre><code>git add -p\n</code></pre>   For more information about using <code>git add -p</code>, refer to this external article: Explaining git add -p Command with Examples</li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#git-log","title":"Git log","text":"<p>The <code>git log</code> command displays the commit history of a repository, showing the sequence of commits.</p>"},{"location":"Git%20%26%20Github/git-commands/#usage_3","title":"Usage:","text":"<pre><code>git log [options]\n</code></pre>"},{"location":"Git%20%26%20Github/git-commands/#options_3","title":"Options:","text":"<ul> <li><code>--oneline</code>: Displays each commit on one line for brevity.   <pre><code>git log --oneline\n</code></pre></li> <li><code>--graph</code>: Shows a graphical representation of the branch structure.   <pre><code>git log --graph\n</code></pre></li> <li><code>--author=&lt;author&gt;</code>: Filters commits by a specific author.   <pre><code>git log --author=\"Author Name\"\n</code></pre></li> <li><code>--since=&lt;date&gt;</code> and <code>--until=&lt;date&gt;</code>: Filters commits within a date range.   <pre><code>git log --since=\"2023-01-01\" --until=\"2023-12-31\"\n</code></pre></li> <li><code>-p</code>: Shows the differences introduced in each commit.   <pre><code>git log -p\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#git-commit","title":"Git commit","text":"<p>The <code>git commit</code> command saves the staged changes to the repository, creating a new commit.</p>"},{"location":"Git%20%26%20Github/git-commands/#usage_4","title":"Usage:","text":"<pre><code>git commit -m \"Commit message\"\n</code></pre>"},{"location":"Git%20%26%20Github/git-commands/#options_4","title":"Options:","text":"<ul> <li><code>-m &lt;message&gt;</code>: Adds a commit message directly.   <pre><code>git commit -m \"Initial commit\"\n</code></pre></li> <li><code>-a</code>: Automatically stages tracked files before committing.   <pre><code>git commit -a -m \"Updated files\"\n</code></pre></li> <li><code>--amend</code>: Modifies the most recent commit, including its message.   <pre><code>git commit --amend -m \"Updated commit message\"\n</code></pre></li> <li><code>--no-edit</code>: Amends the last commit without changing its message.   <pre><code>git commit --amend --no-edit\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#git-diff","title":"Git Diff","text":""},{"location":"Git%20%26%20Github/git-commands/#git-diff_1","title":"<code>git diff</code>","text":"<p>The <code>git diff</code> command displays the differences between various states of a Git repository.</p>"},{"location":"Git%20%26%20Github/git-commands/#what-it-does","title":"What It Does:","text":"<ul> <li>Shows changes in the working directory that have not yet been staged.</li> <li>Displays differences between the staging area and the last commit.</li> <li>Compares two specific commits or branches.</li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#usage_5","title":"Usage:","text":"<pre><code>git diff [options]\n</code></pre>"},{"location":"Git%20%26%20Github/git-commands/#options_5","title":"Options:","text":"<ul> <li>Compare working directory to staging area:   <pre><code>git diff\n</code></pre></li> <li>Compare staging area to the last commit:   <pre><code>git diff --cached\n</code></pre></li> <li>Compare staging area to the last staged commit:   <pre><code>git diff --staged\n</code></pre></li> <li>Compare two commits:   <pre><code>git diff &lt;commit1&gt; &lt;commit2&gt;\n</code></pre></li> <li>Compare changes for a specific file:   <pre><code>git diff &lt;file-name&gt;\n</code></pre></li> <li><code>--stat</code>: Displays a summary of changes with the number of insertions and deletions.   <pre><code>git diff --stat\n</code></pre></li> <li><code>--name-only</code>: Shows only the names of changed files.   <pre><code>git diff --name-only\n</code></pre></li> <li><code>-p</code>: Displays the patch format of the changes.   <pre><code>git diff -p\n</code></pre></li> <li><code>--color</code>: Forces colored output for better readability.   <pre><code>git diff --color\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#git-remove-git-rm","title":"Git Remove (Git RM)","text":""},{"location":"Git%20%26%20Github/git-commands/#git-rm","title":"<code>git rm</code>","text":"<p>The <code>git rm</code> command is used to remove files from both the working directory and the staging area.</p>"},{"location":"Git%20%26%20Github/git-commands/#what-it-does_1","title":"What It Does:","text":"<ul> <li>Deletes the specified files from the working directory.</li> <li>Stages the removal of these files, so the deletion is recorded in the next commit.</li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#usage_6","title":"Usage:","text":"<pre><code>git rm [options] &lt;file-name&gt;\n</code></pre>"},{"location":"Git%20%26%20Github/git-commands/#options_6","title":"Options:","text":"<ul> <li>Remove a file and stage the removal:   <pre><code>git rm &lt;file-name&gt;\n</code></pre></li> <li>Remove multiple files:   <pre><code>git rm file1 file2\n</code></pre></li> <li><code>--cached</code>: Removes the file only from the staging area while keeping it in the working directory.   <pre><code>git rm --cached &lt;file-name&gt;\n</code></pre></li> <li><code>-f</code> or <code>--force</code>: Forces the removal of a file.   <pre><code>git rm -f &lt;file-name&gt;\n</code></pre></li> <li><code>--dry-run</code>: Shows what files would be removed without actually deleting them.   <pre><code>git rm --dry-run &lt;file-name&gt;\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#git-checkout","title":"Git Checkout","text":""},{"location":"Git%20%26%20Github/git-commands/#git-checkout_1","title":"<code>git checkout</code>","text":"<p>The <code>git checkout</code> command is used to switch between branches or restore files in a Git repository.</p>"},{"location":"Git%20%26%20Github/git-commands/#what-it-does_2","title":"What It Does:","text":"<ul> <li>Switches to an existing branch.</li> <li>Creates a new branch and switches to it (with <code>-b</code> option).</li> <li>Restores a specific file or files to a previous state.</li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#usage_7","title":"Usage:","text":"<pre><code>git checkout [options] &lt;branch-name&gt;\n</code></pre>"},{"location":"Git%20%26%20Github/git-commands/#options_7","title":"Options:","text":"<ul> <li>Switch to an existing branch:   <pre><code>git checkout &lt;branch-name&gt;\n</code></pre></li> <li>Create and switch to a new branch:   <pre><code>git checkout -b &lt;new-branch-name&gt;\n</code></pre></li> <li>Restore a file to its state in the last commit:   <pre><code>git checkout -- &lt;file-name&gt;\n</code></pre></li> <li>Switch to a specific commit (detached HEAD state):   <pre><code>git checkout &lt;commit-hash&gt;\n</code></pre></li> <li><code>--orphan &lt;new-branch-name&gt;</code>: Creates a new branch with no history.   <pre><code>git checkout --orphan &lt;new-branch-name&gt;\n</code></pre></li> <li><code>--detach</code>: Operates in a detached HEAD state, allowing inspection of an arbitrary commit.   <pre><code>git checkout --detach &lt;commit-hash&gt;\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#git-revert","title":"Git Revert","text":""},{"location":"Git%20%26%20Github/git-commands/#git-revert_1","title":"<code>git revert</code>","text":"<p>The <code>git revert</code> command is used to undo changes in a Git repository by creating a new commit that reverses the changes introduced by a previous commit.</p>"},{"location":"Git%20%26%20Github/git-commands/#what-it-does_3","title":"What It Does:","text":"<ul> <li>Reverts changes made by a specific commit.</li> <li>Creates a new commit to record the reversal.</li> <li>Does not alter the commit history (unlike <code>git reset</code>).</li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#usage_8","title":"Usage:","text":"<pre><code>git revert [options] &lt;commit-hash&gt;\n</code></pre>"},{"location":"Git%20%26%20Github/git-commands/#options_8","title":"Options:","text":"<ul> <li>Revert a specific commit:   <pre><code>git revert &lt;commit-hash&gt;\n</code></pre></li> <li>Revert multiple commits interactively:   <pre><code>git revert -i &lt;commit-range&gt;\n</code></pre></li> <li>Abort a revert operation in progress:   <pre><code>git revert --abort\n</code></pre></li> <li>Revert a commit without creating a new commit (apply changes to the working directory):   <pre><code>git revert --no-commit &lt;commit-hash&gt;\n</code></pre></li> <li>Edit the commit message for the revert:   <pre><code>git revert --edit &lt;commit-hash&gt;\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#git-reset","title":"Git Reset","text":""},{"location":"Git%20%26%20Github/git-commands/#git-reset_1","title":"<code>git reset</code>","text":"<p>The <code>git reset</code> command is used to undo changes in a Git repository by moving the current branch\u2019s HEAD to a specific state, effectively resetting the repository to that point. It modifies the staging area (index) and the working directory depending on the options used. Unlike <code>git revert</code>, which creates a new commit to reverse changes, <code>git reset</code> can alter the commit history by removing commits from the current branch.</p>"},{"location":"Git%20%26%20Github/git-commands/#what-it-does_4","title":"What It Does:","text":"<ul> <li>Moves the HEAD: It changes the current branch\u2019s HEAD to a specific commit.</li> <li>Modifies the Staging Area: It can modify the index (staging area) to match the new commit.</li> <li>Modifies the Working Directory: It can update the working directory to reflect the state of the commit.</li> </ul>"},{"location":"Git%20%26%20Github/git-commands/#usage_9","title":"Usage:","text":"<pre><code>git reset [options] &lt;commit-hash&gt;\n</code></pre>"},{"location":"Git%20%26%20Github/git-commands/#options_9","title":"Options:","text":"<ol> <li>Soft Reset (<code>--soft</code>):</li> <li>Moves the HEAD to a specified commit but keeps changes in the staging area. This allows you to amend or commit those changes later.</li> <li>Usage:      <pre><code>git reset --soft &lt;commit-hash&gt;\n</code></pre></li> <li> <p>Use Case: If you want to undo a commit but keep the changes staged for a new commit.</p> </li> <li> <p>Mixed Reset (<code>--mixed</code>) (default option):</p> </li> <li>Moves the HEAD to a specified commit and unstages changes (removes changes from the staging area) but keeps the modifications in the working directory.</li> <li>Usage:      <pre><code>git reset --mixed &lt;commit-hash&gt;\n</code></pre></li> <li> <p>Use Case: If you want to unstage changes and leave them in your working directory.</p> </li> <li> <p>Hard Reset (<code>--hard</code>):</p> </li> <li>Moves the HEAD to a specified commit and resets both the staging area and working directory to match the specified commit. Any uncommitted changes are lost.</li> <li>Usage:      <pre><code>git reset --hard &lt;commit-hash&gt;\n</code></pre></li> <li> <p>Use Case: If you want to discard changes completely and reset to a specific commit. Warning: This is destructive and can lead to data loss if there are uncommitted changes.</p> </li> <li> <p>Keep Reset (<code>--keep</code>):</p> </li> <li>Resets the HEAD and updates the staging area to match the specified commit, but keeps changes in the working directory. If there are conflicting changes, it prevents the reset from happening.</li> <li>Usage:      <pre><code>git reset --keep &lt;commit-hash&gt;\n</code></pre></li> <li> <p>Use Case: If you want to reset the staging area to a previous commit but keep changes in the working directory without discarding any conflicting changes.</p> </li> <li> <p>Merge Reset (<code>--merge</code>):</p> </li> <li>Similar to the <code>--keep</code> option, but it allows resetting with a little more flexibility. It preserves the working directory and attempts to preserve the index (staging area), but conflicts may arise when there are changes in both the commit history and the working directory.</li> <li>Usage:      <pre><code>git reset --merge &lt;commit-hash&gt;\n</code></pre></li> <li> <p>Use Case: When you want to reset the branch to a specific state but want to preserve most of your current changes.</p> </li> <li> <p>Reset to the Previous Commit:</p> </li> <li>To reset to the previous commit, you can use the shorthand <code>HEAD~1</code>:      <pre><code>git reset --hard HEAD~1\n</code></pre></li> <li>Use Case: This can be helpful to undo the most recent commit and reset your working directory and staging area.</li> </ol>"},{"location":"Git%20%26%20Github/git_concepts/","title":"Introduction to Git and GitHub","text":""},{"location":"Git%20%26%20Github/git_concepts/#git","title":"Git","text":"<p>Git is a distributed version control system designed to manage source code changes during software development. It allows multiple developers to work on a project simultaneously without overwriting each other's changes.</p>"},{"location":"Git%20%26%20Github/git_concepts/#key-features-of-git","title":"Key Features of Git","text":"<ul> <li>Version Control: Tracks changes to files, allowing you to revert to previous versions if needed.</li> <li>Branching and Merging: Lets you create branches to work on features or fixes separately, which can be merged back into the main branch later.</li> <li>Distributed Nature: Each developer has a full copy of the repository, ensuring redundancy and enabling offline work.</li> <li>Efficiency: Git is optimized for speed and handles large projects efficiently.</li> </ul>"},{"location":"Git%20%26%20Github/git_concepts/#common-commands","title":"Common Commands","text":"<ul> <li><code>git init</code>: Initialize a new Git repository.</li> <li><code>git add</code>: Stage changes for a commit.</li> <li><code>git commit</code>: Save staged changes to the repository.</li> <li><code>git push</code>: Upload local changes to a remote repository.</li> <li><code>git pull</code>: Fetch and merge changes from a remote repository.</li> <li><code>git clone</code>: Copy an existing repository.</li> </ul>"},{"location":"Git%20%26%20Github/git_concepts/#github","title":"GitHub","text":"<p>GitHub is a web-based platform that hosts Git repositories. It provides a user-friendly interface and additional tools for collaboration, project management, and deployment.</p>"},{"location":"Git%20%26%20Github/git_concepts/#key-features-of-github","title":"Key Features of GitHub","text":"<ul> <li>Repository Hosting: Stores Git repositories in the cloud.</li> <li>Collaboration Tools: Includes features like pull requests, code reviews, and team discussions.</li> <li>Issue Tracking: Allows tracking bugs, tasks, and feature requests.</li> <li>Continuous Integration/Continuous Deployment (CI/CD): Supports automated testing and deployment workflows.</li> <li>GitHub Actions: Enables automation for software workflows directly within GitHub.</li> </ul>"},{"location":"Git%20%26%20Github/git_concepts/#github-vs-git","title":"GitHub vs. Git","text":"<ul> <li>Git: A version control system installed locally on your machine.</li> <li>GitHub: A platform that hosts Git repositories and enhances collaboration with additional tools and features.</li> </ul>"},{"location":"Git%20%26%20Github/git_concepts/#working-directory-and-staging-area","title":"Working Directory and Staging Area","text":""},{"location":"Git%20%26%20Github/git_concepts/#working-directory","title":"Working Directory","text":"<p>The working directory is the local folder on your computer where you make changes to your files. It reflects the current state of your project and contains the files you're actively working on. Changes made in the working directory are not tracked by Git until they are staged or committed.</p>"},{"location":"Git%20%26%20Github/git_concepts/#staging-area","title":"Staging Area","text":"<p>The staging area is a temporary space where changes are prepared before committing them to the repository. It allows you to select which changes to include in the next commit. Files must be added to the staging area using the <code>git add</code> command.</p>"},{"location":"Git%20%26%20Github/git_concepts/#workflow-example","title":"Workflow Example:","text":"<ol> <li>Make changes in the Working Directory.</li> <li>Use <code>git add</code> to move changes to the Staging Area.</li> <li>Use <code>git commit</code> to save the changes from the staging area to the repository.</li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/","title":"Step-by-Step Guide to Push Files to a Remote Git Repository","text":""},{"location":"Git%20%26%20Github/github-repo-commands/#optional-steps","title":"Optional Steps","text":"<ul> <li>If you haven't configured your Git username and email, use the following commands before committing:   <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#1-initialize-a-git-repository","title":"1. Initialize a Git Repository","text":"<p><pre><code>git init\n</code></pre> This command initializes a new Git repository in the current directory.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#2-add-files-to-the-repository","title":"2. Add Files to the Repository","text":"<p><pre><code>git add .\n</code></pre> This command stages all the files in your directory for a commit.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#3-commit-the-files","title":"3. Commit the Files","text":"<p><pre><code>git commit -m \"Initial commit\"\n</code></pre> This command commits your staged files with a message describing the changes.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#4-add-the-remote-repository","title":"4. Add the Remote Repository","text":"<p><pre><code>git remote add origin git@github.com:EhsaasChaudhary/dfdf.git\n</code></pre> This links your local repository to a remote repository hosted on GitHub.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#options-for-git-remote","title":"Options for <code>git remote</code>","text":"<ul> <li><code>git remote -v</code>: Lists the remotes and their URLs.   <pre><code>git remote -v\n</code></pre></li> <li><code>git remote rename &lt;old-name&gt; &lt;new-name&gt;</code>: Renames a remote.   <pre><code>git remote rename origin upstream\n</code></pre></li> <li><code>git remote remove &lt;name&gt;</code>: Removes a remote.   <pre><code>git remote remove origin\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#5-git-branch","title":"5. Git Branch","text":"<p><pre><code>git branch -M main\n</code></pre> This command renames the default branch to <code>main</code>.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#options-for-git-branch","title":"Options for <code>git branch</code>","text":"<ul> <li><code>git branch -a</code>: Lists all branches, including remote branches.   <pre><code>git branch -a\n</code></pre></li> <li><code>git branch -d &lt;branch&gt;</code>: Deletes a local branch.   <pre><code>git branch -d feature-branch\n</code></pre></li> <li><code>git branch --set-upstream-to=&lt;remote&gt;/&lt;branch&gt;</code>: Sets upstream tracking for a branch.   <pre><code>git branch --set-upstream-to=origin/main\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#6-git-push","title":"6. Git Push","text":"<ul> <li>Push the Code to the Remote Repository <pre><code>git push -u origin main\n</code></pre> This command pushes the changes in your local <code>main</code> branch to the <code>main</code> branch of the remote repository and sets the remote as the default upstream.</li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#options-for-git-push","title":"Options for <code>git push</code>","text":"<ul> <li><code>-f</code>: Forces the push, overwriting changes.   <pre><code>git push -f\n</code></pre></li> <li><code>--tags</code>: Pushes all tags to the remote repository.   <pre><code>git push --tags\n</code></pre></li> <li><code>--delete &lt;remote&gt;/&lt;branch&gt;</code>: Deletes a branch on the remote repository.   <pre><code>git push origin --delete feature-branch\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#7-git-tags","title":"7. Git Tags","text":"<p>Tags are used in Git to mark specific points in a repository's history, often used to indicate release versions (e.g., <code>v1.0</code>, <code>v2.1</code>). Tags are immutable references to commits.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#types-of-tags","title":"Types of Tags","text":"<ol> <li> <p>Lightweight Tags: These are simple pointers to a commit, without any additional metadata.    <pre><code>git tag &lt;tagname&gt;\n</code></pre>    Example:    <pre><code>git tag v1.0\n</code></pre></p> </li> <li> <p>Annotated Tags: These are stored as full objects in the Git database and include metadata like the tagger's name, email, and date. Annotated tags are recommended for public releases.    <pre><code>git tag -a &lt;tagname&gt; -m \"Tag message\"\n</code></pre>    Example:    <pre><code>git tag -a v1.0 -m \"Initial release\"\n</code></pre></p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#listing-tags","title":"Listing Tags","text":"<p>To see all tags in the repository: <pre><code>git tag\n</code></pre></p>"},{"location":"Git%20%26%20Github/github-repo-commands/#deleting-tags","title":"Deleting Tags","text":"<p>To delete a tag locally: <pre><code>git tag -d &lt;tagname&gt;\n</code></pre></p> <p>To delete a tag remotely: <pre><code>git push origin --delete &lt;tagname&gt;\n</code></pre></p>"},{"location":"Git%20%26%20Github/github-repo-commands/#pushing-tags-to-a-remote-repository","title":"Pushing Tags to a Remote Repository","text":"<p>To push a single tag: <pre><code>git push origin &lt;tagname&gt;\n</code></pre></p> <p>To push all tags: <pre><code>git push origin --tags\n</code></pre></p>"},{"location":"Git%20%26%20Github/github-repo-commands/#checking-out-a-tag","title":"Checking Out a Tag","text":"<p>While tags cannot be directly modified, you can check out a tag to view its associated commit: <pre><code>git checkout &lt;tagname&gt;\n</code></pre></p>"},{"location":"Git%20%26%20Github/github-repo-commands/#8-git-show","title":"8. Git Show","text":"<p>The <code>git show</code> command is used to display detailed information about Git objects such as commits, tags, or trees. It is commonly used to inspect the details of a specific commit.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#syntax","title":"Syntax","text":"<pre><code>git show &lt;object&gt;\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#use-cases","title":"Use Cases","text":"<ol> <li> <p>Viewing a Commit: Displays details of a commit including the author, date, commit message, and changes made.    <pre><code>git show &lt;commit-hash&gt;\n</code></pre></p> </li> <li> <p>Viewing a Tag: Shows information about a specific tag, including its metadata and associated commit.    <pre><code>git show &lt;tagname&gt;\n</code></pre></p> </li> <li> <p>Viewing a File at a Specific Commit: Outputs the content of a file as it existed in a given commit.    <pre><code>git show &lt;commit-hash&gt;:&lt;filepath&gt;\n</code></pre></p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#options","title":"Options","text":"<ul> <li> <p><code>--name-only</code>: Shows only the names of changed files in a commit.   <pre><code>git show --name-only &lt;commit-hash&gt;\n</code></pre></p> </li> <li> <p><code>--name-status</code>: Displays the names of changed files along with their status (added, modified, deleted).   <pre><code>git show --name-status &lt;commit-hash&gt;\n</code></pre></p> </li> <li> <p><code>--pretty</code>: Formats the output. For example:   <pre><code>git show --pretty=oneline &lt;commit-hash&gt;\n</code></pre></p> </li> <li> <p><code>--stat</code>: Shows a summary of changes including file names, insertions, and deletions.   <pre><code>git show --stat &lt;commit-hash&gt;\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#examples","title":"Examples","text":"<ul> <li> <p>Show the latest commit:   <pre><code>git show\n</code></pre></p> </li> <li> <p>Show details of a specific commit:   <pre><code>git show 4f2e5a7\n</code></pre></p> </li> <li> <p>Show a specific file from a commit:   <pre><code>git show 4f2e5a7:src/main.java\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#notes","title":"Notes","text":"<p>The <code>git show</code> command is a powerful tool for inspecting repository history and understanding changes. It combines commit and diff information for a holistic view of the repository state.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#9-git-switch","title":"9. Git Switch","text":"<p>The <code>git switch</code> command is a modern replacement for branch-related operations previously handled by <code>git checkout</code>. It simplifies switching branches and creating new branches.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#syntax_1","title":"Syntax","text":"<pre><code>git switch [options] &lt;branch-name&gt;\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#common-use-cases","title":"Common Use Cases","text":"<ol> <li> <p>Switching to an Existing Branch:    <pre><code>git switch &lt;branch-name&gt;\n</code></pre>    Example:    <pre><code>git switch main\n</code></pre></p> </li> <li> <p>Creating and Switching to a New Branch:    <pre><code>git switch -c &lt;new-branch-name&gt;\n</code></pre>    Example:    <pre><code>git switch -c feature/login-module\n</code></pre></p> </li> <li> <p>Switching to a Remote-Tracking Branch:    <pre><code>git switch --track &lt;remote-branch&gt;\n</code></pre>    Example:    <pre><code>git switch --track origin/feature-xyz\n</code></pre></p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#options_1","title":"Options","text":"<ul> <li><code>-c</code>: Creates a new branch and switches to it.</li> <li><code>--create</code>: Synonym for <code>-c</code>.</li> <li><code>--track</code>: Creates a new branch to track a remote branch.</li> <li><code>--detach</code>: Switches to a branch in a detached HEAD state.</li> <li><code>--discard-changes</code>: Discards local changes when switching branches (use with caution).</li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#examples_1","title":"Examples","text":"<ul> <li> <p>Switch to the <code>development</code> branch:   <pre><code>git switch development\n</code></pre></p> </li> <li> <p>Create and switch to a new branch named <code>feature-api</code>:   <pre><code>git switch -c feature-api\n</code></pre></p> </li> <li> <p>Switch to a remote-tracking branch:   <pre><code>git switch --track origin/bugfix-123\n</code></pre></p> </li> <li> <p>Switch to a branch in detached HEAD state:   <pre><code>git switch --detach feature-old\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#notes_1","title":"Notes","text":"<ul> <li><code>git switch</code> is available in Git 2.23 and later.</li> <li>Unlike <code>git checkout</code>, <code>git switch</code> focuses exclusively on branch-related operations, making it less error-prone.</li> <li>Use <code>git switch</code> instead of <code>git checkout</code> when working with branches for clearer intent.</li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#10-git-restore","title":"10. Git Restore","text":"<p>The <code>git restore</code> command is used to restore files or revert changes in the working directory and staging area. It was introduced in Git 2.23 as part of the effort to separate the functionality of <code>git checkout</code> into more focused commands.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#syntax_2","title":"Syntax","text":"<pre><code>git restore [options] &lt;file-path&gt;\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#common-use-cases_1","title":"Common Use Cases","text":"<ol> <li> <p>Restore a File to Its Last Committed State:    <pre><code>git restore &lt;file-path&gt;\n</code></pre>    Example:    <pre><code>git restore README.md\n</code></pre></p> </li> <li> <p>Unstage a File:    <pre><code>git restore --staged &lt;file-path&gt;\n</code></pre>    Example:    <pre><code>git restore --staged index.html\n</code></pre></p> </li> <li> <p>Restore All Files in the Repository:    <pre><code>git restore .\n</code></pre></p> </li> <li> <p>Discard Changes Completely:    <pre><code>git restore --source=HEAD &lt;file-path&gt;\n</code></pre>    Example:    <pre><code>git restore --source=HEAD config.yaml\n</code></pre></p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#options_2","title":"Options","text":"<ul> <li><code>--staged</code>: Unstages a file from the index (staging area) without changing the working directory.</li> <li><code>--source=&lt;commit&gt;</code>: Specifies the commit to restore from (default is <code>HEAD</code>).</li> <li><code>--worktree</code>: Restores changes in the working directory (default behavior).</li> <li><code>--</code>: Separates file paths from options, avoiding ambiguity.</li> <li><code>--patch</code> or <code>-p</code>: Allows interactive restoration of parts of a file.</li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#examples_2","title":"Examples","text":"<ul> <li> <p>Restore a single file to its committed state:   <pre><code>git restore app.js\n</code></pre></p> </li> <li> <p>Unstage a file:   <pre><code>git restore --staged app.js\n</code></pre></p> </li> <li> <p>Discard all local changes:   <pre><code>git restore .\n</code></pre></p> </li> <li> <p>Interactively restore hunks in a file:   <pre><code>git restore -p app.js\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#notes_2","title":"Notes","text":"<ul> <li><code>git restore</code> is available in Git 2.23 and later.</li> <li>Use this command instead of <code>git checkout</code> for file-specific operations for better clarity.</li> <li>Be cautious when discarding changes as they cannot be recovered unless committed.</li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#11-git-merge","title":"11. Git Merge","text":"<p>The <code>git merge</code> command is used to combine the changes from one branch into the current branch. It is a key tool for integrating work in Git, often used in collaborative workflows.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#syntax_3","title":"Syntax","text":"<pre><code>git merge [options] &lt;branch&gt;\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#common-use-cases_2","title":"Common Use Cases","text":"<ol> <li> <p>Merge a Branch into the Current Branch:    <pre><code>git merge &lt;branch-name&gt;\n</code></pre>    Example:    <pre><code>git merge feature-branch\n</code></pre></p> </li> <li> <p>Merge with a Commit Message:    <pre><code>git merge -m \"Merge message\" &lt;branch-name&gt;\n</code></pre>    Example:    <pre><code>git merge -m \"Merging feature into main\" feature-branch\n</code></pre></p> </li> <li> <p>Abort a Merge:    <pre><code>git merge --abort\n</code></pre>    Use this if there are conflicts you do not want to resolve.</p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#options_3","title":"Options","text":"<ul> <li> <p><code>--no-ff</code>: Creates a merge commit even if a fast-forward merge is possible.   <pre><code>git merge --no-ff &lt;branch&gt;\n</code></pre></p> </li> <li> <p><code>--squash</code>: Combines all changes into a single commit.   <pre><code>git merge --squash &lt;branch&gt;\n</code></pre></p> </li> <li> <p><code>--abort</code>: Cancels the merge process.   <pre><code>git merge --abort\n</code></pre></p> </li> <li> <p><code>--commit</code>: Completes the merge with a merge commit.</p> </li> <li> <p><code>-m &lt;message&gt;</code>: Adds a custom message to the merge commit.</p> </li> <li> <p><code>--strategy=&lt;strategy&gt;</code>: Specifies a merge strategy (e.g., <code>recursive</code>, <code>ours</code>, <code>theirs</code>).   <pre><code>git merge --strategy=recursive &lt;branch&gt;\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#examples_3","title":"Examples","text":"<ul> <li> <p>Merge <code>development</code> into <code>main</code>:   <pre><code>git merge development\n</code></pre></p> </li> <li> <p>Merge with a commit message:   <pre><code>git merge -m \"Merging hotfix\" hotfix-branch\n</code></pre></p> </li> <li> <p>Perform a squash merge:   <pre><code>git merge --squash feature-enhancement\n</code></pre></p> </li> <li> <p>Abort an ongoing merge:   <pre><code>git merge --abort\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#notes_3","title":"Notes","text":"<ul> <li>Resolve conflicts manually if they arise during a merge. Use <code>git status</code> to see the conflicting files.</li> <li>After resolving conflicts, complete the merge using:   <pre><code>git commit\n</code></pre></li> <li>Avoid merging too frequently without testing to maintain repository stability.</li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#12-git-rebase","title":"12. Git Rebase","text":"<p>The <code>git rebase</code> command is used to reapply commits from one branch onto another, effectively rewriting the commit history. It is commonly used to maintain a linear project history and integrate changes more cleanly.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#syntax_4","title":"Syntax","text":"<pre><code>git rebase [options] &lt;upstream&gt;\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#common-use-cases_3","title":"Common Use Cases","text":"<ol> <li> <p>Rebase the Current Branch onto Another Branch:    <pre><code>git rebase &lt;branch&gt;\n</code></pre>    Example:    <pre><code>git rebase main\n</code></pre></p> </li> <li> <p>Interactive Rebase to Edit Commit History:    <pre><code>git rebase -i &lt;commit&gt;\n</code></pre>    Example:    <pre><code>git rebase -i HEAD~3\n</code></pre>    This opens an editor where you can modify, reorder, or squash commits.</p> </li> <li> <p>Continue a Stopped Rebase:    <pre><code>git rebase --continue\n</code></pre>    Use this after resolving conflicts during a rebase.</p> </li> <li> <p>Abort a Rebase:    <pre><code>git rebase --abort\n</code></pre>    This restores the branch to its original state before the rebase started.</p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#options_4","title":"Options","text":"<ul> <li> <p><code>-i</code> or <code>--interactive</code>: Starts an interactive rebase session, allowing you to edit the commit history.   <pre><code>git rebase -i &lt;commit&gt;\n</code></pre></p> </li> <li> <p><code>--onto &lt;new-base&gt;</code>: Rebases the branch onto a different base.   <pre><code>git rebase --onto &lt;new-base&gt; &lt;upstream&gt; &lt;branch&gt;\n</code></pre>   Example:   <pre><code>git rebase --onto main feature-branch-old feature-branch-new\n</code></pre></p> </li> <li> <p><code>--continue</code>: Continues the rebase after conflicts are resolved.</p> </li> <li> <p><code>--skip</code>: Skips the current conflicting commit and proceeds with the rebase.   <pre><code>git rebase --skip\n</code></pre></p> </li> <li> <p><code>--abort</code>: Aborts the rebase and restores the branch to its original state.</p> </li> <li> <p><code>--preserve-merges</code>: Preserves merge commits during a rebase.   <pre><code>git rebase --preserve-merges main\n</code></pre></p> </li> <li> <p><code>--no-ff</code>: Ensures that no fast-forward merges are performed during the rebase.</p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#examples_4","title":"Examples","text":"<ul> <li> <p>Rebase the current branch onto <code>development</code>:   <pre><code>git rebase development\n</code></pre></p> </li> <li> <p>Start an interactive rebase to modify the last 5 commits:   <pre><code>git rebase -i HEAD~5\n</code></pre></p> </li> <li> <p>Rebase <code>feature-branch</code> onto <code>main</code>:   <pre><code>git rebase --onto main development feature-branch\n</code></pre></p> </li> <li> <p>Skip a conflicting commit during a rebase:   <pre><code>git rebase --skip\n</code></pre></p> </li> <li> <p>Abort a rebase and undo all changes:   <pre><code>git rebase --abort\n</code></pre></p> </li> </ul> <p>### Notes - Use <code>git rebase</code> with caution when working on shared branches as it rewrites commit history. - To avoid conflicts, ensure your branch is up to date with the target branch before rebasing:   <pre><code>git fetch origin\ngit rebase origin/main\n</code></pre> - After rebasing, force-push the changes to the remote repository:   <pre><code>git push --force\n</code></pre></p>"},{"location":"Git%20%26%20Github/github-repo-commands/#13-git-stash","title":"13. Git Stash","text":"<p>The <code>git stash</code> command temporarily shelves changes in your working directory so you can work on something else without committing the changes.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#syntax_5","title":"Syntax","text":"<pre><code>git stash [options]\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#common-use-cases_4","title":"Common Use Cases","text":"<ol> <li> <p>Save Changes:    <pre><code>git stash\n</code></pre>    Temporarily saves all changes in the working directory.</p> </li> <li> <p>List Stashes:    <pre><code>git stash list\n</code></pre>    Displays a list of all saved stashes.</p> </li> <li> <p>Apply Stashed Changes:    <pre><code>git stash apply\n</code></pre>    Reapplies the most recent stash to your working directory.</p> </li> <li> <p>Apply and Drop Stash:    <pre><code>git stash pop\n</code></pre>    Reapplies the most recent stash and removes it from the stash list.</p> </li> <li> <p>Drop a Specific Stash:    <pre><code>git stash drop stash@{index}\n</code></pre>    Removes a specific stash from the list.</p> </li> <li> <p>Clear All Stashes:    <pre><code>git stash clear\n</code></pre>    Deletes all saved stashes.</p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#options_5","title":"Options","text":"<ul> <li> <p><code>--keep-index</code>: Stashes only the changes in the working directory, preserving the staged changes.   <pre><code>git stash --keep-index\n</code></pre></p> </li> <li> <p><code>--include-untracked</code>: Includes untracked files in the stash.   <pre><code>git stash --include-untracked\n</code></pre></p> </li> <li> <p><code>--all</code>: Includes all files (tracked, untracked, and ignored) in the stash.   <pre><code>git stash --all\n</code></pre></p> </li> <li> <p><code>list</code>: Displays all stashed changes.</p> </li> <li> <p><code>pop</code>: Applies the stash and removes it from the stash list.</p> </li> <li> <p><code>apply</code>: Reapplies the stash without removing it from the stash list.</p> </li> <li> <p><code>drop</code>: Deletes a specific stash by its index.</p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#examples_5","title":"Examples","text":"<ul> <li> <p>Save changes and include untracked files:   <pre><code>git stash --include-untracked\n</code></pre></p> </li> <li> <p>Reapply the most recent stash:   <pre><code>git stash apply\n</code></pre></p> </li> <li> <p>Remove all stashes:   <pre><code>git stash clear\n</code></pre></p> </li> <li> <p>View all stashed changes:   <pre><code>git stash list\n</code></pre></p> </li> <li> <p>Apply and remove the most recent stash:   <pre><code>git stash pop\n</code></pre></p> </li> <li> <p>Drop a specific stash:   <pre><code>git stash drop stash@{1}\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#notes_4","title":"Notes","text":"<ul> <li>Stashing is useful when you want to switch branches without committing your changes.</li> <li>You can stash specific files using:   <pre><code>git stash push -m \"message\" &lt;file&gt;\n</code></pre></li> <li>Use <code>git stash show</code> to view the changes in a stash:   <pre><code>git stash show -p stash@{0}\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#14-git-pull","title":"14. Git Pull","text":"<p>The <code>git pull</code> command is used to fetch and merge changes from a remote repository into your current branch. It combines <code>git fetch</code> and <code>git merge</code> into a single command.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#syntax_6","title":"Syntax","text":"<pre><code>git pull [options] [repository] [refspec]\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#common-use-cases_5","title":"Common Use Cases","text":"<ol> <li> <p>Pull Changes from the Default Remote and Branch:    <pre><code>git pull\n</code></pre>    Fetches and merges changes from the remote-tracking branch.</p> </li> <li> <p>Pull Changes from a Specific Remote Branch:    <pre><code>git pull origin main\n</code></pre>    Fetches and merges changes from the <code>main</code> branch of the <code>origin</code> remote.</p> </li> <li> <p>Rebase Instead of Merging:    <pre><code>git pull --rebase\n</code></pre>    Fetches changes and rebases your commits on top of them.</p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#options_6","title":"Options","text":"<ul> <li> <p><code>--rebase</code>: Rebase the current branch on top of the upstream branch after fetching changes.   <pre><code>git pull --rebase\n</code></pre></p> </li> <li> <p><code>--all</code>: Fetches and merges changes from all configured remotes.   <pre><code>git pull --all\n</code></pre></p> </li> <li> <p><code>--no-commit</code>: Fetches and merges changes without committing the result.   <pre><code>git pull --no-commit\n</code></pre></p> </li> <li> <p><code>--squash</code>: Creates a single squashed commit for all changes fetched.   <pre><code>git pull --squash\n</code></pre></p> </li> <li> <p><code>--no-rebase</code>: Ensures that the pull operation does not perform a rebase.   <pre><code>git pull --no-rebase\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#examples_6","title":"Examples","text":"<ul> <li> <p>Fetch and merge changes from the <code>develop</code> branch:   <pre><code>git pull origin develop\n</code></pre></p> </li> <li> <p>Rebase your branch on top of the <code>main</code> branch:   <pre><code>git pull --rebase origin main\n</code></pre></p> </li> <li> <p>Fetch changes from all remotes:   <pre><code>git pull --all\n</code></pre></p> </li> <li> <p>Perform a pull without committing the merge result:   <pre><code>git pull --no-commit\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#notes_5","title":"Notes","text":"<ul> <li>If there are conflicts during the merge, resolve them and then commit the changes.</li> <li>To pull changes from a specific remote and branch while rebasing:   <pre><code>git pull --rebase origin feature-branch\n</code></pre></li> <li>Ensure your local branch is up to date before pushing changes after a pull:   <pre><code>git pull origin main\ngit push origin main\n</code></pre></li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#15-git-fetch","title":"15. Git Fetch","text":"<p>The <code>git fetch</code> command downloads objects and refs from another repository. Unlike <code>git pull</code>, it does not merge the changes into your current branch but updates your local tracking branches with the latest changes from the remote.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#syntax_7","title":"Syntax","text":"<pre><code>git fetch [options] [repository] [refspec]\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#common-use-cases_6","title":"Common Use Cases","text":"<ol> <li> <p>Fetch Updates from the Default Remote:    <pre><code>git fetch\n</code></pre>    Retrieves all updates from the remote repository without applying them to your working directory.</p> </li> <li> <p>Fetch from a Specific Remote:    <pre><code>git fetch origin\n</code></pre>    Updates the local tracking branches from the <code>origin</code> remote.</p> </li> <li> <p>Fetch a Specific Branch:    <pre><code>git fetch origin main\n</code></pre>    Fetches updates only for the <code>main</code> branch from the <code>origin</code> remote.</p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#options_7","title":"Options","text":"<ul> <li> <p><code>--all</code>: Fetches updates from all remotes.   <pre><code>git fetch --all\n</code></pre></p> </li> <li> <p><code>--dry-run</code>: Displays what would be fetched without actually fetching the updates.   <pre><code>git fetch --dry-run\n</code></pre></p> </li> <li> <p><code>--prune</code>: Removes local references to remote branches that no longer exist.   <pre><code>git fetch --prune\n</code></pre></p> </li> <li> <p><code>--tags</code>: Fetches all tags from the remote repository.   <pre><code>git fetch --tags\n</code></pre></p> </li> <li> <p><code>--depth &lt;depth&gt;</code>: Fetches a limited history of commits for shallow repositories.   <pre><code>git fetch --depth 1\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#examples_7","title":"Examples","text":"<ul> <li> <p>Fetch updates from all remotes and prune stale branches:   <pre><code>git fetch --all --prune\n</code></pre></p> </li> <li> <p>Fetch a specific branch and display details without making changes:   <pre><code>git fetch --dry-run origin feature-branch\n</code></pre></p> </li> <li> <p>Fetch all tags:   <pre><code>git fetch --tags\n</code></pre></p> </li> <li> <p>Fetch updates with a shallow clone:   <pre><code>git fetch --depth 1\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#notes_6","title":"Notes","text":"<ul> <li>Use <code>git fetch</code> regularly to keep your tracking branches updated.</li> <li>Combine <code>git fetch</code> with <code>git log</code> to inspect remote changes before merging them into your local branch.   <pre><code>git fetch origin main\ngit log HEAD..origin/main\n</code></pre></li> <li>To integrate fetched changes, follow up with <code>git merge</code> or <code>git rebase</code> as appropriate.</li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#16-git-clone","title":"16. Git Clone","text":"<p>The <code>git clone</code> command creates a copy of an existing remote repository locally. It is commonly used to start working on an existing project.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#syntax_8","title":"Syntax","text":"<pre><code>git clone [options] &lt;repository&gt; [directory]\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#common-use-cases_7","title":"Common Use Cases","text":"<ol> <li> <p>Clone a Repository into a New Directory:    <pre><code>git clone https://github.com/user/repo.git\n</code></pre>    Creates a local copy of the repository.</p> </li> <li> <p>Clone into a Specific Directory:    <pre><code>git clone https://github.com/user/repo.git my-folder\n</code></pre>    Clones the repository into a folder named <code>my-folder</code>.</p> </li> <li> <p>Clone Only a Specific Branch:    <pre><code>git clone -b main --single-branch https://github.com/user/repo.git\n</code></pre>    Clones only the <code>main</code> branch.</p> </li> </ol>"},{"location":"Git%20%26%20Github/github-repo-commands/#options_8","title":"Options","text":"<ul> <li> <p><code>-b</code> or <code>--branch</code>: Clone a specific branch instead of the default branch.   <pre><code>git clone -b feature-branch https://github.com/user/repo.git\n</code></pre></p> </li> <li> <p><code>--single-branch</code>: Clone only the history of the specified branch.   <pre><code>git clone --single-branch -b main https://github.com/user/repo.git\n</code></pre></p> </li> <li> <p><code>--depth</code>: Perform a shallow clone with a limited commit history.   <pre><code>git clone --depth 1 https://github.com/user/repo.git\n</code></pre></p> </li> <li> <p><code>--recurse-submodules</code>: Clone submodules along with the repository.   <pre><code>git clone --recurse-submodules https://github.com/user/repo.git\n</code></pre></p> </li> <li> <p><code>--mirror</code>: Clone a repository for use as a mirror, copying all refs and branches.   <pre><code>git clone --mirror https://github.com/user/repo.git\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#examples_8","title":"Examples","text":"<ul> <li> <p>Clone a repository into the current directory:   <pre><code>git clone https://github.com/user/repo.git .\n</code></pre></p> </li> <li> <p>Clone a specific branch with limited commit history:   <pre><code>git clone --depth 10 -b main https://github.com/user/repo.git\n</code></pre></p> </li> <li> <p>Clone a repository along with its submodules:   <pre><code>git clone --recurse-submodules https://github.com/user/repo.git\n</code></pre></p> </li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#notes_7","title":"Notes","text":"<ul> <li>After cloning, you can navigate into the repository and begin working:   <pre><code>cd repo\n</code></pre></li> <li>Ensure that you have the necessary permissions to clone private repositories.</li> <li>Use <code>git remote -v</code> to verify the remote URLs of the cloned repository.</li> </ul>"},{"location":"Git%20%26%20Github/github-repo-commands/#17-how-to-stop-tracking-files-with-gitignore","title":"17. How to Stop Tracking Files with .gitignore","text":"<p>If <code>.gitignore</code> isn't preventing <code>.log</code> files from being tracked, it's likely because the files were already being tracked by Git before you added the rule to <code>.gitignore</code>. Follow these steps to fix the issue.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#steps-to-fix-the-issue","title":"Steps to Fix the Issue","text":""},{"location":"Git%20%26%20Github/github-repo-commands/#1-stop-tracking-the-files","title":"1. Stop Tracking the Files","text":"<p>Run the following command to untrack all <code>.log</code> files that are already being tracked by Git:</p> <pre><code>git rm --cached *.log\n</code></pre> <p>This removes the <code>.log</code> files from Git's index but keeps them in your working directory.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#2-commit-the-changes","title":"2. Commit the Changes","text":"<p>After running the <code>git rm --cached</code> command, commit the changes to update the repository:</p> <pre><code>git commit -m \"Stop tracking .log files\"\n</code></pre>"},{"location":"Git%20%26%20Github/github-repo-commands/#3-verify-gitignore","title":"3. Verify <code>.gitignore</code>","text":"<p>Ensure your <code>.gitignore</code> file is correctly configured. For <code>.log</code> files, add the following line to the file:</p> <pre><code>*.log\n</code></pre> <p>This tells Git to ignore all files with a <code>.log</code> extension.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#4-check-if-log-files-are-being-ignored","title":"4. Check if <code>.log</code> Files Are Being Ignored","text":"<p>Use the <code>git check-ignore</code> command to verify that <code>.log</code> files are being ignored:</p> <pre><code>git check-ignore -v somefile.log\n</code></pre> <p>Replace <code>somefile.log</code> with the name of an actual <code>.log</code> file in your project.</p>"},{"location":"Git%20%26%20Github/github-repo-commands/#additional-notes","title":"Additional Notes","text":"<ul> <li> <p>If <code>.log</code> Files Are Committed to Remote:   If you have already pushed <code>.log</code> files to the remote repository, they will remain there even after being removed locally. To completely remove them from the repository's history, you can rewrite the repository history using tools like <code>git filter-repo</code> or <code>git filter-branch</code>.</p> </li> <li> <p>Conflicts with Other <code>.gitignore</code> Files:   If the <code>.gitignore</code> rule doesn\u2019t seem to work, ensure there are no conflicts with other <code>.gitignore</code> files or rules in parent directories.</p> </li> </ul> <p>Following these steps ensures that <code>.log</code> files are no longer tracked by Git while keeping them locally in your working directory.</p>"},{"location":"Git%20%26%20Github/gitignore/","title":"<code>.gitignore</code> Files for Multiple Development Environments","text":"<p>This document provides <code>.gitignore</code> templates for three common development environments: Node/React, Java Web Development, and Python/Django. You can use these templates to set up your projects with appropriate exclusions.</p>"},{"location":"Git%20%26%20Github/gitignore/#nodereact-gitignore","title":"Node/React <code>.gitignore</code>","text":"<pre><code># Dependency directories\nnode_modules/\n\n# Logs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids/\n*.pid\n*.seed\n*.pid.lock\n\n# Build outputs\nbuild/\ndist/\n\n# dotenv environment variables\n.env\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\n# Miscellaneous\n.DS_Store\nThumbs.db\n.vscode/\n.idea/\n</code></pre>"},{"location":"Git%20%26%20Github/gitignore/#java-web-development-gitignore","title":"Java Web Development <code>.gitignore</code>","text":"<pre><code># Compiled class files\n*.class\n\n# Logs\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package files\n*.jar\n*.war\n*.ear\n\n# Maven\ntarget/\npom.xml.tag\npom.xml.releaseBackup\npom.xml.versionsBackup\npom.xml.next\nrelease.properties\ndependency-reduced-pom.xml\nbuildNumber.properties\n\n# Gradle\n.gradle/\nbuild/\n\n# Eclipse\n.project\n.classpath\n.settings/\ntarget/\n\n# IntelliJ IDEA\n.idea/\n*.iml\n*.iws\n\n# Miscellaneous\n.DS_Store\nThumbs.db\n</code></pre>"},{"location":"Git%20%26%20Github/gitignore/#pythondjango-gitignore","title":"Python/Django <code>.gitignore</code>","text":""},{"location":"Git%20%26%20Github/gitignore/#byte-compiled-files-pycod-__pycache__-django-specific-dbsqlite3-pyc-pyo-pyd-migrations-environment-variables-env-logs-log-virtual-environments-venv-env-virtualenv-static-and-media-files-static-media-ide-specific-idea-vscode-test-coverage-reports-coverage-coveragexml-cover-pytest-cache-miscellaneous-ds_store-thumbsdb","title":"<pre><code># Byte-compiled files\n*.py[cod]\n__pycache__/\n\n# Django specific\ndb.sqlite3\n*.pyc\n*.pyo\n*.pyd\nmigrations/\n\n# Environment variables\n.env\n\n# Logs\n*.log\n\n# Virtual environments\nvenv/\nenv/\n.virtualenv/\n\n# Static and media files\nstatic/\nmedia/\n\n# IDE specific\n.idea/\n.vscode/\n\n# Test coverage reports\n.coverage\ncoverage.xml\n*.cover\n\n# Pytest\n.cache/\n\n# Miscellaneous\n.DS_Store\nThumbs.db\n</code></pre>","text":"<p>This setup ensures that unnecessary files and directories are excluded from your Git repositories.</p>"},{"location":"Git%20%26%20Github/ssh-steps/","title":"How to Create an SSH Key for GitHub and Save it","text":""},{"location":"Git%20%26%20Github/ssh-steps/#1-generate-the-ssh-key-pair","title":"1. Generate the SSH Key Pair","text":"<ol> <li>Open a terminal.</li> <li>Run the following command to create a new SSH key pair:</li> </ol> <p>Recommended:    <pre><code>ssh-keygen -o\n</code></pre></p> <p>Alternative (with custom options):    <pre><code>ssh-keygen -o -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre></p>"},{"location":"Git%20%26%20Github/ssh-steps/#2-choose-a-location-to-save-the-key","title":"2. Choose a Location to Save the Key","text":"<ul> <li>When prompted, you can specify a custom location for the key file or press Enter to use the default location (<code>~/.ssh/id_rsa</code>).</li> </ul>"},{"location":"Git%20%26%20Github/ssh-steps/#3-enter-a-passphrase-optional","title":"3. Enter a Passphrase (Optional)","text":"<ul> <li>You will be asked to enter a passphrase to secure the key. This is optional; press Enter for no passphrase.</li> </ul>"},{"location":"Git%20%26%20Github/ssh-steps/#4-locate-the-ssh-key","title":"4. Locate the SSH Key","text":"<ul> <li>Navigate to the <code>.ssh</code> directory (default location) using your terminal or file explorer.</li> <li>Open the <code>.pub</code> file (e.g., <code>id_rsa.pub</code>) located in the <code>.ssh</code> folder.</li> <li>Copy the content of the <code>.pub</code> file, starting with <code>ssh-</code>.</li> </ul>"},{"location":"Git%20%26%20Github/ssh-steps/#5-add-the-ssh-key-to-github","title":"5. Add the SSH Key to GitHub","text":"<ol> <li>Log in to your GitHub account.</li> <li>Go to Settings:</li> <li>Click on your profile picture (top-right corner) &gt; Settings &gt; SSH and GPG Keys.</li> <li>Click New SSH Key.</li> <li>Add a title (e.g., <code>EC Laptop</code>) and paste the public key into the \"Key\" field.</li> <li>Click Add SSH Key.</li> </ol>"},{"location":"Git%20%26%20Github/ssh-steps/#6-verify-the-ssh-connection","title":"6. Verify the SSH Connection","text":"<p>Run the following command to verify your SSH connection to GitHub:</p> <pre><code>ssh -T git@github.com\n</code></pre> <ul> <li>You should see a message like this:   <pre><code>Hi EhsaasChaudhary! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/","title":"File Permissions and Ownership in Linux","text":""},{"location":"Linux%20Commands/File-owner-permission/#overview","title":"Overview","text":"<p>File permissions and ownership in Linux determine who can read, write, or execute a file or directory. These settings ensure system security and controlled access.</p>"},{"location":"Linux%20Commands/File-owner-permission/#commands-for-managing-file-permissions-and-ownership","title":"Commands for Managing File Permissions and Ownership","text":""},{"location":"Linux%20Commands/File-owner-permission/#1-chmod-change-file-permissions","title":"1. <code>chmod</code> - Change File Permissions","text":"<ul> <li>Description: Modifies the read, write, and execute permissions for files and directories.</li> <li>Examples:   <pre><code># Give read, write, and execute permissions to the owner\n$ chmod u+rwx file.txt\n\n# Remove write permissions for the group\n$ chmod g-w file.txt\n\n# Set permissions using numeric notation\n$ chmod 755 file.txt\n</code></pre></li> <li>Options:</li> <li><code>-R</code>: Apply changes recursively to directories.     <pre><code>$ chmod -R 755 folder\n</code></pre></li> <li><code>--reference</code>: Apply permissions from a reference file.     <pre><code>$ chmod --reference=reference.txt target.txt\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#2-chown-change-file-ownership","title":"2. <code>chown</code> - Change File Ownership","text":"<ul> <li>Description: Alters the ownership of a file or directory.</li> <li>Examples:   <pre><code># Change owner to 'user'\n$ chown user file.txt\n\n# Change owner and group\n$ chown user:group file.txt\n</code></pre></li> <li>Options:</li> <li><code>-R</code>: Apply changes recursively.     <pre><code>$ chown -R user:group folder\n</code></pre></li> <li><code>--from</code>: Change ownership only if the current owner matches.     <pre><code>$ chown --from=current_user new_user file.txt\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#3-chgrp-change-group-ownership","title":"3. <code>chgrp</code> - Change Group Ownership","text":"<ul> <li>Description: Modifies the group associated with a file or directory.</li> <li>Examples:   <pre><code># Change group to 'developers'\n$ chgrp developers file.txt\n</code></pre></li> <li>Options:</li> <li><code>-R</code>: Apply changes recursively.     <pre><code>$ chgrp -R developers folder\n</code></pre></li> <li><code>--reference</code>: Apply group ownership from a reference file.     <pre><code>$ chgrp --reference=reference.txt target.txt\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#4-ls-l-list-file-permissions","title":"4. <code>ls -l</code> - List File Permissions","text":"<ul> <li>Description: Displays the permissions of files and directories in a detailed format.</li> <li>Example:   <pre><code>$ ls -l file.txt\n-rw-r--r-- 1 user group 1234 Jan 1 10:00 file.txt\n</code></pre></li> <li>The first column (<code>-rw-r--r--</code>) shows permissions for owner, group, and others.</li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#5-umask-default-permissions","title":"5. <code>umask</code> - Default Permissions","text":"<ul> <li>Description: Sets the default permissions for new files and directories.</li> <li>Examples:   <pre><code># View current umask value\n$ umask\n0022\n\n# Set a new umask value\n$ umask 0027\n</code></pre></li> <li>Explanation: A <code>umask</code> value of <code>0022</code> means:</li> <li>Owner: Read, write</li> <li>Group: Read-only</li> <li>Others: Read-only</li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#6-stat-detailed-file-information","title":"6. <code>stat</code> - Detailed File Information","text":"<ul> <li>Description: Provides detailed information about a file, including permissions and ownership.</li> <li>Example:   <pre><code>$ stat file.txt\nFile: file.txt\nSize: 1234       Blocks: 8          IO Block: 4096   regular file\nDevice: 802h/2050d   Inode: 123456    Links: 1\nAccess: 2025-01-05 10:00:00.000000000 +0000\nModify: 2025-01-05 10:00:00.000000000 +0000\nChange: 2025-01-05 10:00:00.000000000 +0000\nBirth: -\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#7-getfacl-and-setfacl-access-control-lists-acls","title":"7. <code>getfacl</code> and <code>setfacl</code> - Access Control Lists (ACLs)","text":"<ul> <li>Description: Manages fine-grained file permissions using ACLs.</li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#getfacl-view-acls","title":"<code>getfacl</code> - View ACLs","text":"<ul> <li>Example:   <pre><code>$ getfacl file.txt\n# file: file.txt\n# owner: user\n# group: group\nuser::rw-\ngroup::r--\nother::r--\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#setfacl-modify-acls","title":"<code>setfacl</code> - Modify ACLs","text":"<ul> <li> <p>Examples:   <pre><code># Grant user 'john' read permission\n$ setfacl -m u:john:r file.txt\n\n# Remove all ACL entries\n$ setfacl -b file.txt\n</code></pre></p> </li> <li> <p>Options:</p> </li> <li><code>-m</code>: Modify ACL entries.</li> <li><code>-x</code>: Remove specific ACL entries.</li> <li><code>-b</code>: Remove all ACL entries.</li> <li><code>-R</code>: Apply changes recursively.</li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#acronyms-used","title":"Acronyms Used","text":"<ul> <li>ACL: Access Control List</li> <li>IO Block: Input/Output Block</li> <li>umask: User file creation mode mask</li> </ul>"},{"location":"Linux%20Commands/File-owner-permission/#summary","title":"Summary","text":"<p>These commands provide robust control over file permissions and ownership, allowing administrators and users to manage access securely and efficiently. By mastering these tools, you can ensure the integrity and confidentiality of your files and directories.</p>"},{"location":"Linux%20Commands/basic-commands/","title":"Linux Commands Explanation with Examples","text":""},{"location":"Linux%20Commands/basic-commands/#1-pwd-print-working-directory","title":"1. <code>pwd</code> - Print Working Directory","text":"<ul> <li>Description: Displays the current directory path.</li> <li>Example:   <pre><code>$ pwd\n</code></pre>   Output: <code>/home/feilzz</code></li> <li>Options: </li> <li><code>--help</code>: Displays help information about <code>pwd</code>.</li> </ul>"},{"location":"Linux%20Commands/basic-commands/#2-whoami-show-current-user","title":"2. <code>whoami</code> - Show Current User","text":"<ul> <li>Description: Prints the username of the current user.</li> <li>Example:   <pre><code>$ whoami\n</code></pre>   Output: <code>feilzz</code></li> <li>Options:</li> <li><code>--help</code>: Displays help information about <code>whoami</code>.</li> </ul>"},{"location":"Linux%20Commands/basic-commands/#3-date-display-system-date-and-time","title":"3. <code>date</code> - Display System Date and Time","text":"<ul> <li>Description: Shows the current date and time of the system.</li> <li>Example:   <pre><code>$ date\n</code></pre>   Output: <code>Wed Jan 1 09:10:33 UTC 2025</code></li> <li>Options:</li> <li><code>+%Y-%m-%d</code>: Displays the date in <code>YYYY-MM-DD</code> format.     <pre><code>$ date +%Y-%m-%d\n2025-01-01\n</code></pre></li> <li><code>+%T</code>: Displays only the time in <code>HH:MM:SS</code> format.     <pre><code>$ date +%T\n09:10:33\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/basic-commands/#4-mkdir-make-directory","title":"4. <code>mkdir</code> - Make Directory","text":"<ul> <li>Description: Creates a new directory.</li> <li>Example:   <pre><code>$ mkdir linux\n</code></pre>   Creates a directory named <code>linux</code> in the current path.</li> <li>Options:</li> <li><code>-p</code>: Creates parent directories as needed.     <pre><code>$ mkdir -p parent/child\n</code></pre></li> <li><code>-v</code>: Prints a message for each created directory.     <pre><code>$ mkdir -v linux\nmkdir: created directory 'linux'\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/basic-commands/#5-ls-list-directory-contents","title":"5. <code>ls</code> - List Directory Contents","text":"<ul> <li>Description: Displays the contents of the current directory.</li> <li>Example:   <pre><code>$ ls\n</code></pre>   Output: <code>linux</code></li> <li>Options:</li> <li><code>-a</code>: Shows all files, including hidden files.     <pre><code>$ ls -a\n.  ..  .bashrc  linux\n</code></pre></li> <li><code>-l</code>: Lists files in long format with details.     <pre><code>$ ls -l\ndrwxr-xr-x 2 feilzz feilzz 4096 Jan 1 09:10 linux\n</code></pre></li> <li><code>-h</code>: Human-readable sizes when used with <code>-l</code>.     <pre><code>$ ls -lh\ndrwxr-xr-x 2 feilzz feilzz 4.0K Jan 1 09:10 linux\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/basic-commands/#6-cd-change-directory","title":"6. <code>cd</code> - Change Directory","text":"<ul> <li>Description: Navigates between directories.</li> <li>Example:   <pre><code>$ cd linux\n$ pwd\n/home/feilzz/linux\n</code></pre></li> <li>Options:</li> <li>No specific options, but useful shortcuts include:<ul> <li><code>cd ..</code>: Moves to the parent directory.</li> <li><code>cd ~</code>: Moves to the home directory.</li> <li><code>cd -</code>: Switches to the previous directory.</li> </ul> </li> </ul>"},{"location":"Linux%20Commands/basic-commands/#7-clear-clear-terminal-screen","title":"7. <code>clear</code> - Clear Terminal Screen","text":"<ul> <li>Description: Clears the terminal screen, making it easier to focus on new commands or output.</li> <li>Example:   <pre><code>$ clear\n</code></pre>   The terminal screen is cleared, but previous output can still be scrolled back to.</li> </ul>"},{"location":"Linux%20Commands/basic-commands/#usage-notes","title":"Usage Notes","text":"<p>These commands are foundational to Linux and allow for efficient navigation and system interaction. They form the basis for more complex scripting and system management.</p>"},{"location":"Linux%20Commands/file-redirection-piping/","title":"File Redirection & Piping","text":""},{"location":"Linux%20Commands/file-redirection-piping/#file-redirection-and-piping","title":"File Redirection and Piping","text":"<p>File redirection and piping are essential features of Linux that allow users to manage input and output efficiently. They are used to direct the flow of data between files, commands, and devices.</p>"},{"location":"Linux%20Commands/file-redirection-piping/#file-redirection","title":"File Redirection","text":"<p>File redirection allows the standard input (<code>stdin</code>), standard output (<code>stdout</code>), and standard error (<code>stderr</code>) of a command to be redirected to a file or another command.</p>"},{"location":"Linux%20Commands/file-redirection-piping/#output-redirection","title":"Output Redirection (<code>&gt;</code>)","text":"<p>Redirects the standard output of a command to a file. If the file exists, it will be overwritten.</p> <p>Syntax: <pre><code>command &gt; filename\n</code></pre></p> <p>Example: <pre><code>echo \"Hello, World!\" &gt; output.txt\n</code></pre> This will create a file named <code>output.txt</code> with the content <code>Hello, World!</code>.</p>"},{"location":"Linux%20Commands/file-redirection-piping/#append-redirection","title":"Append Redirection (<code>&gt;&gt;</code>)","text":"<p>Appends the standard output of a command to the end of a file without overwriting it.</p> <p>Syntax: <pre><code>command &gt;&gt; filename\n</code></pre></p> <p>Example: <pre><code>echo \"New Line\" &gt;&gt; output.txt\n</code></pre> This adds <code>New Line</code> to the end of the <code>output.txt</code> file.</p>"},{"location":"Linux%20Commands/file-redirection-piping/#error-redirection-2","title":"Error Redirection (<code>2&gt;</code>)","text":"<p>Redirects the standard error of a command to a file.</p> <p>Syntax: <pre><code>command 2&gt; filename\n</code></pre></p> <p>Example: <pre><code>ls nonexistentfile 2&gt; error.log\n</code></pre> This will redirect the error message to <code>error.log</code>.</p>"},{"location":"Linux%20Commands/file-redirection-piping/#redirect-both-output-and-error","title":"Redirect Both Output and Error (<code>&gt;&amp;</code>)","text":"<p>Redirects both standard output and standard error to a file.</p> <p>Syntax: <pre><code>command &gt; filename 2&gt;&amp;1\n</code></pre></p> <p>Example: <pre><code>ls nonexistentfile &gt; output.log 2&gt;&amp;1\n</code></pre> This sends both output and error messages to <code>output.log</code>.</p>"},{"location":"Linux%20Commands/file-redirection-piping/#piping","title":"Piping","text":"<p>Piping (<code>|</code>) is used to direct the output of one command as input to another command.</p>"},{"location":"Linux%20Commands/file-redirection-piping/#basic-usage","title":"Basic Usage","text":"<p>Syntax: <pre><code>command1 | command2\n</code></pre></p> <p>Example: <pre><code>ls | grep \"file\"\n</code></pre> This lists files and then filters the output to show only those containing the word <code>file</code>.</p>"},{"location":"Linux%20Commands/file-redirection-piping/#combining-multiple-commands","title":"Combining Multiple Commands","text":"<p>Example: <pre><code>ps aux | grep \"bash\" | wc -l\n</code></pre> This counts the number of bash processes running on the system.</p>"},{"location":"Linux%20Commands/file-redirection-piping/#practice-examples","title":"Practice Examples","text":"<ol> <li> <p>Redirecting Output: <pre><code>echo \"Test line 1\" &gt; testfile.txt\necho \"Test line 2\" &gt;&gt; testfile.txt\ncat testfile.txt\n</code></pre></p> </li> <li> <p>Capturing Errors: <pre><code>ls /nonexistent 2&gt; errors.log\ncat errors.log\n</code></pre></p> </li> <li> <p>Using Pipes: <pre><code>cat /etc/passwd | grep \"root\"\n</code></pre></p> </li> <li> <p>Combining Redirection and Piping: <pre><code>find / -name \"file.txt\" 2&gt; errors.log | grep \"home\"\n</code></pre></p> </li> </ol>"},{"location":"Linux%20Commands/file-redirection-piping/#additional-options","title":"Additional Options","text":"<ul> <li><code>tee</code>: Used to redirect output to both a file and the console.   Example: <pre><code>echo \"Hello World\" | tee output.txt\n</code></pre></li> <li><code>xargs</code>: Used to build and execute command lines from standard input.   Example: <pre><code>echo \"file1 file2 file3\" | xargs touch\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/file-redirection-piping/#steps-to-practice-file-redirection-and-piping-commands","title":"Steps to Practice File Redirection and Piping Commands","text":"<ol> <li> <p>Create Test Files and Directories: <pre><code>mkdir practice_dir\ncd practice_dir\necho -e \"Line1\\nLine2\\nLine3\" &gt; file1.txt\necho -e \"Another1\\nAnother2\" &gt; file2.txt\n</code></pre></p> </li> <li> <p>Practice Redirecting Output:</p> </li> <li>Overwrite a file:      <pre><code>echo \"Overwrite Example\" &gt; file1.txt\ncat file1.txt\n</code></pre></li> <li> <p>Append to a file:      <pre><code>echo \"Appended Line\" &gt;&gt; file1.txt\ncat file1.txt\n</code></pre></p> </li> <li> <p>Practice Capturing Errors:</p> </li> <li> <p>Redirect error messages:      <pre><code>ls nonexistentfile 2&gt; error.log\ncat error.log\n</code></pre></p> </li> <li> <p>Practice Using Pipes:</p> </li> <li>Chain commands:      <pre><code>cat file1.txt | grep \"Line\"\n</code></pre></li> <li> <p>Count lines:      <pre><code>ls | wc -l\n</code></pre></p> </li> <li> <p>Combine Redirection and Piping:</p> </li> <li> <p>Search and log results:      <pre><code>find / -name \"file1.txt\" 2&gt; find_errors.log | grep \"practice_dir\"\n</code></pre></p> </li> <li> <p>Advanced Practice with <code>tee</code> and <code>xargs</code>:</p> </li> <li>Redirect and display output:      <pre><code>echo \"Using tee command\" | tee combined_output.txt\ncat combined_output.txt\n</code></pre></li> <li>Execute commands from input:      <pre><code>echo \"fileA fileB\" | xargs touch\nls\n</code></pre></li> </ol>"},{"location":"Linux%20Commands/linux-file_ops/","title":"Linux Commands for File Operations in CLI","text":""},{"location":"Linux%20Commands/linux-file_ops/#1-cat","title":"1. <code>cat</code>","text":"<p>The <code>cat</code> command is used to display the contents of a file, combine multiple files, or create a new file.</p>"},{"location":"Linux%20Commands/linux-file_ops/#examples","title":"Examples:","text":"<ol> <li>Display a file's content:    <pre><code>cat filename.txt\n</code></pre></li> <li>Concatenate multiple files and display the result:    <pre><code>cat file1.txt file2.txt\n</code></pre></li> <li>Create a new file (Ctrl+D to save):    <pre><code>cat &gt; newfile.txt\n</code></pre></li> </ol>"},{"location":"Linux%20Commands/linux-file_ops/#2-less","title":"2. <code>less</code>","text":"<p>The <code>less</code> command lets you view a file one screen at a time.</p>"},{"location":"Linux%20Commands/linux-file_ops/#steps-to-use","title":"Steps to Use:","text":"<ol> <li>Move to the next item: Press <code>n</code></li> <li>Move to the top: Press <code>Shift + G</code></li> <li>Move to the bottom: Press <code>g</code></li> <li>Search forward: Type <code>/search_term</code></li> <li>Search backward: Type <code>?search_term</code></li> <li>Exit: Press <code>q</code></li> </ol>"},{"location":"Linux%20Commands/linux-file_ops/#example","title":"Example:","text":"<ul> <li>View a file:   <pre><code>less filename.txt\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/linux-file_ops/#3-more","title":"3. <code>more</code>","text":"<p>The <code>more</code> command is similar to <code>less</code> but has fewer features. It allows you to view a file one screen at a time.</p>"},{"location":"Linux%20Commands/linux-file_ops/#example_1","title":"Example:","text":"<ol> <li>View a file:    <pre><code>more filename.txt\n</code></pre></li> <li>Scroll one line at a time: Press <code>Enter</code></li> <li>Scroll one page at a time: Press <code>Space</code></li> <li>Exit: Press <code>q</code></li> </ol>"},{"location":"Linux%20Commands/linux-file_ops/#4-touch","title":"4. <code>touch</code>","text":"<p>The <code>touch</code> command is used to create an empty file or update the timestamp of an existing file.</p>"},{"location":"Linux%20Commands/linux-file_ops/#example_2","title":"Example:","text":"<ol> <li>Create a new file:    <pre><code>touch newfile.txt\n</code></pre></li> <li>Update a file's timestamp:    <pre><code>touch existingfile.txt\n</code></pre></li> </ol>"},{"location":"Linux%20Commands/linux-file_ops/#5-rm","title":"5. <code>rm</code>","text":"<p>The <code>rm</code> command is used to delete files or directories.</p>"},{"location":"Linux%20Commands/linux-file_ops/#examples_1","title":"Examples:","text":"<ol> <li>Delete a file:    <pre><code>rm filename.txt\n</code></pre></li> <li>Delete multiple files:    <pre><code>rm file1.txt file2.txt\n</code></pre></li> <li>Delete a directory and its contents recursively:    <pre><code>rm -r directory_name\n</code></pre></li> <li>Force delete without confirmation:    <pre><code>rm -rf directory_name\n</code></pre></li> </ol>"},{"location":"Linux%20Commands/linux-file_ops/#6-vi","title":"6. <code>vi</code>","text":"<p>The <code>vi</code> editor is a powerful text editor available on most Linux systems.</p>"},{"location":"Linux%20Commands/linux-file_ops/#steps-to-use_1","title":"Steps to Use:","text":"<ol> <li>Open a file in <code>vi</code>:    <pre><code>vi filename.txt\n</code></pre></li> <li>Press <code>i</code> to enter insert (edit) mode.</li> <li>Make your changes.</li> <li>Press <code>Esc</code> to exit insert mode.</li> <li>Save the file and exit:</li> <li>Save changes: <code>:w</code></li> <li>Save and exit: <code>:wq</code></li> <li>Exit without saving: <code>:q!</code></li> </ol>"},{"location":"Linux%20Commands/linux-file_ops/#example_3","title":"Example:","text":"<ul> <li>Open and edit a file:   <pre><code>vi filename.txt\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/linux-file_ops/#7-nano","title":"7. <code>nano</code>","text":"<p>The <code>nano</code> editor is a simpler text editor compared to <code>vi</code>.</p>"},{"location":"Linux%20Commands/linux-file_ops/#steps-to-use_2","title":"Steps to Use:","text":"<ol> <li>Open a file in <code>nano</code>:    <pre><code>nano filename.txt\n</code></pre></li> <li>Edit the file as needed.</li> <li>Save the changes:</li> <li>Press <code>Ctrl + O</code>, then <code>Enter</code> to save.</li> <li>Exit the editor:</li> <li>Press <code>Ctrl + X</code> to exit.</li> </ol>"},{"location":"Linux%20Commands/linux-file_ops/#example_4","title":"Example:","text":"<ul> <li>Open and edit a file:   <pre><code>nano filename.txt\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/","title":"Process Management Commands","text":""},{"location":"Linux%20Commands/process-management/#1-ps-display-process-information","title":"1. <code>ps</code> - Display Process Information","text":"<ul> <li>Description: Displays information about the currently running processes.</li> <li>Example:   <pre><code>$ ps\n</code></pre>   Output:   <pre><code>  PID TTY          TIME CMD\n 1234 pts/0    00:00:01 bash\n 5678 pts/0    00:00:00 ps\n</code></pre></li> <li>Options:</li> <li><code>-e</code>: Displays all processes.     <pre><code>$ ps -e\n</code></pre></li> <li><code>-f</code>: Displays full format listing.     <pre><code>$ ps -f\n</code></pre></li> <li><code>-u username</code>: Displays processes for a specific user.     <pre><code>$ ps -u feilzz\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/#2-top-display-real-time-process-info","title":"2. <code>top</code> - Display Real-Time Process Info","text":"<ul> <li>Description: Shows a real-time view of system processes and resource usage.</li> <li>Example:   <pre><code>$ top\n</code></pre></li> <li>Press <code>q</code> to quit.</li> <li>Options:</li> <li><code>-d seconds</code>: Sets the delay between updates.     <pre><code>$ top -d 5\n</code></pre></li> <li><code>-u username</code>: Displays processes for a specific user.     <pre><code>$ top -u feilzz\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/#3-kill-terminate-processes","title":"3. <code>kill</code> - Terminate Processes","text":"<ul> <li>Description: Sends signals to terminate or control processes.</li> <li>Example:   <pre><code>$ kill 1234\n</code></pre>   Terminates the process with PID 1234.</li> <li>Options:</li> <li><code>-9</code>: Forcefully kills a process.     <pre><code>$ kill -9 1234\n</code></pre></li> <li><code>-l</code>: Lists all available signals.     <pre><code>$ kill -l\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/#4-jobs-display-background-jobs","title":"4. <code>jobs</code> - Display Background Jobs","text":"<ul> <li>Description: Lists all background jobs in the current session.</li> <li>Example:   <pre><code>$ jobs\n</code></pre>   Output:   <pre><code>[1]+  Running    sleep 100 &amp;\n</code></pre></li> <li>Options:</li> <li><code>-l</code>: Displays process IDs of jobs.     <pre><code>$ jobs -l\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/#5-fg-bring-background-job-to-foreground","title":"5. <code>fg</code> - Bring Background Job to Foreground","text":"<ul> <li>Description: Resumes a background job in the foreground.</li> <li>Example:   <pre><code>$ fg %1\n</code></pre>   Brings job 1 to the foreground.</li> </ul>"},{"location":"Linux%20Commands/process-management/#6-bg-resume-background-job","title":"6. <code>bg</code> - Resume Background Job","text":"<ul> <li>Description: Resumes a stopped job in the background.</li> <li>Example:   <pre><code>$ bg %1\n</code></pre>   Resumes job 1 in the background.</li> </ul>"},{"location":"Linux%20Commands/process-management/#7-htop-interactive-process-viewer","title":"7. <code>htop</code> - Interactive Process Viewer","text":"<ul> <li>Description: Provides an interactive and visual view of system processes and resource usage.</li> <li>Example:   <pre><code>$ htop\n</code></pre>   Opens an interactive interface showing CPU, memory usage, and running processes.</li> <li>Options:</li> <li><code>-u &lt;username&gt;</code>: Show processes for a specific user.     <pre><code>$ htop -u feilzz\n</code></pre></li> <li><code>--sort-key</code>: Sort by a specific column (e.g., <code>%CPU</code>).     <pre><code>$ htop --sort-key=%CPU\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/#8-pkill-kill-processes-by-name","title":"8. <code>pkill</code> - Kill Processes by Name","text":"<ul> <li>Description: Terminates processes based on their name.</li> <li>Example:   <pre><code>$ pkill firefox\n</code></pre>   Kills all processes with the name <code>firefox</code>.</li> <li>Options:</li> <li><code>-u &lt;username&gt;</code>: Kill processes belonging to a specific user.     <pre><code>$ pkill -u feilzz\n</code></pre></li> <li><code>-signal</code>: Specify a signal to send (e.g., <code>SIGKILL</code>).     <pre><code>$ pkill -9 firefox\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/#9-nice-set-process-priority","title":"9. <code>nice</code> - Set Process Priority","text":"<ul> <li>Description: Launches a process with a specified priority level.</li> <li>Example:   <pre><code>$ nice -n 10 myprogram\n</code></pre>   Runs <code>myprogram</code> with a priority of <code>10</code>.</li> <li>Options:</li> <li><code>-n &lt;priority&gt;</code>: Specify the priority level (-20 is the highest, 19 is the lowest).     <pre><code>$ nice -n -5 myprogram\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/#10-renice-change-process-priority","title":"10. <code>renice</code> - Change Process Priority","text":"<ul> <li>Description: Changes the priority of a running process.</li> <li>Example:   <pre><code>$ renice 5 -p 1234\n</code></pre>   Changes the priority of process <code>1234</code> to <code>5</code>.</li> <li>Options:</li> <li><code>-p &lt;pid&gt;</code>: Specify the process ID.     <pre><code>$ renice -10 -p 5678\n</code></pre></li> <li><code>-u &lt;username&gt;</code>: Change priority for all processes of a user.     <pre><code>$ renice 15 -u feilzz\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/#11-uptime-show-system-uptime","title":"11. <code>uptime</code> - Show System Uptime","text":"<ul> <li>Description: Displays how long the system has been running along with load averages.</li> <li>Example:   <pre><code>$ uptime\n</code></pre>   Output: <code>09:45:12 up 1 day, 3:45, 2 users, load average: 0.00, 0.01, 0.05</code></li> <li>Options:</li> <li>None specific, but it's often used in scripts to check system stability.</li> </ul>"},{"location":"Linux%20Commands/process-management/#12-watch-run-command-periodically","title":"12. <code>watch</code> - Run Command Periodically","text":"<ul> <li>Description: Executes a command repeatedly at a set interval, showing the output.</li> <li>Example:   <pre><code>$ watch -n 2 df -h\n</code></pre>   Runs <code>df -h</code> every 2 seconds, showing disk usage.</li> <li>Options:</li> <li><code>-n &lt;seconds&gt;</code>: Set the interval in seconds.     <pre><code>$ watch -n 5 ls\n</code></pre></li> <li><code>-d</code>: Highlight differences between updates.     <pre><code>$ watch -d free\n</code></pre></li> </ul>"},{"location":"Linux%20Commands/process-management/#usage-notes","title":"Usage Notes","text":"<p>These commands are essential for monitoring, controlling, and managing processes on a Linux system. They provide both real-time and static views of process activity.</p>"},{"location":"Linux%20Commands/text-processing/","title":"Text Processing Commands","text":""},{"location":"Linux%20Commands/text-processing/#overview","title":"Overview","text":"<p>Text processing commands in Linux are essential for manipulating and analyzing text files. These commands allow users to filter, extract, transform, and format text efficiently.</p>"},{"location":"Linux%20Commands/text-processing/#commands-and-their-usage","title":"Commands and Their Usage","text":""},{"location":"Linux%20Commands/text-processing/#1-grep-search-for-patterns","title":"1. <code>grep</code> - Search for Patterns","text":"<ul> <li>Description: Searches for specific patterns in a file or input stream.</li> <li>Examples:   <pre><code># Search for the word 'error' in a file\n$ grep 'error' logfile.txt\n\n# Search for a pattern recursively in all files in a directory\n$ grep -r 'error' /var/logs\n\n# Display line numbers with matches\n$ grep -n 'error' logfile.txt\n\n# Ignore case during search\n$ grep -i 'error' logfile.txt\n</code></pre></li> <li>Options:</li> <li><code>-r</code>: Recursive search.</li> <li><code>-i</code>: Case-insensitive search.</li> <li><code>-n</code>: Show line numbers.</li> <li><code>-v</code>: Invert match (show lines that do not match).</li> </ul>"},{"location":"Linux%20Commands/text-processing/#2-sed-stream-editor","title":"2. <code>sed</code> - Stream Editor","text":"<ul> <li>Description: Edits text in a stream or file line by line.</li> <li>Examples:   <pre><code># Replace 'old' with 'new' in a file\n$ sed 's/old/new/' file.txt\n\n# Replace globally in each line\n$ sed 's/old/new/g' file.txt\n\n# Delete lines containing 'error'\n$ sed '/error/d' file.txt\n\n# Edit file in-place\n$ sed -i 's/old/new/g' file.txt\n</code></pre></li> <li>Options:</li> <li><code>-i</code>: Edit file in-place.</li> <li><code>-e</code>: Execute multiple commands.</li> <li><code>-n</code>: Suppress automatic printing of pattern space.</li> </ul>"},{"location":"Linux%20Commands/text-processing/#3-awk-pattern-scanning-and-processing","title":"3. <code>awk</code> - Pattern Scanning and Processing","text":"<ul> <li>Description: Processes and analyzes text files based on patterns and fields.</li> <li>Examples:   <pre><code># Print the first column of a file\n$ awk '{print $1}' file.txt\n\n# Print lines where the second column equals 100\n$ awk '$2 == 100' file.txt\n\n# Sum the values in the second column\n$ awk '{sum += $2} END {print sum}' file.txt\n\n# Use a custom delimiter\n$ awk -F: '{print $1}' /etc/passwd\n</code></pre></li> <li>Options:</li> <li><code>-F</code>: Specify field separator.</li> <li><code>-v</code>: Assign a variable.</li> <li><code>-f</code>: Read program from a file.</li> </ul>"},{"location":"Linux%20Commands/text-processing/#4-cut-extract-specific-fields","title":"4. <code>cut</code> - Extract Specific Fields","text":"<ul> <li>Description: Extracts specific columns or fields from a file or input stream.</li> <li>Examples:   <pre><code># Extract the first 10 characters of each line\n$ cut -c 1-10 file.txt\n\n# Extract the second column using a tab delimiter\n$ cut -f2 file.txt\n\n# Use a custom delimiter (colon in this case)\n$ cut -d':' -f1 /etc/passwd\n</code></pre></li> <li>Options:</li> <li><code>-c</code>: Extract specific characters.</li> <li><code>-f</code>: Extract specific fields.</li> <li><code>-d</code>: Specify delimiter.</li> </ul>"},{"location":"Linux%20Commands/text-processing/#5-sort-sort-lines-of-text","title":"5. <code>sort</code> - Sort Lines of Text","text":"<ul> <li>Description: Sorts lines in text files based on specified criteria.</li> <li>Examples:   <pre><code># Sort a file alphabetically\n$ sort file.txt\n\n# Sort a file numerically\n$ sort -n file.txt\n\n# Sort in reverse order\n$ sort -r file.txt\n\n# Sort based on a specific column\n$ sort -k2 file.txt\n</code></pre></li> <li>Options:</li> <li><code>-n</code>: Numeric sort.</li> <li><code>-r</code>: Reverse order.</li> <li><code>-k</code>: Specify column.</li> </ul>"},{"location":"Linux%20Commands/text-processing/#6-uniq-remove-duplicate-lines","title":"6. <code>uniq</code> - Remove Duplicate Lines","text":"<ul> <li>Description: Filters out duplicate lines in a file.</li> <li>Examples:   <pre><code># Remove duplicate lines (file must be sorted first)\n$ uniq file.txt\n\n# Show counts of duplicate lines\n$ uniq -c file.txt\n\n# Ignore case during comparison\n$ uniq -i file.txt\n</code></pre></li> <li>Options:</li> <li><code>-c</code>: Show counts of duplicates.</li> <li><code>-i</code>: Ignore case.</li> <li><code>-d</code>: Only show duplicate lines.</li> </ul>"},{"location":"Linux%20Commands/text-processing/#7-tr-translate-or-delete-characters","title":"7. <code>tr</code> - Translate or Delete Characters","text":"<ul> <li>Description: Translates or deletes characters in a stream.</li> <li>Examples:   <pre><code># Replace all lowercase letters with uppercase\n$ echo 'hello' | tr 'a-z' 'A-Z'\n\n# Delete all digits from input\n$ echo '123abc456' | tr -d '0-9'\n\n# Replace spaces with underscores\n$ echo 'hello world' | tr ' ' '_'\n</code></pre></li> <li>Options:</li> <li><code>-d</code>: Delete characters.</li> <li><code>-s</code>: Squeeze repeated characters.</li> </ul>"},{"location":"Linux%20Commands/text-processing/#8-wc-word-line-and-character-count","title":"8. <code>wc</code> - Word, Line, and Character Count","text":"<ul> <li>Description: Counts lines, words, and characters in a file.</li> <li>Examples:   <pre><code># Count lines\n$ wc -l file.txt\n\n# Count words\n$ wc -w file.txt\n\n# Count characters\n$ wc -c file.txt\n\n# Count all (lines, words, characters)\n$ wc file.txt\n</code></pre></li> <li>Options:</li> <li><code>-l</code>: Count lines.</li> <li><code>-w</code>: Count words.</li> <li><code>-c</code>: Count characters.</li> </ul>"},{"location":"Linux%20Commands/text-processing/#practice-examples","title":"Practice Examples","text":"<p>Here are steps to practice text processing commands:</p> <ol> <li> <p>Create a Sample Text File:    <pre><code>echo -e \"line1: hello world\\nline2: linux commands\\nline3: text processing\" &gt; sample.txt\n</code></pre></p> </li> <li> <p>Practice with <code>grep</code>:    <pre><code># Find lines containing the word 'line'\ngrep 'line' sample.txt\n\n# Find lines containing 'hello' ignoring case\ngrep -i 'hello' sample.txt\n</code></pre></p> </li> <li> <p>Practice with <code>sed</code>:    <pre><code># Replace 'hello' with 'hi'\nsed 's/hello/hi/' sample.txt\n\n# Delete lines containing 'linux'\nsed '/linux/d' sample.txt\n</code></pre></p> </li> <li> <p>Practice with <code>awk</code>:    <pre><code># Print the first word of each line\nawk '{print $1}' sample.txt\n\n# Print lines where the second column is 'commands'\nawk '$2 == \"commands\"' sample.txt\n</code></pre></p> </li> <li> <p>Practice with <code>cut</code>:    <pre><code># Extract the first 5 characters of each line\ncut -c 1-5 sample.txt\n\n# Extract the second field using ':' as a delimiter\ncut -d':' -f2 sample.txt\n</code></pre></p> </li> <li> <p>Combine Commands:    <pre><code># Extract lines containing 'line', replace 'line' with 'Line', and save to a new file\ngrep 'line' sample.txt | sed 's/line/Line/' &gt; output.txt\n</code></pre></p> </li> </ol>"},{"location":"Linux%20Commands/text-processing/#summary","title":"Summary","text":"<p>These text processing commands are powerful tools for analyzing and manipulating text data in Linux. Mastering them can significantly improve your efficiency and capability when working with text files.</p>"},{"location":"NetWorking%20Concepts/dns/","title":"DNS (Domain Name System)","text":"<p>DNS is a critical component of the internet that translates human-friendly domain names (like <code>google.com</code>) into machine-readable IP addresses (like <code>172.217.16.238</code>). Without DNS, users would have to remember IP addresses to access websites.</p>"},{"location":"NetWorking%20Concepts/dns/#how-dns-works","title":"How DNS Works","text":"<ol> <li>User Query: When you enter a domain name in your browser, your computer contacts a DNS resolver (usually provided by your ISP) to resolve the domain name into an IP address.</li> <li>Response: The resolver returns the IP address to your device, which then connects to the server hosting the website.</li> </ol>"},{"location":"NetWorking%20Concepts/dns/#key-dns-records","title":"Key DNS Records","text":"<ul> <li> <p>A Record: Maps a domain to an IPv4 address.   Example: <code>google.com -&gt; 172.217.16.238</code></p> </li> <li> <p>AAAA Record: Maps a domain to an IPv6 address.  </p> </li> <li> <p>CNAME Record: Alias for another domain.   Example: <code>www.example.com -&gt; example.com</code></p> </li> <li> <p>MX Record: Specifies mail servers for a domain.  </p> </li> <li> <p>PTR Record: Used for reverse DNS lookups (IP to domain).  </p> </li> <li> <p>NS Record: Points to the authoritative name servers for a domain.  </p> </li> </ul>"},{"location":"NetWorking%20Concepts/dns/#commands-with-examples","title":"Commands with Examples","text":""},{"location":"NetWorking%20Concepts/dns/#1-check-dns-resolution","title":"1. Check DNS Resolution","text":"<p>Command: <code>nslookup</code> </p>"},{"location":"NetWorking%20Concepts/dns/#option-1","title":"option 1:","text":"<pre><code>nslookup tablesmate.vercel.app\n</code></pre>"},{"location":"NetWorking%20Concepts/dns/#command-output","title":"Command Output:","text":"<p><pre><code>Server:         10.255.255.254\nAddress:        10.255.255.254#53\n\nNon-authoritative answer:\nName:   tablesmate.vercel.app\nAddress: 64.29.17.65\nName:   tablesmate.vercel.app\nAddress: 216.198.79.65\nName:   tablesmate.vercel.app\nAddress: 64:ff9b::d8c6:4f41\nName:   tablesmate.vercel.app\nAddress: 64:ff9b::401d:1141\n</code></pre> - Server: Outputed Server IP associated with the server (here tablesmate.vercel.app)</p>"},{"location":"NetWorking%20Concepts/dns/#option-2","title":"option 2:","text":"<pre><code>nslookup 216.198.79.65\n</code></pre>"},{"location":"NetWorking%20Concepts/dns/#command-output_1","title":"Command Output:","text":"<p><pre><code>65.79.198.216.in-addr.arpa      name = atl-cer1-755commercedr.cypresscom.net.\n</code></pre> - Name: The domain name associated with an IP.</p>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/","title":"Overview of FTP, SMTP, and TCP/IP Protocols","text":""},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#ftp-file-transfer-protocol","title":"FTP (File Transfer Protocol)","text":""},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#what-it-is","title":"What It Is:","text":"<ul> <li>FTP is a protocol for transferring files between a client and a server on a network.</li> <li>It uses a client-server model and typically operates on ports 20 and 21.</li> </ul>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#how-it-works","title":"How It Works:","text":"<ol> <li>A client establishes a connection with an FTP server.</li> <li>Files can be uploaded, downloaded, or manipulated on the server.</li> <li>It supports active and passive modes for data transfer.</li> </ol>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#use-cases","title":"Use Cases:","text":"<ul> <li>Website maintenance (uploading files to a web server).</li> <li>Sharing files across systems in a controlled environment.</li> </ul>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#commands-and-examples","title":"Commands and Examples:","text":"<ol> <li>Connect to an FTP server: <pre><code>ftp ftp.example.com\n</code></pre></li> <li>Prompts for username and password.</li> </ol> <p>Local Test:    - Install an FTP server (e.g., FileZilla Server) on your system.    - Start the server and use <code>ftp 127.0.0.1</code> to connect locally.</p> <ol> <li>List files in the current directory on the server: <pre><code>ls\n</code></pre> Local Test:</li> <li> <p>Ensure the FTP server directory contains files to test listing.</p> </li> <li> <p>Download a file from the server: <pre><code>get filename.txt\n</code></pre> Local Test:</p> </li> <li> <p>Place a file in the server directory and download it to your local system.</p> </li> <li> <p>Upload a file to the server: <pre><code>put localfile.txt\n</code></pre> Local Test:</p> </li> <li> <p>Use a local file and verify it appears in the FTP server directory after upload.</p> </li> <li> <p>Exit FTP: <pre><code>bye\n</code></pre></p> </li> </ol>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#smtp-simple-mail-transfer-protocol","title":"SMTP (Simple Mail Transfer Protocol)","text":""},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#what-it-is_1","title":"What It Is:","text":"<ul> <li>SMTP is used to send emails across the internet.</li> <li>Operates on port 25 (default), 465 (secure), or 587 (submission).</li> </ul>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#how-it-works_1","title":"How It Works:","text":"<ol> <li>The client sends an email to an SMTP server.</li> <li>The server forwards the email to the recipient's mail server.</li> <li>The recipient retrieves the email using protocols like POP3 or IMAP.</li> </ol>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#use-cases_1","title":"Use Cases:","text":"<ul> <li>Sending automated emails (notifications, alerts).</li> <li>Testing email server configurations.</li> </ul>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#commands-and-examples_1","title":"Commands and Examples:","text":"<ol> <li>Test SMTP using <code>telnet</code>: <pre><code>telnet smtp.example.com 25\n</code></pre></li> <li>Opens a connection to the SMTP server.</li> </ol> <p>Local Test:    - Install a mail server (e.g., Postfix or Sendmail) locally.    - Use <code>telnet 127.0.0.1 25</code> to connect to the local server.</p> <ol> <li>Send an email manually (example): <pre><code>HELO domain.com\nMAIL FROM: &lt;sender@example.com&gt;\nRCPT TO: &lt;recipient@example.com&gt;\nDATA\nSubject: Test Email\nThis is a test email.\n.\nQUIT\n</code></pre> Local Test:</li> <li> <p>Configure your local mail server to accept emails and verify that emails are logged or delivered.</p> </li> <li> <p>Check server response:</p> </li> <li>Server responds with status codes like <code>250</code> (OK) or <code>550</code> (Error).</li> </ol> <p>Local Test:    - Use logs from the local mail server to analyze responses.</p>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#tcpip-transmission-control-protocolinternet-protocol","title":"TCP/IP (Transmission Control Protocol/Internet Protocol)","text":""},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#what-it-is_2","title":"What It Is:","text":"<ul> <li>TCP/IP is a suite of communication protocols used to connect devices on a network.</li> <li>TCP ensures reliable delivery, while IP handles addressing and routing.</li> </ul>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#how-it-works_2","title":"How It Works:","text":"<ol> <li>TCP breaks data into packets and ensures they are delivered reliably.</li> <li>IP ensures packets are routed and addressed to the correct destination.</li> <li>Together, they form the backbone of internet communication.</li> </ol>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#use-cases_2","title":"Use Cases:","text":"<ul> <li>Ensuring reliable data transmission (e.g., web browsing, email).</li> <li>Network diagnostics and connectivity tests.</li> </ul>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#commands-and-examples_2","title":"Commands and Examples:","text":"<ol> <li>Check if a port is open (using <code>netcat</code>): <pre><code>nc -zv google.com 443\n</code></pre></li> <li>Tests if port 443 (HTTPS) on Google is reachable.</li> </ol> <p>Local Test:    - Run a local server (e.g., Python's HTTP server) using:     <pre><code>python -m http.server 808\n</code></pre>    - Check port connectivity using:    <pre><code> nc -zv 127.0.0.1 8080\n</code></pre></p> <ol> <li>Ping a server to check connectivity: <pre><code>ping example.com\n</code></pre> Local Test:</li> <li> <p>Use <code>ping 127.0.0.1</code> to test connectivity to your local system.</p> </li> <li> <p>View TCP/IP configuration: <pre><code>ifconfig (Linux/macOS)\nipconfig (Windows)\n</code></pre> Local Test:</p> </li> <li> <p>Run the command to view network details of your local machine.</p> </li> <li> <p>Trace the route packets take to a server: <pre><code>traceroute example.com (Linux/macOS)\ntracert example.com (Windows)\n</code></pre> Local Test:</p> </li> <li>Use <code>traceroute 127.0.0.1</code> or <code>tracert 127.0.0.1</code> to trace routes to your own system.</li> </ol>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#key-differences","title":"Key Differences:","text":"Protocol Purpose Common Ports Tools/Commands FTP File transfers 20, 21 <code>ftp</code>, <code>sftp</code>, <code>curl</code> SMTP Sending emails 25, 465, 587 <code>telnet</code>, <code>sendmail</code> TCP/IP Data communication backbone Various <code>ping</code>, <code>netcat</code>"},{"location":"NetWorking%20Concepts/ftp-smtp-tcp/#these-protocols-form-the-foundation-of-internet-and-network-communication","title":"These protocols form the foundation of internet and network communication.","text":""},{"location":"NetWorking%20Concepts/https%26http/","title":"HTTP vs HTTPS","text":""},{"location":"NetWorking%20Concepts/https%26http/#what-is-http","title":"What is HTTP?","text":"<p>HTTP (Hypertext Transfer Protocol) is the foundation of data communication on the web. It is used to transfer data like HTML pages, images, videos, and more between a web client (browser) and a server.</p>"},{"location":"NetWorking%20Concepts/https%26http/#how-http-works","title":"How HTTP works:","text":"<ul> <li>A client sends an HTTP request to a server.</li> <li>The server processes the request and sends back an HTTP response, usually containing the requested resource.</li> <li>HTTP is stateless, meaning each request-response pair is independent.</li> </ul>"},{"location":"NetWorking%20Concepts/https%26http/#use-case","title":"Use Case:","text":"<p>HTTP is typically used for accessing web pages or APIs where encryption is not required.</p>"},{"location":"NetWorking%20Concepts/https%26http/#what-is-https","title":"What is HTTPS?","text":"<p>HTTPS (Hypertext Transfer Protocol Secure) is an extension of HTTP with added security features. It encrypts the communication between the client and server using SSL/TLS.</p>"},{"location":"NetWorking%20Concepts/https%26http/#how-https-works","title":"How HTTPS works:","text":"<ul> <li>Adds a layer of encryption via SSL/TLS, ensuring that data exchanged is secure from eavesdropping or tampering.</li> <li>Verifies the authenticity of the server through an SSL certificate.</li> </ul>"},{"location":"NetWorking%20Concepts/https%26http/#use-case_1","title":"Use Case:","text":"<p>HTTPS is essential for secure communication, such as online banking, e-commerce, and protecting sensitive user data.</p>"},{"location":"NetWorking%20Concepts/https%26http/#key-differences-between-http-and-https","title":"Key Differences Between HTTP and HTTPS","text":"Feature HTTP HTTPS Security Unencrypted, prone to attacks Encrypted, secure communication Port 80 443 Certificate No SSL/TLS certificate needed Requires SSL/TLS certificate Performance Slightly faster Slightly slower due to encryption"},{"location":"NetWorking%20Concepts/https%26http/#example-commands-and-outputs","title":"Example Commands and Outputs","text":""},{"location":"NetWorking%20Concepts/https%26http/#1-fetching-a-webpage-http-vs-https","title":"1. Fetching a Webpage (HTTP vs HTTPS)","text":"<ul> <li>Command: <pre><code>curl http://example.com\ncurl https://example.com\n</code></pre></li> <li>Command Output: <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Example Domain&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;...&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li>Output for both is same, in https what data is encrypted</li> </ul>"},{"location":"NetWorking%20Concepts/https%26http/#2-check-ssl-certificate-for-https-website","title":"2. Check SSL Certificate ( for HTTPS website)","text":"<ul> <li>Command: <pre><code>openssl s_client -connect tablesmate.vercel.app:443\n</code></pre></li> <li>Output for above command contains certificate key, session id and various info for SSL Identification.</li> </ul>"},{"location":"NetWorking%20Concepts/https%26http/#3-analyze-https-header-http-vs-https","title":"3. Analyze HTTPS header (HTTP vs HTTPS)","text":"<ul> <li>Command: <pre><code>curl -I https://tablesmate.vercel.app\n</code></pre></li> <li> <p>Command Output: <pre><code>HTTP/2 200\naccept-ranges: bytes\naccess-control-allow-origin: *\nage: 435825\ncache-control: public, max-age=0, must-revalidate\ncontent-disposition: inline\ncontent-type: text/html; charset=utf-8\ndate: Thu, 26 Dec 2024 17:18:24 GMT\netag: \"51a5a44d4b8759e7ec7ba4b1f83addcc\"\nserver: Vercel\nstrict-transport-security: max-age=63072000; includeSubDomains; preload\nvary: RSC, Next-Router-State-Tree, Next-Router-Prefetch\nx-matched-path: /\nx-vercel-cache: HIT\nx-vercel-id: bom1::pnqb8-1735233504785-0cf1f8236a74\ncontent-length: 20363\n</code></pre></p> </li> <li> <p>output for the above command is header for the website such as status code, server, cache-control etc.</p> </li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/","title":"IP Addressing","text":""},{"location":"NetWorking%20Concepts/ip_addressing/#ipv4-internet-protocol-version-4","title":"IPv4 (Internet Protocol version 4)","text":""},{"location":"NetWorking%20Concepts/ip_addressing/#overview","title":"Overview","text":"<p>IPv4 is the fourth version of the Internet Protocol and is widely used for identifying devices on a network using a logical addressing system. It was first introduced in the 1980s and has been the backbone of the internet since its inception.</p>"},{"location":"NetWorking%20Concepts/ip_addressing/#key-features","title":"Key Features","text":"<ol> <li>Address Format: </li> <li>32-bit address, represented in dotted-decimal format (e.g., <code>192.168.1.1</code>).</li> <li> <p>Provides approximately 4.3 billion unique addresses (2\u00b3\u00b2).</p> </li> <li> <p>Address Classes:</p> </li> <li>Divided into five classes (A, B, C, D, E), with A, B, and C being commonly used for host identification.</li> <li> <p>Example:</p> <ul> <li>Class A: <code>1.0.0.0</code> to <code>126.0.0.0</code></li> <li>Class B: <code>128.0.0.0</code> to <code>191.255.0.0</code></li> <li>Class C: <code>192.0.0.0</code> to <code>223.255.255.0</code></li> </ul> </li> <li> <p>Subnetting:</p> </li> <li> <p>Allows dividing a network into smaller, manageable segments.</p> </li> <li> <p>Broadcast:</p> </li> <li> <p>IPv4 supports broadcast communication, sending data to all devices on a subnet.</p> </li> <li> <p>Challenges:</p> </li> <li>Limited address space due to the explosion of internet-connected devices.</li> <li>Security vulnerabilities inherent in the protocol.</li> </ol>"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv6-internet-protocol-version-6","title":"IPv6 (Internet Protocol version 6)","text":""},{"location":"NetWorking%20Concepts/ip_addressing/#overview_1","title":"Overview","text":"<p>IPv6 was developed as a successor to IPv4 to address its limitations, especially the exhaustion of IP addresses. Introduced in 1998, IPv6 provides a much larger address space and improved features.</p>"},{"location":"NetWorking%20Concepts/ip_addressing/#key-features_1","title":"Key Features","text":"<ol> <li>Address Format:</li> <li>128-bit address, represented in hexadecimal colon-separated format (e.g., <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code>).</li> <li> <p>Provides approximately 340 undecillion addresses (2\u00b9\u00b2\u2078), which is vastly larger than IPv4.</p> </li> <li> <p>No Classes:</p> </li> <li> <p>Does not use traditional address classes. Instead, it employs hierarchical addressing for efficient routing.</p> </li> <li> <p>Simplified Header:</p> </li> <li> <p>Designed with a simplified and efficient header compared to IPv4.</p> </li> <li> <p>Security:</p> </li> <li> <p>Built-in support for IPsec (Internet Protocol Security), making IPv6 inherently more secure.</p> </li> <li> <p>No Broadcast:</p> </li> <li> <p>Replaces broadcast communication with multicast and anycast, which are more efficient.</p> </li> <li> <p>Auto-Configuration:</p> </li> <li> <p>Supports both stateful (DHCPv6) and stateless (SLAAC) address auto-configuration.</p> </li> <li> <p>Compatibility:</p> </li> <li>Includes mechanisms like dual-stack and tunneling to coexist with IPv4 during the transition period.</li> </ol>"},{"location":"NetWorking%20Concepts/ip_addressing/#comparison-ipv4-vs-ipv6","title":"Comparison: IPv4 vs. IPv6","text":"Feature IPv4 IPv6 Address Size 32-bit 128-bit Address Format Decimal (e.g., 192.0.2.1) Hexadecimal (e.g., 2001:0db8::1) Address Space ~4.3 billion addresses ~340 undecillion addresses Security Optional (IPsec support) Mandatory (IPsec integration) Header Complexity More complex Simplified Broadcast Supported Replaced by multicast/anycast Auto-Configuration Limited Extensive support for auto-configuration Network Efficiency Less efficient Improved efficiency and routing"},{"location":"NetWorking%20Concepts/ip_addressing/#why-ipv6","title":"Why IPv6?","text":"<ul> <li>The rapid growth of the internet, IoT devices, and mobile networks necessitated a protocol that could handle billions of new devices.</li> <li>IPv6 offers scalability, better performance, and more robust security, making it the future of internet addressing. </li> </ul> <p>Despite IPv6's advantages, IPv4 remains widely used due to compatibility issues, the slow transition process, and the development of technologies like NAT (Network Address Translation) that prolong IPv4's usability.</p>"},{"location":"NetWorking%20Concepts/ip_addressing/#command-ifconfig","title":"Command: <code>ifconfig</code>","text":""},{"location":"NetWorking%20Concepts/ip_addressing/#usage","title":"Usage","text":"<ul> <li><code>ifconfig</code>: Displays active network interfaces along with their IP addresses, subnet masks, and MAC addresses.</li> <li><code>ifconfig -a</code>: Lists detailed information about all network interfaces, including inactive ones.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#example-output","title":"Example Output","text":"<pre><code>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 172.24.240.76  netmask 255.255.240.0  broadcast 172.24.255.255\n        inet6 fe80::215:5dff:fe04:d5b0  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 00:15:5d:04:d5:b0  txqueuelen 1000  (Ethernet)\n        RX packets 15114  bytes 61383003 (61.3 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 11239  bytes 827892 (827.8 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 60  bytes 7052 (7.0 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 60  bytes 7052 (7.0 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre>"},{"location":"NetWorking%20Concepts/ip_addressing/#key-components-of-ifconfig-output","title":"Key Components of <code>ifconfig</code> Output","text":""},{"location":"NetWorking%20Concepts/ip_addressing/#eth0-ethernet-interface","title":"<code>eth0</code> - Ethernet Interface:","text":"<ul> <li>Flags: Indicates the interface state and capabilities.</li> <li>UP: The interface is active.</li> <li>BROADCAST: Supports broadcast of packets.</li> <li>RUNNING: The interface driver is operational.</li> <li>MULTICAST: Supports multicast communication.</li> <li>MTU (Maximum Transmission Unit): Maximum size of packets (in bytes). Default is 1500.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv4-information","title":"IPv4 Information","text":"<ul> <li><code>inet</code>: IPv4 address of the interface (e.g., <code>172.24.240.76</code>).</li> <li><code>netmask</code>: Subnet mask, indicating the size of the subnet. For example:</li> <li><code>255.255.240.0</code> represents a 20-bit network and a 12-bit host (2^12 = 4096 IPs).</li> <li>Binary: <code>11111111.11111111.11110000.00000000</code>.</li> <li><code>broadcast</code>: Address to broadcast packets to all devices on the subnet.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv6-information","title":"IPv6 Information","text":"<ul> <li><code>inet6</code>: IPv6 address of the interface (e.g., <code>fe80::215:5dff:fe04:d5b0</code>).</li> <li><code>prefixlen</code>: Subnet size (e.g., <code>64</code>).</li> <li><code>scopeid</code>: Specifies the scope of the IPv6 address:</li> <li>link: Valid only on the same physical or logical link (e.g., <code>fe80::/10</code>).</li> <li>global: Valid across the entire IPv6 internet.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#mac-address","title":"MAC Address","text":"<ul> <li><code>ether</code>: MAC address of the interface (e.g., <code>00:15:5d:04:d5:b0</code>).</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#transmission-queue","title":"Transmission Queue","text":"<ul> <li><code>txqueuelen</code>: Length of the queue for outgoing packets.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#packet-statistics","title":"Packet Statistics","text":"<pre><code>RX packets 12445 bytes 50759954 (50.7 MB):\nNumber of packets (12445) and total data (50.7 MB) received by this interface.\n\nRX errors 0 dropped 0 overruns 0 frame 0:\nIndicates no errors occurred during reception.\n\nTX packets 9490 bytes 699021 (699.0 KB):\nNumber of packets (9490) and total data (699 KB) transmitted by this interface.\n\nTX errors 0 dropped 0 overruns 0 carrier 0 collisions 0:\nIndicates no errors occurred during transmission.\n</code></pre>"},{"location":"NetWorking%20Concepts/ip_addressing/#rx-receive","title":"RX (Receive)","text":"<ul> <li>Packets: Number of packets received.</li> <li>Bytes: Total data received.</li> <li>Errors, Drops, Overruns, Frame: Error statistics.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#tx-transmit","title":"TX (Transmit)","text":"<ul> <li>Packets: Number of packets transmitted.</li> <li>Bytes: Total data transmitted.</li> <li>Errors, Drops, Overruns, Carrier, Collisions: Error statistics.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#lo-loopback-interface","title":"<code>lo</code> - Loopback Interface:","text":"<p>Used for internal communication within the system.</p>"},{"location":"NetWorking%20Concepts/ip_addressing/#flags","title":"Flags","text":"<ul> <li>UP</li> <li>LOOPBACK</li> <li>RUNNING</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#mtu-maximum-transmission-unit","title":"MTU (Maximum Transmission Unit):","text":"<ul> <li>65536 (used internally)</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv4-loopback","title":"IPv4 Loopback:","text":"<ul> <li>inet: 127.0.0.1 (commonly referred to as localhost.)</li> <li>Traffic sent here stays within the same machine.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#ipv6-loopback","title":"IPv6 Loopback:","text":"<ul> <li>inet6: ::1 (equivalent to 127.0.0.1 for IPv4)</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#packet-statistics_1","title":"Packet Statistics:","text":"<p><pre><code>RX packets 48 bytes 5650 (5.6 KB):\nTraffic received by the loopback interface.\n\nTX packets 48 bytes 5650 (5.6 KB):\nTraffic sent over the loopback interface.\n</code></pre> - RX (Receive): Traffic received by the loopback interface. - TX (Transmit): Traffic sent over the loopback interface.</p> <p>No errors or dropped packets are reported, as expected for local traffic.</p>"},{"location":"NetWorking%20Concepts/ip_addressing/#command-ping","title":"Command: <code>ping</code>","text":""},{"location":"NetWorking%20Concepts/ip_addressing/#usage-example","title":"Usage Example:","text":"<ul> <li>Test if a host is reachable.</li> </ul> <pre><code>ping tablesmate.vercel.app\n</code></pre>"},{"location":"NetWorking%20Concepts/ip_addressing/#example-output_1","title":"Example Output:","text":"<pre><code>PING tablesmate.vercel.app (216.198.79.65) 56(84) bytes of data.\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=1 ttl=241 time=58.0 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=2 ttl=241 time=54.9 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=3 ttl=241 time=65.1 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=4 ttl=241 time=54.4 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=5 ttl=241 time=56.8 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=6 ttl=241 time=72.5 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=7 ttl=241 time=75.1 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=8 ttl=241 time=65.8 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=9 ttl=241 time=51.4 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=10 ttl=241 time=51.5 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=11 ttl=241 time=65.1 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=12 ttl=241 time=44.6 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=13 ttl=241 time=50.7 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=14 ttl=241 time=83.7 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=15 ttl=241 time=43.2 ms\n64 bytes from atl-cer1-755commercedr.cypresscom.net (216.198.79.65): icmp_seq=16 ttl=241 time=68.1 ms\n^C\n--- tablesmate.vercel.app ping statistics ---\n16 packets transmitted, 16 received, 0% packet loss, time 15182ms\nrtt min/avg/max/mdev = 43.209/60.052/83.673/10.957 ms\n</code></pre>"},{"location":"NetWorking%20Concepts/ip_addressing/#components-of-ping-output","title":"Components of <code>ping</code> Output","text":"<ul> <li>216.198.79.65: Resolved IP of the domain.</li> <li>56(84) bytes of data: Each ICMP packet contains 56 bytes of data, and the total packet size is 84 bytes (56 bytes of data + 28 bytes for headers).</li> <li>64 bytes: Size of response packet.</li> <li>atl-cer1-755commercedr.cypresscom.net: The hostname corresponding to the IP address of the server (216.198.79.65).</li> <li>icmp_seq: The sequence number of ICMP packets (starts with 1 and increments).</li> <li>ttl: The Time-To-Live (TTL) value, indicating the maximum number of network hops the packet can take before being discarded. A TTL of 241 suggests the packet traversed several hops but is still within its initial limit.</li> <li>time: The round-trip time (RTT) for the packet, measured in milliseconds. This indicates how long it took for the packet to travel to the server and back.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#summary","title":"Summary:","text":"<ul> <li>16 received: The total number of packets successfully received back from the server.</li> <li>16 packets transmitted: The total number of ICMP packets sent to the server.</li> <li>0% packet loss: Indicates no packets were lost, showing a reliable connection.</li> <li>time 15182ms: Total time taken to transmit and receive all packets.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#rtt-statistics","title":"RTT Statistics:","text":"<ul> <li>min: Minimum RTT recorded (43.209 ms).</li> <li>avg: Average RTT across all packets (60.052 ms).</li> <li>max: Maximum RTT recorded (83.673 ms).</li> <li>mdev: Mean deviation, indicating variability in RTT (10.957 ms). A lower value suggests more consistent latency.</li> </ul>"},{"location":"NetWorking%20Concepts/ip_addressing/#command-traceroute","title":"Command: <code>traceroute</code>","text":""},{"location":"NetWorking%20Concepts/ip_addressing/#usage-example_1","title":"Usage Example:","text":"<ul> <li>Network diagnosis, shows the path that packets take to reach the destination.</li> </ul> <pre><code>traceroute tablesmate.vercel.app\n</code></pre>"},{"location":"NetWorking%20Concepts/ip_addressing/#example-output_2","title":"Example Output:","text":"<pre><code>traceroute to tablesmate.vercel.app (64.29.17.65), 64 hops max\n  1   172.24.240.1  0.740ms  0.357ms  0.293ms\n  2   192.168.28.246  13.179ms  2.941ms  2.385ms\n  3   *  *  *\n  4   192.168.173.209  31.011ms  38.245ms  22.654ms\n  5   192.168.203.1  28.829ms  26.160ms  28.298ms\n  6   *  *  *\n  7   123.63.198.92  74.375ms  30.335ms  28.007ms\n  8   182.19.106.103  31.764ms  60.714ms  29.920ms\n  9   *  *  *\n 10   *  *  *\n|\n|\n|\n 64  *  *  *\n</code></pre>"},{"location":"NetWorking%20Concepts/ip_addressing/#elements-in-traceroute","title":"Elements in Traceroute:","text":"<ul> <li>Hop Number: Each line starts with a hop number, indicating the sequential step in the route.</li> <li>IP Address: The IP address of the router or device at that hop.</li> <li>Round-Trip Times (RTT): The time (in milliseconds) it takes for a packet to travel to that hop and back, displayed for three attempts.</li> <li> <ul> <li>: Indicates that no response (ICMP packet) was received from that hop within the timeout period due to firewall (for security).</li> </ul> </li> </ul>"},{"location":"NetWorking%20Concepts/subnetting/","title":"Subnetting: Commands and Examples","text":""},{"location":"NetWorking%20Concepts/subnetting/#understanding-subnetting","title":"Understanding Subnetting","text":""},{"location":"NetWorking%20Concepts/subnetting/#what-is-subnetting","title":"What is Subnetting?","text":"<p>Subnetting is the process of dividing a larger network (or IP address block) into smaller, more manageable sub-networks, known as subnets. This is done to improve network performance, enhance security, and better utilize IP address space.</p>"},{"location":"NetWorking%20Concepts/subnetting/#why-subnetting-is-needed","title":"Why Subnetting is Needed?","text":"<ol> <li>Efficient IP Address Utilization: Prevents wastage of IP addresses.</li> <li>Improved Performance: Reduces network congestion by limiting the size of broadcast domains.</li> <li>Enhanced Security: Isolates subnets, ensuring only specific communication is allowed.</li> <li>Simplifies Management: Makes it easier to manage a large network.</li> </ol>"},{"location":"NetWorking%20Concepts/subnetting/#how-does-subnetting-work","title":"How Does Subnetting Work?","text":"<ol> <li>Divide the Network: Use subnet masks to split an IP range into smaller subnets.</li> <li>Assign IPs: Allocate IP addresses to devices within each subnet.</li> <li> <p>Route Traffic: Configure routers to handle communication between subnets.</p> </li> <li> <p>Subnet Mask: Defines which portion of an IP address is the network ID and which part is the host ID. </p> </li> <li> <p>Example: For <code>192.168.1.0/24</code>, the subnet mask is <code>255.255.255.0</code>, meaning the first 24 bits are the network portion, and the last 8 bits are for host addresses.</p> </li> <li> <p>CIDR Notation: <code>/24</code> represents the subnet mask's bit length.</p> </li> <li> <p>Dividing a Network: Network divided into Network address, broadcast address, host address.</p> </li> <li>Network Address: Identifies the subnet.</li> <li>Broadcast Address: Used to send messages to all hosts in a subnet.</li> <li>Host Addresses: Usable IPs for devices.</li> </ol>"},{"location":"NetWorking%20Concepts/subnetting/#impact-of-subnetting-on-a-network","title":"Impact of Subnetting on a Network","text":"<ul> <li>Limits the number of devices per subnet.</li> <li>Helps segregate traffic, improving speed and security.</li> <li>Requires routers to manage communication between subnets.</li> </ul>"},{"location":"NetWorking%20Concepts/subnetting/#setting-up-a-subnet","title":"Setting Up a Subnet","text":""},{"location":"NetWorking%20Concepts/subnetting/#1-planning-subnets","title":"1. Planning Subnets","text":"<p>Suppose you have <code>192.168.1.0/24</code> and need: - 2 subnets for 50 devices each. - 1 subnet for 20 devices.</p> Subnet Required Hosts Subnet Mask Network Address Broadcast Address Host Range A 50 255.255.255.192 (/26) 192.168.1.0 192.168.1.63 192.168.1.1 - 192.168.1.62 B 50 255.255.255.192 (/26) 192.168.1.64 192.168.1.127 192.168.1.65 - 192.168.1.126 C 20 255.255.255.224 (/27) 192.168.1.128 192.168.1.159 192.168.1.129 - 192.168.1.158"},{"location":"NetWorking%20Concepts/subnetting/#commands-related-to-subnetting","title":"Commands Related to Subnetting","text":""},{"location":"NetWorking%20Concepts/subnetting/#1-calculate-subnets","title":"1. Calculate Subnets","text":"<p>Use tools to calculate subnets for an IP range.</p>"},{"location":"NetWorking%20Concepts/subnetting/#example","title":"Example:","text":"<p><pre><code>ipcalc 192.168.1.0/24\n</code></pre> Output: <pre><code>Address:   192.168.1.0          11000000.10101000.00000001. 00000000\nNetmask:   255.255.255.0 = 24   11111111.11111111.11111111. 00000000\nWildcard:  0.0.0.255            00000000.00000000.00000000. 11111111\n=&gt;\nNetwork:   192.168.1.0/24       11000000.10101000.00000001. 00000000\nHostMin:   192.168.1.1          11000000.10101000.00000001. 00000001\nHostMax:   192.168.1.254        11000000.10101000.00000001. 11111110\nBroadcast: 192.168.1.255        11000000.10101000.00000001. 11111111\nHosts/Net: 254                   Class C\n</code></pre></p>"},{"location":"NetWorking%20Concepts/subnetting/#2-add-a-static-route","title":"2. Add a Static Route","text":"<p>To enable communication between subnets:</p>"},{"location":"NetWorking%20Concepts/subnetting/#example_1","title":"Example:","text":"<pre><code>sudo route add -net 192.168.2.0/24 gw 192.168.1.1\n</code></pre> <p>This adds a route for the <code>192.168.2.0/24</code> subnet through gateway <code>192.168.1.1</code>.</p>"},{"location":"NetWorking%20Concepts/subnetting/#3-view-network-information","title":"3. View Network Information","text":"<p>To view routing table and network configuration:</p>"},{"location":"NetWorking%20Concepts/subnetting/#example_2","title":"Example:","text":"<p><pre><code>ip route\n</code></pre> Output: <pre><code>192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.1\n192.168.2.0/24 via 192.168.1.1 dev eth0\n</code></pre></p>"},{"location":"NetWorking%20Concepts/subnetting/#4-enable-ip-forwarding","title":"4. Enable IP Forwarding","text":"<p>Enable a Linux machine to act as a router:</p>"},{"location":"NetWorking%20Concepts/subnetting/#example_3","title":"Example:","text":"<pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n</code></pre>"},{"location":"NetWorking%20Concepts/subnetting/#5-test-subnet-mask","title":"5. Test Subnet Mask","text":"<p>To verify the subnet mask of a network interface:</p>"},{"location":"NetWorking%20Concepts/subnetting/#example_4","title":"Example:","text":"<p><pre><code>ifconfig | grep \"Mask\"\n</code></pre> Output: <pre><code>inet addr:192.168.1.2  Bcast:192.168.1.255  Mask:255.255.255.0\n</code></pre></p>"},{"location":"NetWorking%20Concepts/subnetting/#6-test-connectivity","title":"6. Test Connectivity","text":"<p>Verifies communication with a device in another subnet.</p> <p><pre><code>ping -c 4 192.168.2.1\n</code></pre> Output:     <pre><code>PING 192.168.2.1 (192.168.2.1) 56(84) bytes of data.\n64 bytes from 192.168.2.1: icmp_seq=1 ttl=64 time=0.032 ms\n</code></pre></p>"},{"location":"NetWorking%20Concepts/subnetting/#real-life-subnetting-example-two-networks-with-20-computers-each","title":"Real-Life Subnetting Example: Two Networks with 20 Computers Each","text":""},{"location":"NetWorking%20Concepts/subnetting/#scenario","title":"Scenario","text":"<p>You have two networks, each with 20 computers, connected to the same router. Subnetting is required to organize and manage these networks.</p>"},{"location":"NetWorking%20Concepts/subnetting/#step-by-step-solution","title":"Step-by-Step Solution","text":""},{"location":"NetWorking%20Concepts/subnetting/#step-1-define-requirements","title":"Step 1: Define Requirements","text":"<ul> <li>Hosts per Network: 20 devices + some buffer (e.g., printers or future devices). Plan for 30 hosts per network.</li> <li>Number of Networks: 2.</li> </ul>"},{"location":"NetWorking%20Concepts/subnetting/#step-2-choose-an-ip-range","title":"Step 2: Choose an IP Range","text":"<p>Suppose the router is assigned the IP range 192.168.1.0/24 (256 IPs).</p>"},{"location":"NetWorking%20Concepts/subnetting/#step-3-subnet-the-range","title":"Step 3: Subnet the Range","text":"<p>To accommodate two networks: - Required hosts per subnet: 30. - Subnet size: <code>/27</code> (32 IPs per subnet).</p> Subnet ID Network Address Subnet Mask Host Range Broadcast Address Subnet 1 192.168.1.0 255.255.255.224 192.168.1.1-192.168.1.30 192.168.1.31 Subnet 2 192.168.1.32 255.255.255.224 192.168.1.33-192.168.1.62 192.168.1.63"},{"location":"NetWorking%20Concepts/subnetting/#step-4-assign-ips","title":"Step 4: Assign IPs","text":"<ol> <li>Subnet 1:</li> <li>Router IP: <code>192.168.1.1</code>.</li> <li> <p>Computers: <code>192.168.1.2</code> to <code>192.168.1.30</code>.</p> </li> <li> <p>Subnet 2:</p> </li> <li>Router IP: <code>192.168.1.33</code>.</li> <li>Computers: <code>192.168.1.34</code> to <code>192.168.1.62</code>.</li> </ol>"},{"location":"NetWorking%20Concepts/subnetting/#step-5-configure-the-router","title":"Step 5: Configure the Router","text":"<p>To enable communication between subnets: - Add static routes:   <pre><code>route add -net 192.168.1.32/27 gw 192.168.1.1\nroute add -net 192.168.1.0/27 gw 192.168.1.33\n</code></pre> - Enable IP forwarding:   <pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n</code></pre></p>"},{"location":"NetWorking%20Concepts/subnetting/#step-6-test-connectivity","title":"Step 6: Test Connectivity","text":"<ol> <li>Ping between subnets:    <pre><code>ping 192.168.1.34\n</code></pre></li> <li>Verify routing table:    <pre><code>ip route\n</code></pre></li> </ol>"},{"location":"NetWorking%20Concepts/subnetting/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Subnetting isolates traffic and improves performance.</li> <li>The router acts as a gateway between subnets.</li> <li>Proper subnet masks and static routes ensure seamless communication.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/","title":"VPN Overview","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#what-is-vpn","title":"What is VPN?","text":"<p>A Virtual Private Network (VPN) creates a secure, encrypted connection between your device and a remote server. VPNs are commonly used for:</p> <ul> <li>Securing data transmission over public networks.</li> <li>Accessing region-restricted services.</li> <li>Hiding your IP address to enhance privacy.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#common-vpn-commands-and-examples","title":"Common VPN Commands and Examples","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#1-openvpn-connection","title":"1. OpenVPN Connection","text":"<p><pre><code>sudo openvpn --config myvpn.ovpn\n</code></pre> Use Case: Connect to a VPN using an OpenVPN configuration file.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#2-check-vpn-status","title":"2. Check VPN Status","text":"<p><pre><code>nmcli connection show\n</code></pre> Use Case: Display active network connections, including VPN.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#3-disconnect-vpn","title":"3. Disconnect VPN","text":"<p><pre><code>nmcli connection down &lt;vpn_name&gt;\n</code></pre> Use Case: Terminate the VPN connection.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#best-practices","title":"Best Practices","text":"<ul> <li>Use strong authentication methods (e.g., certificates).</li> <li>Avoid public VPN services for sensitive tasks.</li> <li>Regularly update VPN client software.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#ssh-overview","title":"SSH Overview","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#what-is-ssh","title":"What is SSH?","text":"<p>Secure Shell (SSH) is a cryptographic network protocol for secure communication over an insecure network. It is commonly used for:</p> <ul> <li>Remote server administration.</li> <li>Secure file transfers.</li> <li>Port forwarding.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#common-ssh-commands-and-examples","title":"Common SSH Commands and Examples","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#1-ssh-to-remote-server","title":"1. SSH to Remote Server","text":"<p><pre><code>ssh user@host\n</code></pre> Use Case: Connect to a remote server using the specified username and host.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#2-copy-files-securely-using-scp","title":"2. Copy Files Securely Using SCP","text":"<p><pre><code>scp file.txt user@host:/path/\nscp user@host:/path/file.txt .\n</code></pre> Use Case: Upload or download files securely to/from a remote server.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#3-generate-ssh-key","title":"3. Generate SSH Key","text":"<p><pre><code>ssh-keygen -t rsa -b 2048\n</code></pre> Use Case: Create an RSA key pair for passwordless authentication.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#4-copy-ssh-key-to-remote-server","title":"4. Copy SSH Key to Remote Server","text":"<p><pre><code>ssh-copy-id user@host\n</code></pre> Use Case: Enable passwordless SSH login to a remote server.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#5-ssh-port-forwarding","title":"5. SSH Port Forwarding","text":"<p><pre><code>ssh -L 8080:localhost:80 user@host\n</code></pre> Use Case: Forward a local port (8080) to a remote port (80) via SSH.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#6-execute-command-on-remote-server","title":"6. Execute Command on Remote Server","text":"<p><pre><code>ssh user@host \"ls -la\"\n</code></pre> Use Case: Run a command remotely without starting an interactive shell.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#best-practices_1","title":"Best Practices","text":"<ul> <li>Use SSH keys instead of passwords.</li> <li>Restrict SSH access to specific IPs.</li> <li>Disable root login and use non-default ports.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#vpn-with-wireguard","title":"VPN with WireGuard","text":"<p><pre><code>sudo wg-quick up wg0\n</code></pre> Use Case: Activate a WireGuard VPN interface.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#ssh-tunneling-for-proxying","title":"SSH Tunneling for Proxying","text":"<p><pre><code>ssh -D 9050 user@host\n</code></pre> Use Case: Set up a dynamic SOCKS proxy through an SSH connection.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#securely-sync-directories-with-rsync-over-ssh","title":"Securely Sync Directories with <code>rsync</code> over SSH","text":"<p><pre><code>rsync -avz -e ssh /local/path/ user@host:/remote/path/\n</code></pre> Use Case: Synchronize directories between a local and remote machine.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#firewall-overview","title":"Firewall Overview","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#what-is-a-firewall","title":"What is a Firewall?","text":"<p>A firewall is a network security device or software designed to monitor and control incoming and outgoing traffic based on predefined security rules. Firewalls are commonly used to:</p> <ul> <li>Protect systems from unauthorized access.</li> <li>Control traffic flow within and across networks.</li> <li>Prevent malicious attacks and data breaches.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#types-of-firewalls","title":"Types of Firewalls","text":"<ul> <li>Network Firewalls: Protect an entire network.</li> <li>Host-Based Firewalls: Installed on individual devices.</li> <li>Cloud Firewalls: Protect cloud-based infrastructure.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#common-firewall-commands-and-examples","title":"Common Firewall Commands and Examples","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#1-list-active-rules","title":"1. List Active Rules","text":"<p><pre><code>sudo ufw status\nsudo iptables -L\n</code></pre> Use Case: Check active firewall rules.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#2-allow-traffic-on-a-port","title":"2. Allow Traffic on a Port","text":"<p><pre><code>sudo ufw allow 22/tcp\n</code></pre> Use Case: Enable SSH access.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#3-block-traffic-on-a-port","title":"3. Block Traffic on a Port","text":"<p><pre><code>sudo ufw deny 80/tcp\n</code></pre> Use Case: Block HTTP access.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#4-enable-firewall","title":"4. Enable Firewall","text":"<p><pre><code>sudo ufw enable\n</code></pre> Use Case: Activate the firewall to enforce security policies.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#5-log-firewall-activity","title":"5. Log Firewall Activity","text":"<p><pre><code>sudo iptables -A INPUT -j LOG\n</code></pre> Use Case: Monitor traffic for analysis and debugging.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#6-delete-a-rule","title":"6. Delete a Rule","text":"<p><pre><code>sudo ufw delete allow 22/tcp\n</code></pre> Use Case: Remove an existing rule.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#advanced-use-cases_1","title":"Advanced Use Cases","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#temporary-block-using-iptables","title":"Temporary Block Using <code>iptables</code>","text":"<p><pre><code>sudo iptables -I INPUT -s 192.168.1.100 -j DROP\n</code></pre> Use Case: Temporarily block traffic from a specific IP address.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#open-multiple-ports","title":"Open Multiple Ports","text":"<p><pre><code>sudo ufw allow 443,80/tcp\n</code></pre> Use Case: Allow HTTPS and HTTP traffic.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#rate-limiting-with-ufw","title":"Rate Limiting with UFW","text":"<p><pre><code>sudo ufw limit 22/tcp\n</code></pre> Use Case: Protect against brute force attacks on SSH.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#best-practices_2","title":"Best Practices","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#general-firewall-tips","title":"General Firewall Tips","text":"<ul> <li>Regularly review and update firewall rules.</li> <li>Use the principle of least privilege (allow only necessary traffic).</li> <li>Monitor logs to detect unusual activity.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#ufw-specific","title":"UFW Specific","text":"<ul> <li>Enable logging with <code>sudo ufw logging on</code>.</li> <li>Use <code>sudo ufw reset</code> to reset all rules if needed.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#iptables-specific","title":"IPTables Specific","text":"<ul> <li>Save rules using <code>sudo iptables-save &gt; /etc/iptables/rules.v4</code>.</li> <li>Load rules at boot with appropriate system services.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#ldap-overview","title":"LDAP Overview","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#what-is-ldap","title":"What is LDAP?","text":"<p>The Lightweight Directory Access Protocol (LDAP) is a protocol for accessing and maintaining distributed directory information services over an IP network. LDAP is commonly used for:</p> <ul> <li>Centralized authentication and authorization.</li> <li>Storing user, group, and device information.</li> <li>Facilitating single sign-on (SSO) for networked systems.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#key-features-of-ldap","title":"Key Features of LDAP","text":"<ul> <li>Hierarchical Structure: Data is stored in a tree-like structure.</li> <li>Interoperability: Works with a variety of systems and platforms.</li> <li>Authentication Support: Can be integrated with security mechanisms like SASL.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#common-ldap-commands-and-examples","title":"Common LDAP Commands and Examples","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#1-search-ldap-directory","title":"1. Search LDAP Directory","text":"<p><pre><code>ldapsearch -x -b \"dc=example,dc=com\"\n</code></pre> Use Case: Query user or group information from the directory.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#2-bind-to-ldap-server","title":"2. Bind to LDAP Server","text":"<p><pre><code>ldapwhoami -x -D \"cn=admin,dc=example,dc=com\" -W\n</code></pre> Use Case: Authenticate against an LDAP server.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#3-add-ldap-entry","title":"3. Add LDAP Entry","text":"<p><pre><code>ldapadd -x -D \"cn=admin,dc=example,dc=com\" -W -f entry.ldif\n</code></pre> Use Case: Add new users or groups to the directory.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#4-modify-ldap-entry","title":"4. Modify LDAP Entry","text":"<p><pre><code>ldapmodify -x -D \"cn=admin,dc=example,dc=com\" -W -f modify.ldif\n</code></pre> Use Case: Update attributes of an existing user or group.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#5-delete-ldap-entry","title":"5. Delete LDAP Entry","text":"<p><pre><code>ldapdelete -x -D \"cn=admin,dc=example,dc=com\" -W \"cn=user,dc=example,dc=com\"\n</code></pre> Use Case: Remove obsolete entries from the directory.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#advanced-use-cases_2","title":"Advanced Use Cases","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#bulk-import-entries","title":"Bulk Import Entries","text":"<p><pre><code>ldapadd -x -D \"cn=admin,dc=example,dc=com\" -W -f bulk.ldif\n</code></pre> Use Case: Add multiple entries at once using an LDIF file.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#search-with-filters","title":"Search with Filters","text":"<p><pre><code>ldapsearch -x -b \"dc=example,dc=com\" \"(&amp;(objectClass=person)(uid=jdoe))\"\n</code></pre> Use Case: Find specific entries based on attributes.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#change-user-password","title":"Change User Password","text":"<p><pre><code>ldappasswd -x -D \"cn=admin,dc=example,dc=com\" -W -s newpassword \"uid=jdoe,dc=example,dc=com\"\n</code></pre> Use Case: Reset a user's password.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#export-entire-directory","title":"Export Entire Directory","text":"<p><pre><code>ldapsearch -x -LLL -b \"dc=example,dc=com\" &gt; backup.ldif\n</code></pre> Use Case: Backup all directory data to an LDIF file.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#delete-all-entries-under-a-branch","title":"Delete All Entries Under a Branch","text":"<p><pre><code>ldapdelete -x -D \"cn=admin,dc=example,dc=com\" -W \"ou=groups,dc=example,dc=com\"\n</code></pre> Use Case: Remove all entries within a specific branch of the directory.</p>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#best-practices_3","title":"Best Practices","text":""},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#general-ldap-tips","title":"General LDAP Tips","text":"<ul> <li>Use strong administrative passwords and secure connections (e.g., LDAPS).</li> <li>Regularly back up directory data.</li> <li>Implement access controls to restrict sensitive data.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#schema-management","title":"Schema Management","text":"<ul> <li>Extend schemas carefully to ensure compatibility.</li> <li>Use tools like <code>slapcat</code> for schema validation.</li> </ul>"},{"location":"NetWorking%20Concepts/vpn-ssh-firewall-ldap/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":"<ul> <li>Enable logging for audit purposes.</li> <li>Monitor performance and tune configurations for large directories.</li> </ul>"}]}